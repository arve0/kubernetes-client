"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: release-1.24
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CoreV1Api = void 0;
const runtime = require("../runtime");
const models_1 = require("../models");
/**
 *
 */
class CoreV1Api extends runtime.BaseAPI {
    /**
     * connect DELETE requests to proxy of Pod
     */
    connectDeleteNamespacedPodProxyRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.name === null || requestParameters.name === undefined) {
                throw new runtime.RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling connectDeleteNamespacedPodProxy.');
            }
            if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                throw new runtime.RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling connectDeleteNamespacedPodProxy.');
            }
            const queryParameters = {};
            if (requestParameters.path !== undefined) {
                queryParameters['path'] = requestParameters.path;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/api/v1/namespaces/{namespace}/pods/{name}/proxy`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.TextApiResponse(response);
        });
    }
    /**
     * connect DELETE requests to proxy of Pod
     */
    connectDeleteNamespacedPodProxy(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.connectDeleteNamespacedPodProxyRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * connect DELETE requests to proxy of Pod
     */
    connectDeleteNamespacedPodProxyWithPathRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.name === null || requestParameters.name === undefined) {
                throw new runtime.RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling connectDeleteNamespacedPodProxyWithPath.');
            }
            if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                throw new runtime.RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling connectDeleteNamespacedPodProxyWithPath.');
            }
            if (requestParameters.path === null || requestParameters.path === undefined) {
                throw new runtime.RequiredError('path', 'Required parameter requestParameters.path was null or undefined when calling connectDeleteNamespacedPodProxyWithPath.');
            }
            const queryParameters = {};
            if (requestParameters.path2 !== undefined) {
                queryParameters['path'] = requestParameters.path2;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/api/v1/namespaces/{namespace}/pods/{name}/proxy/{path}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))).replace(`{${"path"}}`, encodeURIComponent(String(requestParameters.path))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.TextApiResponse(response);
        });
    }
    /**
     * connect DELETE requests to proxy of Pod
     */
    connectDeleteNamespacedPodProxyWithPath(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.connectDeleteNamespacedPodProxyWithPathRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * connect DELETE requests to proxy of Service
     */
    connectDeleteNamespacedServiceProxyRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.name === null || requestParameters.name === undefined) {
                throw new runtime.RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling connectDeleteNamespacedServiceProxy.');
            }
            if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                throw new runtime.RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling connectDeleteNamespacedServiceProxy.');
            }
            const queryParameters = {};
            if (requestParameters.path !== undefined) {
                queryParameters['path'] = requestParameters.path;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/api/v1/namespaces/{namespace}/services/{name}/proxy`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.TextApiResponse(response);
        });
    }
    /**
     * connect DELETE requests to proxy of Service
     */
    connectDeleteNamespacedServiceProxy(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.connectDeleteNamespacedServiceProxyRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * connect DELETE requests to proxy of Service
     */
    connectDeleteNamespacedServiceProxyWithPathRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.name === null || requestParameters.name === undefined) {
                throw new runtime.RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling connectDeleteNamespacedServiceProxyWithPath.');
            }
            if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                throw new runtime.RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling connectDeleteNamespacedServiceProxyWithPath.');
            }
            if (requestParameters.path === null || requestParameters.path === undefined) {
                throw new runtime.RequiredError('path', 'Required parameter requestParameters.path was null or undefined when calling connectDeleteNamespacedServiceProxyWithPath.');
            }
            const queryParameters = {};
            if (requestParameters.path2 !== undefined) {
                queryParameters['path'] = requestParameters.path2;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/api/v1/namespaces/{namespace}/services/{name}/proxy/{path}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))).replace(`{${"path"}}`, encodeURIComponent(String(requestParameters.path))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.TextApiResponse(response);
        });
    }
    /**
     * connect DELETE requests to proxy of Service
     */
    connectDeleteNamespacedServiceProxyWithPath(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.connectDeleteNamespacedServiceProxyWithPathRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * connect DELETE requests to proxy of Node
     */
    connectDeleteNodeProxyRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.name === null || requestParameters.name === undefined) {
                throw new runtime.RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling connectDeleteNodeProxy.');
            }
            const queryParameters = {};
            if (requestParameters.path !== undefined) {
                queryParameters['path'] = requestParameters.path;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/api/v1/nodes/{name}/proxy`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.TextApiResponse(response);
        });
    }
    /**
     * connect DELETE requests to proxy of Node
     */
    connectDeleteNodeProxy(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.connectDeleteNodeProxyRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * connect DELETE requests to proxy of Node
     */
    connectDeleteNodeProxyWithPathRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.name === null || requestParameters.name === undefined) {
                throw new runtime.RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling connectDeleteNodeProxyWithPath.');
            }
            if (requestParameters.path === null || requestParameters.path === undefined) {
                throw new runtime.RequiredError('path', 'Required parameter requestParameters.path was null or undefined when calling connectDeleteNodeProxyWithPath.');
            }
            const queryParameters = {};
            if (requestParameters.path2 !== undefined) {
                queryParameters['path'] = requestParameters.path2;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/api/v1/nodes/{name}/proxy/{path}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"path"}}`, encodeURIComponent(String(requestParameters.path))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.TextApiResponse(response);
        });
    }
    /**
     * connect DELETE requests to proxy of Node
     */
    connectDeleteNodeProxyWithPath(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.connectDeleteNodeProxyWithPathRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * connect GET requests to attach of Pod
     */
    connectGetNamespacedPodAttachRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.name === null || requestParameters.name === undefined) {
                throw new runtime.RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling connectGetNamespacedPodAttach.');
            }
            if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                throw new runtime.RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling connectGetNamespacedPodAttach.');
            }
            const queryParameters = {};
            if (requestParameters.container !== undefined) {
                queryParameters['container'] = requestParameters.container;
            }
            if (requestParameters.stderr !== undefined) {
                queryParameters['stderr'] = requestParameters.stderr;
            }
            if (requestParameters.stdin !== undefined) {
                queryParameters['stdin'] = requestParameters.stdin;
            }
            if (requestParameters.stdout !== undefined) {
                queryParameters['stdout'] = requestParameters.stdout;
            }
            if (requestParameters.tty !== undefined) {
                queryParameters['tty'] = requestParameters.tty;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/api/v1/namespaces/{namespace}/pods/{name}/attach`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.TextApiResponse(response);
        });
    }
    /**
     * connect GET requests to attach of Pod
     */
    connectGetNamespacedPodAttach(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.connectGetNamespacedPodAttachRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * connect GET requests to exec of Pod
     */
    connectGetNamespacedPodExecRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.name === null || requestParameters.name === undefined) {
                throw new runtime.RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling connectGetNamespacedPodExec.');
            }
            if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                throw new runtime.RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling connectGetNamespacedPodExec.');
            }
            const queryParameters = {};
            if (requestParameters.command !== undefined) {
                queryParameters['command'] = requestParameters.command;
            }
            if (requestParameters.container !== undefined) {
                queryParameters['container'] = requestParameters.container;
            }
            if (requestParameters.stderr !== undefined) {
                queryParameters['stderr'] = requestParameters.stderr;
            }
            if (requestParameters.stdin !== undefined) {
                queryParameters['stdin'] = requestParameters.stdin;
            }
            if (requestParameters.stdout !== undefined) {
                queryParameters['stdout'] = requestParameters.stdout;
            }
            if (requestParameters.tty !== undefined) {
                queryParameters['tty'] = requestParameters.tty;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/api/v1/namespaces/{namespace}/pods/{name}/exec`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.TextApiResponse(response);
        });
    }
    /**
     * connect GET requests to exec of Pod
     */
    connectGetNamespacedPodExec(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.connectGetNamespacedPodExecRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * connect GET requests to portforward of Pod
     */
    connectGetNamespacedPodPortforwardRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.name === null || requestParameters.name === undefined) {
                throw new runtime.RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling connectGetNamespacedPodPortforward.');
            }
            if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                throw new runtime.RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling connectGetNamespacedPodPortforward.');
            }
            const queryParameters = {};
            if (requestParameters.ports !== undefined) {
                queryParameters['ports'] = requestParameters.ports;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/api/v1/namespaces/{namespace}/pods/{name}/portforward`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.TextApiResponse(response);
        });
    }
    /**
     * connect GET requests to portforward of Pod
     */
    connectGetNamespacedPodPortforward(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.connectGetNamespacedPodPortforwardRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * connect GET requests to proxy of Pod
     */
    connectGetNamespacedPodProxyRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.name === null || requestParameters.name === undefined) {
                throw new runtime.RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling connectGetNamespacedPodProxy.');
            }
            if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                throw new runtime.RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling connectGetNamespacedPodProxy.');
            }
            const queryParameters = {};
            if (requestParameters.path !== undefined) {
                queryParameters['path'] = requestParameters.path;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/api/v1/namespaces/{namespace}/pods/{name}/proxy`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.TextApiResponse(response);
        });
    }
    /**
     * connect GET requests to proxy of Pod
     */
    connectGetNamespacedPodProxy(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.connectGetNamespacedPodProxyRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * connect GET requests to proxy of Pod
     */
    connectGetNamespacedPodProxyWithPathRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.name === null || requestParameters.name === undefined) {
                throw new runtime.RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling connectGetNamespacedPodProxyWithPath.');
            }
            if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                throw new runtime.RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling connectGetNamespacedPodProxyWithPath.');
            }
            if (requestParameters.path === null || requestParameters.path === undefined) {
                throw new runtime.RequiredError('path', 'Required parameter requestParameters.path was null or undefined when calling connectGetNamespacedPodProxyWithPath.');
            }
            const queryParameters = {};
            if (requestParameters.path2 !== undefined) {
                queryParameters['path'] = requestParameters.path2;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/api/v1/namespaces/{namespace}/pods/{name}/proxy/{path}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))).replace(`{${"path"}}`, encodeURIComponent(String(requestParameters.path))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.TextApiResponse(response);
        });
    }
    /**
     * connect GET requests to proxy of Pod
     */
    connectGetNamespacedPodProxyWithPath(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.connectGetNamespacedPodProxyWithPathRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * connect GET requests to proxy of Service
     */
    connectGetNamespacedServiceProxyRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.name === null || requestParameters.name === undefined) {
                throw new runtime.RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling connectGetNamespacedServiceProxy.');
            }
            if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                throw new runtime.RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling connectGetNamespacedServiceProxy.');
            }
            const queryParameters = {};
            if (requestParameters.path !== undefined) {
                queryParameters['path'] = requestParameters.path;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/api/v1/namespaces/{namespace}/services/{name}/proxy`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.TextApiResponse(response);
        });
    }
    /**
     * connect GET requests to proxy of Service
     */
    connectGetNamespacedServiceProxy(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.connectGetNamespacedServiceProxyRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * connect GET requests to proxy of Service
     */
    connectGetNamespacedServiceProxyWithPathRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.name === null || requestParameters.name === undefined) {
                throw new runtime.RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling connectGetNamespacedServiceProxyWithPath.');
            }
            if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                throw new runtime.RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling connectGetNamespacedServiceProxyWithPath.');
            }
            if (requestParameters.path === null || requestParameters.path === undefined) {
                throw new runtime.RequiredError('path', 'Required parameter requestParameters.path was null or undefined when calling connectGetNamespacedServiceProxyWithPath.');
            }
            const queryParameters = {};
            if (requestParameters.path2 !== undefined) {
                queryParameters['path'] = requestParameters.path2;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/api/v1/namespaces/{namespace}/services/{name}/proxy/{path}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))).replace(`{${"path"}}`, encodeURIComponent(String(requestParameters.path))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.TextApiResponse(response);
        });
    }
    /**
     * connect GET requests to proxy of Service
     */
    connectGetNamespacedServiceProxyWithPath(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.connectGetNamespacedServiceProxyWithPathRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * connect GET requests to proxy of Node
     */
    connectGetNodeProxyRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.name === null || requestParameters.name === undefined) {
                throw new runtime.RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling connectGetNodeProxy.');
            }
            const queryParameters = {};
            if (requestParameters.path !== undefined) {
                queryParameters['path'] = requestParameters.path;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/api/v1/nodes/{name}/proxy`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.TextApiResponse(response);
        });
    }
    /**
     * connect GET requests to proxy of Node
     */
    connectGetNodeProxy(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.connectGetNodeProxyRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * connect GET requests to proxy of Node
     */
    connectGetNodeProxyWithPathRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.name === null || requestParameters.name === undefined) {
                throw new runtime.RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling connectGetNodeProxyWithPath.');
            }
            if (requestParameters.path === null || requestParameters.path === undefined) {
                throw new runtime.RequiredError('path', 'Required parameter requestParameters.path was null or undefined when calling connectGetNodeProxyWithPath.');
            }
            const queryParameters = {};
            if (requestParameters.path2 !== undefined) {
                queryParameters['path'] = requestParameters.path2;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/api/v1/nodes/{name}/proxy/{path}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"path"}}`, encodeURIComponent(String(requestParameters.path))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.TextApiResponse(response);
        });
    }
    /**
     * connect GET requests to proxy of Node
     */
    connectGetNodeProxyWithPath(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.connectGetNodeProxyWithPathRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * connect HEAD requests to proxy of Pod
     */
    connectHeadNamespacedPodProxyRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.name === null || requestParameters.name === undefined) {
                throw new runtime.RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling connectHeadNamespacedPodProxy.');
            }
            if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                throw new runtime.RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling connectHeadNamespacedPodProxy.');
            }
            const queryParameters = {};
            if (requestParameters.path !== undefined) {
                queryParameters['path'] = requestParameters.path;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/api/v1/namespaces/{namespace}/pods/{name}/proxy`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
                method: 'HEAD',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.TextApiResponse(response);
        });
    }
    /**
     * connect HEAD requests to proxy of Pod
     */
    connectHeadNamespacedPodProxy(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.connectHeadNamespacedPodProxyRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * connect HEAD requests to proxy of Pod
     */
    connectHeadNamespacedPodProxyWithPathRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.name === null || requestParameters.name === undefined) {
                throw new runtime.RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling connectHeadNamespacedPodProxyWithPath.');
            }
            if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                throw new runtime.RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling connectHeadNamespacedPodProxyWithPath.');
            }
            if (requestParameters.path === null || requestParameters.path === undefined) {
                throw new runtime.RequiredError('path', 'Required parameter requestParameters.path was null or undefined when calling connectHeadNamespacedPodProxyWithPath.');
            }
            const queryParameters = {};
            if (requestParameters.path2 !== undefined) {
                queryParameters['path'] = requestParameters.path2;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/api/v1/namespaces/{namespace}/pods/{name}/proxy/{path}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))).replace(`{${"path"}}`, encodeURIComponent(String(requestParameters.path))),
                method: 'HEAD',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.TextApiResponse(response);
        });
    }
    /**
     * connect HEAD requests to proxy of Pod
     */
    connectHeadNamespacedPodProxyWithPath(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.connectHeadNamespacedPodProxyWithPathRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * connect HEAD requests to proxy of Service
     */
    connectHeadNamespacedServiceProxyRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.name === null || requestParameters.name === undefined) {
                throw new runtime.RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling connectHeadNamespacedServiceProxy.');
            }
            if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                throw new runtime.RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling connectHeadNamespacedServiceProxy.');
            }
            const queryParameters = {};
            if (requestParameters.path !== undefined) {
                queryParameters['path'] = requestParameters.path;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/api/v1/namespaces/{namespace}/services/{name}/proxy`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
                method: 'HEAD',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.TextApiResponse(response);
        });
    }
    /**
     * connect HEAD requests to proxy of Service
     */
    connectHeadNamespacedServiceProxy(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.connectHeadNamespacedServiceProxyRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * connect HEAD requests to proxy of Service
     */
    connectHeadNamespacedServiceProxyWithPathRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.name === null || requestParameters.name === undefined) {
                throw new runtime.RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling connectHeadNamespacedServiceProxyWithPath.');
            }
            if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                throw new runtime.RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling connectHeadNamespacedServiceProxyWithPath.');
            }
            if (requestParameters.path === null || requestParameters.path === undefined) {
                throw new runtime.RequiredError('path', 'Required parameter requestParameters.path was null or undefined when calling connectHeadNamespacedServiceProxyWithPath.');
            }
            const queryParameters = {};
            if (requestParameters.path2 !== undefined) {
                queryParameters['path'] = requestParameters.path2;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/api/v1/namespaces/{namespace}/services/{name}/proxy/{path}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))).replace(`{${"path"}}`, encodeURIComponent(String(requestParameters.path))),
                method: 'HEAD',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.TextApiResponse(response);
        });
    }
    /**
     * connect HEAD requests to proxy of Service
     */
    connectHeadNamespacedServiceProxyWithPath(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.connectHeadNamespacedServiceProxyWithPathRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * connect HEAD requests to proxy of Node
     */
    connectHeadNodeProxyRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.name === null || requestParameters.name === undefined) {
                throw new runtime.RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling connectHeadNodeProxy.');
            }
            const queryParameters = {};
            if (requestParameters.path !== undefined) {
                queryParameters['path'] = requestParameters.path;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/api/v1/nodes/{name}/proxy`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
                method: 'HEAD',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.TextApiResponse(response);
        });
    }
    /**
     * connect HEAD requests to proxy of Node
     */
    connectHeadNodeProxy(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.connectHeadNodeProxyRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * connect HEAD requests to proxy of Node
     */
    connectHeadNodeProxyWithPathRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.name === null || requestParameters.name === undefined) {
                throw new runtime.RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling connectHeadNodeProxyWithPath.');
            }
            if (requestParameters.path === null || requestParameters.path === undefined) {
                throw new runtime.RequiredError('path', 'Required parameter requestParameters.path was null or undefined when calling connectHeadNodeProxyWithPath.');
            }
            const queryParameters = {};
            if (requestParameters.path2 !== undefined) {
                queryParameters['path'] = requestParameters.path2;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/api/v1/nodes/{name}/proxy/{path}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"path"}}`, encodeURIComponent(String(requestParameters.path))),
                method: 'HEAD',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.TextApiResponse(response);
        });
    }
    /**
     * connect HEAD requests to proxy of Node
     */
    connectHeadNodeProxyWithPath(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.connectHeadNodeProxyWithPathRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * connect OPTIONS requests to proxy of Pod
     */
    connectOptionsNamespacedPodProxyRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.name === null || requestParameters.name === undefined) {
                throw new runtime.RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling connectOptionsNamespacedPodProxy.');
            }
            if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                throw new runtime.RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling connectOptionsNamespacedPodProxy.');
            }
            const queryParameters = {};
            if (requestParameters.path !== undefined) {
                queryParameters['path'] = requestParameters.path;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/api/v1/namespaces/{namespace}/pods/{name}/proxy`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
                method: 'OPTIONS',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.TextApiResponse(response);
        });
    }
    /**
     * connect OPTIONS requests to proxy of Pod
     */
    connectOptionsNamespacedPodProxy(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.connectOptionsNamespacedPodProxyRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * connect OPTIONS requests to proxy of Pod
     */
    connectOptionsNamespacedPodProxyWithPathRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.name === null || requestParameters.name === undefined) {
                throw new runtime.RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling connectOptionsNamespacedPodProxyWithPath.');
            }
            if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                throw new runtime.RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling connectOptionsNamespacedPodProxyWithPath.');
            }
            if (requestParameters.path === null || requestParameters.path === undefined) {
                throw new runtime.RequiredError('path', 'Required parameter requestParameters.path was null or undefined when calling connectOptionsNamespacedPodProxyWithPath.');
            }
            const queryParameters = {};
            if (requestParameters.path2 !== undefined) {
                queryParameters['path'] = requestParameters.path2;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/api/v1/namespaces/{namespace}/pods/{name}/proxy/{path}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))).replace(`{${"path"}}`, encodeURIComponent(String(requestParameters.path))),
                method: 'OPTIONS',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.TextApiResponse(response);
        });
    }
    /**
     * connect OPTIONS requests to proxy of Pod
     */
    connectOptionsNamespacedPodProxyWithPath(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.connectOptionsNamespacedPodProxyWithPathRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * connect OPTIONS requests to proxy of Service
     */
    connectOptionsNamespacedServiceProxyRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.name === null || requestParameters.name === undefined) {
                throw new runtime.RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling connectOptionsNamespacedServiceProxy.');
            }
            if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                throw new runtime.RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling connectOptionsNamespacedServiceProxy.');
            }
            const queryParameters = {};
            if (requestParameters.path !== undefined) {
                queryParameters['path'] = requestParameters.path;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/api/v1/namespaces/{namespace}/services/{name}/proxy`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
                method: 'OPTIONS',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.TextApiResponse(response);
        });
    }
    /**
     * connect OPTIONS requests to proxy of Service
     */
    connectOptionsNamespacedServiceProxy(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.connectOptionsNamespacedServiceProxyRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * connect OPTIONS requests to proxy of Service
     */
    connectOptionsNamespacedServiceProxyWithPathRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.name === null || requestParameters.name === undefined) {
                throw new runtime.RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling connectOptionsNamespacedServiceProxyWithPath.');
            }
            if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                throw new runtime.RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling connectOptionsNamespacedServiceProxyWithPath.');
            }
            if (requestParameters.path === null || requestParameters.path === undefined) {
                throw new runtime.RequiredError('path', 'Required parameter requestParameters.path was null or undefined when calling connectOptionsNamespacedServiceProxyWithPath.');
            }
            const queryParameters = {};
            if (requestParameters.path2 !== undefined) {
                queryParameters['path'] = requestParameters.path2;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/api/v1/namespaces/{namespace}/services/{name}/proxy/{path}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))).replace(`{${"path"}}`, encodeURIComponent(String(requestParameters.path))),
                method: 'OPTIONS',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.TextApiResponse(response);
        });
    }
    /**
     * connect OPTIONS requests to proxy of Service
     */
    connectOptionsNamespacedServiceProxyWithPath(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.connectOptionsNamespacedServiceProxyWithPathRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * connect OPTIONS requests to proxy of Node
     */
    connectOptionsNodeProxyRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.name === null || requestParameters.name === undefined) {
                throw new runtime.RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling connectOptionsNodeProxy.');
            }
            const queryParameters = {};
            if (requestParameters.path !== undefined) {
                queryParameters['path'] = requestParameters.path;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/api/v1/nodes/{name}/proxy`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
                method: 'OPTIONS',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.TextApiResponse(response);
        });
    }
    /**
     * connect OPTIONS requests to proxy of Node
     */
    connectOptionsNodeProxy(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.connectOptionsNodeProxyRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * connect OPTIONS requests to proxy of Node
     */
    connectOptionsNodeProxyWithPathRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.name === null || requestParameters.name === undefined) {
                throw new runtime.RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling connectOptionsNodeProxyWithPath.');
            }
            if (requestParameters.path === null || requestParameters.path === undefined) {
                throw new runtime.RequiredError('path', 'Required parameter requestParameters.path was null or undefined when calling connectOptionsNodeProxyWithPath.');
            }
            const queryParameters = {};
            if (requestParameters.path2 !== undefined) {
                queryParameters['path'] = requestParameters.path2;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/api/v1/nodes/{name}/proxy/{path}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"path"}}`, encodeURIComponent(String(requestParameters.path))),
                method: 'OPTIONS',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.TextApiResponse(response);
        });
    }
    /**
     * connect OPTIONS requests to proxy of Node
     */
    connectOptionsNodeProxyWithPath(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.connectOptionsNodeProxyWithPathRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * connect PATCH requests to proxy of Pod
     */
    connectPatchNamespacedPodProxyRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.name === null || requestParameters.name === undefined) {
                throw new runtime.RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling connectPatchNamespacedPodProxy.');
            }
            if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                throw new runtime.RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling connectPatchNamespacedPodProxy.');
            }
            const queryParameters = {};
            if (requestParameters.path !== undefined) {
                queryParameters['path'] = requestParameters.path;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/api/v1/namespaces/{namespace}/pods/{name}/proxy`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
                method: 'PATCH',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.TextApiResponse(response);
        });
    }
    /**
     * connect PATCH requests to proxy of Pod
     */
    connectPatchNamespacedPodProxy(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.connectPatchNamespacedPodProxyRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * connect PATCH requests to proxy of Pod
     */
    connectPatchNamespacedPodProxyWithPathRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.name === null || requestParameters.name === undefined) {
                throw new runtime.RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling connectPatchNamespacedPodProxyWithPath.');
            }
            if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                throw new runtime.RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling connectPatchNamespacedPodProxyWithPath.');
            }
            if (requestParameters.path === null || requestParameters.path === undefined) {
                throw new runtime.RequiredError('path', 'Required parameter requestParameters.path was null or undefined when calling connectPatchNamespacedPodProxyWithPath.');
            }
            const queryParameters = {};
            if (requestParameters.path2 !== undefined) {
                queryParameters['path'] = requestParameters.path2;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/api/v1/namespaces/{namespace}/pods/{name}/proxy/{path}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))).replace(`{${"path"}}`, encodeURIComponent(String(requestParameters.path))),
                method: 'PATCH',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.TextApiResponse(response);
        });
    }
    /**
     * connect PATCH requests to proxy of Pod
     */
    connectPatchNamespacedPodProxyWithPath(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.connectPatchNamespacedPodProxyWithPathRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * connect PATCH requests to proxy of Service
     */
    connectPatchNamespacedServiceProxyRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.name === null || requestParameters.name === undefined) {
                throw new runtime.RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling connectPatchNamespacedServiceProxy.');
            }
            if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                throw new runtime.RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling connectPatchNamespacedServiceProxy.');
            }
            const queryParameters = {};
            if (requestParameters.path !== undefined) {
                queryParameters['path'] = requestParameters.path;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/api/v1/namespaces/{namespace}/services/{name}/proxy`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
                method: 'PATCH',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.TextApiResponse(response);
        });
    }
    /**
     * connect PATCH requests to proxy of Service
     */
    connectPatchNamespacedServiceProxy(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.connectPatchNamespacedServiceProxyRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * connect PATCH requests to proxy of Service
     */
    connectPatchNamespacedServiceProxyWithPathRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.name === null || requestParameters.name === undefined) {
                throw new runtime.RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling connectPatchNamespacedServiceProxyWithPath.');
            }
            if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                throw new runtime.RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling connectPatchNamespacedServiceProxyWithPath.');
            }
            if (requestParameters.path === null || requestParameters.path === undefined) {
                throw new runtime.RequiredError('path', 'Required parameter requestParameters.path was null or undefined when calling connectPatchNamespacedServiceProxyWithPath.');
            }
            const queryParameters = {};
            if (requestParameters.path2 !== undefined) {
                queryParameters['path'] = requestParameters.path2;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/api/v1/namespaces/{namespace}/services/{name}/proxy/{path}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))).replace(`{${"path"}}`, encodeURIComponent(String(requestParameters.path))),
                method: 'PATCH',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.TextApiResponse(response);
        });
    }
    /**
     * connect PATCH requests to proxy of Service
     */
    connectPatchNamespacedServiceProxyWithPath(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.connectPatchNamespacedServiceProxyWithPathRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * connect PATCH requests to proxy of Node
     */
    connectPatchNodeProxyRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.name === null || requestParameters.name === undefined) {
                throw new runtime.RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling connectPatchNodeProxy.');
            }
            const queryParameters = {};
            if (requestParameters.path !== undefined) {
                queryParameters['path'] = requestParameters.path;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/api/v1/nodes/{name}/proxy`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
                method: 'PATCH',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.TextApiResponse(response);
        });
    }
    /**
     * connect PATCH requests to proxy of Node
     */
    connectPatchNodeProxy(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.connectPatchNodeProxyRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * connect PATCH requests to proxy of Node
     */
    connectPatchNodeProxyWithPathRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.name === null || requestParameters.name === undefined) {
                throw new runtime.RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling connectPatchNodeProxyWithPath.');
            }
            if (requestParameters.path === null || requestParameters.path === undefined) {
                throw new runtime.RequiredError('path', 'Required parameter requestParameters.path was null or undefined when calling connectPatchNodeProxyWithPath.');
            }
            const queryParameters = {};
            if (requestParameters.path2 !== undefined) {
                queryParameters['path'] = requestParameters.path2;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/api/v1/nodes/{name}/proxy/{path}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"path"}}`, encodeURIComponent(String(requestParameters.path))),
                method: 'PATCH',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.TextApiResponse(response);
        });
    }
    /**
     * connect PATCH requests to proxy of Node
     */
    connectPatchNodeProxyWithPath(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.connectPatchNodeProxyWithPathRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * connect POST requests to attach of Pod
     */
    connectPostNamespacedPodAttachRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.name === null || requestParameters.name === undefined) {
                throw new runtime.RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling connectPostNamespacedPodAttach.');
            }
            if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                throw new runtime.RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling connectPostNamespacedPodAttach.');
            }
            const queryParameters = {};
            if (requestParameters.container !== undefined) {
                queryParameters['container'] = requestParameters.container;
            }
            if (requestParameters.stderr !== undefined) {
                queryParameters['stderr'] = requestParameters.stderr;
            }
            if (requestParameters.stdin !== undefined) {
                queryParameters['stdin'] = requestParameters.stdin;
            }
            if (requestParameters.stdout !== undefined) {
                queryParameters['stdout'] = requestParameters.stdout;
            }
            if (requestParameters.tty !== undefined) {
                queryParameters['tty'] = requestParameters.tty;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/api/v1/namespaces/{namespace}/pods/{name}/attach`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.TextApiResponse(response);
        });
    }
    /**
     * connect POST requests to attach of Pod
     */
    connectPostNamespacedPodAttach(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.connectPostNamespacedPodAttachRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * connect POST requests to exec of Pod
     */
    connectPostNamespacedPodExecRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.name === null || requestParameters.name === undefined) {
                throw new runtime.RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling connectPostNamespacedPodExec.');
            }
            if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                throw new runtime.RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling connectPostNamespacedPodExec.');
            }
            const queryParameters = {};
            if (requestParameters.command !== undefined) {
                queryParameters['command'] = requestParameters.command;
            }
            if (requestParameters.container !== undefined) {
                queryParameters['container'] = requestParameters.container;
            }
            if (requestParameters.stderr !== undefined) {
                queryParameters['stderr'] = requestParameters.stderr;
            }
            if (requestParameters.stdin !== undefined) {
                queryParameters['stdin'] = requestParameters.stdin;
            }
            if (requestParameters.stdout !== undefined) {
                queryParameters['stdout'] = requestParameters.stdout;
            }
            if (requestParameters.tty !== undefined) {
                queryParameters['tty'] = requestParameters.tty;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/api/v1/namespaces/{namespace}/pods/{name}/exec`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.TextApiResponse(response);
        });
    }
    /**
     * connect POST requests to exec of Pod
     */
    connectPostNamespacedPodExec(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.connectPostNamespacedPodExecRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * connect POST requests to portforward of Pod
     */
    connectPostNamespacedPodPortforwardRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.name === null || requestParameters.name === undefined) {
                throw new runtime.RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling connectPostNamespacedPodPortforward.');
            }
            if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                throw new runtime.RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling connectPostNamespacedPodPortforward.');
            }
            const queryParameters = {};
            if (requestParameters.ports !== undefined) {
                queryParameters['ports'] = requestParameters.ports;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/api/v1/namespaces/{namespace}/pods/{name}/portforward`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.TextApiResponse(response);
        });
    }
    /**
     * connect POST requests to portforward of Pod
     */
    connectPostNamespacedPodPortforward(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.connectPostNamespacedPodPortforwardRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * connect POST requests to proxy of Pod
     */
    connectPostNamespacedPodProxyRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.name === null || requestParameters.name === undefined) {
                throw new runtime.RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling connectPostNamespacedPodProxy.');
            }
            if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                throw new runtime.RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling connectPostNamespacedPodProxy.');
            }
            const queryParameters = {};
            if (requestParameters.path !== undefined) {
                queryParameters['path'] = requestParameters.path;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/api/v1/namespaces/{namespace}/pods/{name}/proxy`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.TextApiResponse(response);
        });
    }
    /**
     * connect POST requests to proxy of Pod
     */
    connectPostNamespacedPodProxy(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.connectPostNamespacedPodProxyRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * connect POST requests to proxy of Pod
     */
    connectPostNamespacedPodProxyWithPathRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.name === null || requestParameters.name === undefined) {
                throw new runtime.RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling connectPostNamespacedPodProxyWithPath.');
            }
            if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                throw new runtime.RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling connectPostNamespacedPodProxyWithPath.');
            }
            if (requestParameters.path === null || requestParameters.path === undefined) {
                throw new runtime.RequiredError('path', 'Required parameter requestParameters.path was null or undefined when calling connectPostNamespacedPodProxyWithPath.');
            }
            const queryParameters = {};
            if (requestParameters.path2 !== undefined) {
                queryParameters['path'] = requestParameters.path2;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/api/v1/namespaces/{namespace}/pods/{name}/proxy/{path}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))).replace(`{${"path"}}`, encodeURIComponent(String(requestParameters.path))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.TextApiResponse(response);
        });
    }
    /**
     * connect POST requests to proxy of Pod
     */
    connectPostNamespacedPodProxyWithPath(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.connectPostNamespacedPodProxyWithPathRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * connect POST requests to proxy of Service
     */
    connectPostNamespacedServiceProxyRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.name === null || requestParameters.name === undefined) {
                throw new runtime.RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling connectPostNamespacedServiceProxy.');
            }
            if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                throw new runtime.RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling connectPostNamespacedServiceProxy.');
            }
            const queryParameters = {};
            if (requestParameters.path !== undefined) {
                queryParameters['path'] = requestParameters.path;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/api/v1/namespaces/{namespace}/services/{name}/proxy`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.TextApiResponse(response);
        });
    }
    /**
     * connect POST requests to proxy of Service
     */
    connectPostNamespacedServiceProxy(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.connectPostNamespacedServiceProxyRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * connect POST requests to proxy of Service
     */
    connectPostNamespacedServiceProxyWithPathRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.name === null || requestParameters.name === undefined) {
                throw new runtime.RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling connectPostNamespacedServiceProxyWithPath.');
            }
            if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                throw new runtime.RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling connectPostNamespacedServiceProxyWithPath.');
            }
            if (requestParameters.path === null || requestParameters.path === undefined) {
                throw new runtime.RequiredError('path', 'Required parameter requestParameters.path was null or undefined when calling connectPostNamespacedServiceProxyWithPath.');
            }
            const queryParameters = {};
            if (requestParameters.path2 !== undefined) {
                queryParameters['path'] = requestParameters.path2;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/api/v1/namespaces/{namespace}/services/{name}/proxy/{path}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))).replace(`{${"path"}}`, encodeURIComponent(String(requestParameters.path))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.TextApiResponse(response);
        });
    }
    /**
     * connect POST requests to proxy of Service
     */
    connectPostNamespacedServiceProxyWithPath(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.connectPostNamespacedServiceProxyWithPathRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * connect POST requests to proxy of Node
     */
    connectPostNodeProxyRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.name === null || requestParameters.name === undefined) {
                throw new runtime.RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling connectPostNodeProxy.');
            }
            const queryParameters = {};
            if (requestParameters.path !== undefined) {
                queryParameters['path'] = requestParameters.path;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/api/v1/nodes/{name}/proxy`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.TextApiResponse(response);
        });
    }
    /**
     * connect POST requests to proxy of Node
     */
    connectPostNodeProxy(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.connectPostNodeProxyRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * connect POST requests to proxy of Node
     */
    connectPostNodeProxyWithPathRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.name === null || requestParameters.name === undefined) {
                throw new runtime.RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling connectPostNodeProxyWithPath.');
            }
            if (requestParameters.path === null || requestParameters.path === undefined) {
                throw new runtime.RequiredError('path', 'Required parameter requestParameters.path was null or undefined when calling connectPostNodeProxyWithPath.');
            }
            const queryParameters = {};
            if (requestParameters.path2 !== undefined) {
                queryParameters['path'] = requestParameters.path2;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/api/v1/nodes/{name}/proxy/{path}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"path"}}`, encodeURIComponent(String(requestParameters.path))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.TextApiResponse(response);
        });
    }
    /**
     * connect POST requests to proxy of Node
     */
    connectPostNodeProxyWithPath(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.connectPostNodeProxyWithPathRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * connect PUT requests to proxy of Pod
     */
    connectPutNamespacedPodProxyRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.name === null || requestParameters.name === undefined) {
                throw new runtime.RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling connectPutNamespacedPodProxy.');
            }
            if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                throw new runtime.RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling connectPutNamespacedPodProxy.');
            }
            const queryParameters = {};
            if (requestParameters.path !== undefined) {
                queryParameters['path'] = requestParameters.path;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/api/v1/namespaces/{namespace}/pods/{name}/proxy`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.TextApiResponse(response);
        });
    }
    /**
     * connect PUT requests to proxy of Pod
     */
    connectPutNamespacedPodProxy(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.connectPutNamespacedPodProxyRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * connect PUT requests to proxy of Pod
     */
    connectPutNamespacedPodProxyWithPathRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.name === null || requestParameters.name === undefined) {
                throw new runtime.RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling connectPutNamespacedPodProxyWithPath.');
            }
            if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                throw new runtime.RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling connectPutNamespacedPodProxyWithPath.');
            }
            if (requestParameters.path === null || requestParameters.path === undefined) {
                throw new runtime.RequiredError('path', 'Required parameter requestParameters.path was null or undefined when calling connectPutNamespacedPodProxyWithPath.');
            }
            const queryParameters = {};
            if (requestParameters.path2 !== undefined) {
                queryParameters['path'] = requestParameters.path2;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/api/v1/namespaces/{namespace}/pods/{name}/proxy/{path}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))).replace(`{${"path"}}`, encodeURIComponent(String(requestParameters.path))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.TextApiResponse(response);
        });
    }
    /**
     * connect PUT requests to proxy of Pod
     */
    connectPutNamespacedPodProxyWithPath(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.connectPutNamespacedPodProxyWithPathRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * connect PUT requests to proxy of Service
     */
    connectPutNamespacedServiceProxyRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.name === null || requestParameters.name === undefined) {
                throw new runtime.RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling connectPutNamespacedServiceProxy.');
            }
            if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                throw new runtime.RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling connectPutNamespacedServiceProxy.');
            }
            const queryParameters = {};
            if (requestParameters.path !== undefined) {
                queryParameters['path'] = requestParameters.path;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/api/v1/namespaces/{namespace}/services/{name}/proxy`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.TextApiResponse(response);
        });
    }
    /**
     * connect PUT requests to proxy of Service
     */
    connectPutNamespacedServiceProxy(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.connectPutNamespacedServiceProxyRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * connect PUT requests to proxy of Service
     */
    connectPutNamespacedServiceProxyWithPathRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.name === null || requestParameters.name === undefined) {
                throw new runtime.RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling connectPutNamespacedServiceProxyWithPath.');
            }
            if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                throw new runtime.RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling connectPutNamespacedServiceProxyWithPath.');
            }
            if (requestParameters.path === null || requestParameters.path === undefined) {
                throw new runtime.RequiredError('path', 'Required parameter requestParameters.path was null or undefined when calling connectPutNamespacedServiceProxyWithPath.');
            }
            const queryParameters = {};
            if (requestParameters.path2 !== undefined) {
                queryParameters['path'] = requestParameters.path2;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/api/v1/namespaces/{namespace}/services/{name}/proxy/{path}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))).replace(`{${"path"}}`, encodeURIComponent(String(requestParameters.path))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.TextApiResponse(response);
        });
    }
    /**
     * connect PUT requests to proxy of Service
     */
    connectPutNamespacedServiceProxyWithPath(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.connectPutNamespacedServiceProxyWithPathRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * connect PUT requests to proxy of Node
     */
    connectPutNodeProxyRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.name === null || requestParameters.name === undefined) {
                throw new runtime.RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling connectPutNodeProxy.');
            }
            const queryParameters = {};
            if (requestParameters.path !== undefined) {
                queryParameters['path'] = requestParameters.path;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/api/v1/nodes/{name}/proxy`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.TextApiResponse(response);
        });
    }
    /**
     * connect PUT requests to proxy of Node
     */
    connectPutNodeProxy(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.connectPutNodeProxyRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * connect PUT requests to proxy of Node
     */
    connectPutNodeProxyWithPathRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.name === null || requestParameters.name === undefined) {
                throw new runtime.RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling connectPutNodeProxyWithPath.');
            }
            if (requestParameters.path === null || requestParameters.path === undefined) {
                throw new runtime.RequiredError('path', 'Required parameter requestParameters.path was null or undefined when calling connectPutNodeProxyWithPath.');
            }
            const queryParameters = {};
            if (requestParameters.path2 !== undefined) {
                queryParameters['path'] = requestParameters.path2;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/api/v1/nodes/{name}/proxy/{path}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"path"}}`, encodeURIComponent(String(requestParameters.path))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.TextApiResponse(response);
        });
    }
    /**
     * connect PUT requests to proxy of Node
     */
    connectPutNodeProxyWithPath(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.connectPutNodeProxyWithPathRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * create a Namespace
     */
    createNamespaceRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.body === null || requestParameters.body === undefined) {
                throw new runtime.RequiredError('body', 'Required parameter requestParameters.body was null or undefined when calling createNamespace.');
            }
            const queryParameters = {};
            if (requestParameters.pretty !== undefined) {
                queryParameters['pretty'] = requestParameters.pretty;
            }
            if (requestParameters.dryRun !== undefined) {
                queryParameters['dryRun'] = requestParameters.dryRun;
            }
            if (requestParameters.fieldManager !== undefined) {
                queryParameters['fieldManager'] = requestParameters.fieldManager;
            }
            if (requestParameters.fieldValidation !== undefined) {
                queryParameters['fieldValidation'] = requestParameters.fieldValidation;
            }
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/api/v1/namespaces`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: models_1.V1NamespaceToJSON(requestParameters.body),
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.V1NamespaceFromJSON(jsonValue));
        });
    }
    /**
     * create a Namespace
     */
    createNamespace(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.createNamespaceRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * create a Binding
     */
    createNamespacedBindingRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                throw new runtime.RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling createNamespacedBinding.');
            }
            if (requestParameters.body === null || requestParameters.body === undefined) {
                throw new runtime.RequiredError('body', 'Required parameter requestParameters.body was null or undefined when calling createNamespacedBinding.');
            }
            const queryParameters = {};
            if (requestParameters.dryRun !== undefined) {
                queryParameters['dryRun'] = requestParameters.dryRun;
            }
            if (requestParameters.fieldManager !== undefined) {
                queryParameters['fieldManager'] = requestParameters.fieldManager;
            }
            if (requestParameters.fieldValidation !== undefined) {
                queryParameters['fieldValidation'] = requestParameters.fieldValidation;
            }
            if (requestParameters.pretty !== undefined) {
                queryParameters['pretty'] = requestParameters.pretty;
            }
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/api/v1/namespaces/{namespace}/bindings`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: models_1.V1BindingToJSON(requestParameters.body),
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.V1BindingFromJSON(jsonValue));
        });
    }
    /**
     * create a Binding
     */
    createNamespacedBinding(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.createNamespacedBindingRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * create a ConfigMap
     */
    createNamespacedConfigMapRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                throw new runtime.RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling createNamespacedConfigMap.');
            }
            if (requestParameters.body === null || requestParameters.body === undefined) {
                throw new runtime.RequiredError('body', 'Required parameter requestParameters.body was null or undefined when calling createNamespacedConfigMap.');
            }
            const queryParameters = {};
            if (requestParameters.pretty !== undefined) {
                queryParameters['pretty'] = requestParameters.pretty;
            }
            if (requestParameters.dryRun !== undefined) {
                queryParameters['dryRun'] = requestParameters.dryRun;
            }
            if (requestParameters.fieldManager !== undefined) {
                queryParameters['fieldManager'] = requestParameters.fieldManager;
            }
            if (requestParameters.fieldValidation !== undefined) {
                queryParameters['fieldValidation'] = requestParameters.fieldValidation;
            }
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/api/v1/namespaces/{namespace}/configmaps`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: models_1.V1ConfigMapToJSON(requestParameters.body),
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.V1ConfigMapFromJSON(jsonValue));
        });
    }
    /**
     * create a ConfigMap
     */
    createNamespacedConfigMap(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.createNamespacedConfigMapRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * create Endpoints
     */
    createNamespacedEndpointsRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                throw new runtime.RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling createNamespacedEndpoints.');
            }
            if (requestParameters.body === null || requestParameters.body === undefined) {
                throw new runtime.RequiredError('body', 'Required parameter requestParameters.body was null or undefined when calling createNamespacedEndpoints.');
            }
            const queryParameters = {};
            if (requestParameters.pretty !== undefined) {
                queryParameters['pretty'] = requestParameters.pretty;
            }
            if (requestParameters.dryRun !== undefined) {
                queryParameters['dryRun'] = requestParameters.dryRun;
            }
            if (requestParameters.fieldManager !== undefined) {
                queryParameters['fieldManager'] = requestParameters.fieldManager;
            }
            if (requestParameters.fieldValidation !== undefined) {
                queryParameters['fieldValidation'] = requestParameters.fieldValidation;
            }
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/api/v1/namespaces/{namespace}/endpoints`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: models_1.V1EndpointsToJSON(requestParameters.body),
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.V1EndpointsFromJSON(jsonValue));
        });
    }
    /**
     * create Endpoints
     */
    createNamespacedEndpoints(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.createNamespacedEndpointsRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * create an Event
     */
    createNamespacedEventRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                throw new runtime.RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling createNamespacedEvent.');
            }
            if (requestParameters.body === null || requestParameters.body === undefined) {
                throw new runtime.RequiredError('body', 'Required parameter requestParameters.body was null or undefined when calling createNamespacedEvent.');
            }
            const queryParameters = {};
            if (requestParameters.pretty !== undefined) {
                queryParameters['pretty'] = requestParameters.pretty;
            }
            if (requestParameters.dryRun !== undefined) {
                queryParameters['dryRun'] = requestParameters.dryRun;
            }
            if (requestParameters.fieldManager !== undefined) {
                queryParameters['fieldManager'] = requestParameters.fieldManager;
            }
            if (requestParameters.fieldValidation !== undefined) {
                queryParameters['fieldValidation'] = requestParameters.fieldValidation;
            }
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/api/v1/namespaces/{namespace}/events`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: models_1.CoreV1EventToJSON(requestParameters.body),
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.CoreV1EventFromJSON(jsonValue));
        });
    }
    /**
     * create an Event
     */
    createNamespacedEvent(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.createNamespacedEventRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * create a LimitRange
     */
    createNamespacedLimitRangeRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                throw new runtime.RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling createNamespacedLimitRange.');
            }
            if (requestParameters.body === null || requestParameters.body === undefined) {
                throw new runtime.RequiredError('body', 'Required parameter requestParameters.body was null or undefined when calling createNamespacedLimitRange.');
            }
            const queryParameters = {};
            if (requestParameters.pretty !== undefined) {
                queryParameters['pretty'] = requestParameters.pretty;
            }
            if (requestParameters.dryRun !== undefined) {
                queryParameters['dryRun'] = requestParameters.dryRun;
            }
            if (requestParameters.fieldManager !== undefined) {
                queryParameters['fieldManager'] = requestParameters.fieldManager;
            }
            if (requestParameters.fieldValidation !== undefined) {
                queryParameters['fieldValidation'] = requestParameters.fieldValidation;
            }
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/api/v1/namespaces/{namespace}/limitranges`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: models_1.V1LimitRangeToJSON(requestParameters.body),
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.V1LimitRangeFromJSON(jsonValue));
        });
    }
    /**
     * create a LimitRange
     */
    createNamespacedLimitRange(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.createNamespacedLimitRangeRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * create a PersistentVolumeClaim
     */
    createNamespacedPersistentVolumeClaimRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                throw new runtime.RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling createNamespacedPersistentVolumeClaim.');
            }
            if (requestParameters.body === null || requestParameters.body === undefined) {
                throw new runtime.RequiredError('body', 'Required parameter requestParameters.body was null or undefined when calling createNamespacedPersistentVolumeClaim.');
            }
            const queryParameters = {};
            if (requestParameters.pretty !== undefined) {
                queryParameters['pretty'] = requestParameters.pretty;
            }
            if (requestParameters.dryRun !== undefined) {
                queryParameters['dryRun'] = requestParameters.dryRun;
            }
            if (requestParameters.fieldManager !== undefined) {
                queryParameters['fieldManager'] = requestParameters.fieldManager;
            }
            if (requestParameters.fieldValidation !== undefined) {
                queryParameters['fieldValidation'] = requestParameters.fieldValidation;
            }
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/api/v1/namespaces/{namespace}/persistentvolumeclaims`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: models_1.V1PersistentVolumeClaimToJSON(requestParameters.body),
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.V1PersistentVolumeClaimFromJSON(jsonValue));
        });
    }
    /**
     * create a PersistentVolumeClaim
     */
    createNamespacedPersistentVolumeClaim(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.createNamespacedPersistentVolumeClaimRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * create a Pod
     */
    createNamespacedPodRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                throw new runtime.RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling createNamespacedPod.');
            }
            if (requestParameters.body === null || requestParameters.body === undefined) {
                throw new runtime.RequiredError('body', 'Required parameter requestParameters.body was null or undefined when calling createNamespacedPod.');
            }
            const queryParameters = {};
            if (requestParameters.pretty !== undefined) {
                queryParameters['pretty'] = requestParameters.pretty;
            }
            if (requestParameters.dryRun !== undefined) {
                queryParameters['dryRun'] = requestParameters.dryRun;
            }
            if (requestParameters.fieldManager !== undefined) {
                queryParameters['fieldManager'] = requestParameters.fieldManager;
            }
            if (requestParameters.fieldValidation !== undefined) {
                queryParameters['fieldValidation'] = requestParameters.fieldValidation;
            }
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/api/v1/namespaces/{namespace}/pods`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: models_1.V1PodToJSON(requestParameters.body),
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.V1PodFromJSON(jsonValue));
        });
    }
    /**
     * create a Pod
     */
    createNamespacedPod(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.createNamespacedPodRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * create binding of a Pod
     */
    createNamespacedPodBindingRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.name === null || requestParameters.name === undefined) {
                throw new runtime.RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling createNamespacedPodBinding.');
            }
            if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                throw new runtime.RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling createNamespacedPodBinding.');
            }
            if (requestParameters.body === null || requestParameters.body === undefined) {
                throw new runtime.RequiredError('body', 'Required parameter requestParameters.body was null or undefined when calling createNamespacedPodBinding.');
            }
            const queryParameters = {};
            if (requestParameters.dryRun !== undefined) {
                queryParameters['dryRun'] = requestParameters.dryRun;
            }
            if (requestParameters.fieldManager !== undefined) {
                queryParameters['fieldManager'] = requestParameters.fieldManager;
            }
            if (requestParameters.fieldValidation !== undefined) {
                queryParameters['fieldValidation'] = requestParameters.fieldValidation;
            }
            if (requestParameters.pretty !== undefined) {
                queryParameters['pretty'] = requestParameters.pretty;
            }
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/api/v1/namespaces/{namespace}/pods/{name}/binding`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: models_1.V1BindingToJSON(requestParameters.body),
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.V1BindingFromJSON(jsonValue));
        });
    }
    /**
     * create binding of a Pod
     */
    createNamespacedPodBinding(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.createNamespacedPodBindingRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * create eviction of a Pod
     */
    createNamespacedPodEvictionRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.name === null || requestParameters.name === undefined) {
                throw new runtime.RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling createNamespacedPodEviction.');
            }
            if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                throw new runtime.RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling createNamespacedPodEviction.');
            }
            if (requestParameters.body === null || requestParameters.body === undefined) {
                throw new runtime.RequiredError('body', 'Required parameter requestParameters.body was null or undefined when calling createNamespacedPodEviction.');
            }
            const queryParameters = {};
            if (requestParameters.dryRun !== undefined) {
                queryParameters['dryRun'] = requestParameters.dryRun;
            }
            if (requestParameters.fieldManager !== undefined) {
                queryParameters['fieldManager'] = requestParameters.fieldManager;
            }
            if (requestParameters.fieldValidation !== undefined) {
                queryParameters['fieldValidation'] = requestParameters.fieldValidation;
            }
            if (requestParameters.pretty !== undefined) {
                queryParameters['pretty'] = requestParameters.pretty;
            }
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/api/v1/namespaces/{namespace}/pods/{name}/eviction`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: models_1.V1EvictionToJSON(requestParameters.body),
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.V1EvictionFromJSON(jsonValue));
        });
    }
    /**
     * create eviction of a Pod
     */
    createNamespacedPodEviction(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.createNamespacedPodEvictionRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * create a PodTemplate
     */
    createNamespacedPodTemplateRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                throw new runtime.RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling createNamespacedPodTemplate.');
            }
            if (requestParameters.body === null || requestParameters.body === undefined) {
                throw new runtime.RequiredError('body', 'Required parameter requestParameters.body was null or undefined when calling createNamespacedPodTemplate.');
            }
            const queryParameters = {};
            if (requestParameters.pretty !== undefined) {
                queryParameters['pretty'] = requestParameters.pretty;
            }
            if (requestParameters.dryRun !== undefined) {
                queryParameters['dryRun'] = requestParameters.dryRun;
            }
            if (requestParameters.fieldManager !== undefined) {
                queryParameters['fieldManager'] = requestParameters.fieldManager;
            }
            if (requestParameters.fieldValidation !== undefined) {
                queryParameters['fieldValidation'] = requestParameters.fieldValidation;
            }
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/api/v1/namespaces/{namespace}/podtemplates`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: models_1.V1PodTemplateToJSON(requestParameters.body),
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.V1PodTemplateFromJSON(jsonValue));
        });
    }
    /**
     * create a PodTemplate
     */
    createNamespacedPodTemplate(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.createNamespacedPodTemplateRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * create a ReplicationController
     */
    createNamespacedReplicationControllerRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                throw new runtime.RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling createNamespacedReplicationController.');
            }
            if (requestParameters.body === null || requestParameters.body === undefined) {
                throw new runtime.RequiredError('body', 'Required parameter requestParameters.body was null or undefined when calling createNamespacedReplicationController.');
            }
            const queryParameters = {};
            if (requestParameters.pretty !== undefined) {
                queryParameters['pretty'] = requestParameters.pretty;
            }
            if (requestParameters.dryRun !== undefined) {
                queryParameters['dryRun'] = requestParameters.dryRun;
            }
            if (requestParameters.fieldManager !== undefined) {
                queryParameters['fieldManager'] = requestParameters.fieldManager;
            }
            if (requestParameters.fieldValidation !== undefined) {
                queryParameters['fieldValidation'] = requestParameters.fieldValidation;
            }
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/api/v1/namespaces/{namespace}/replicationcontrollers`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: models_1.V1ReplicationControllerToJSON(requestParameters.body),
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.V1ReplicationControllerFromJSON(jsonValue));
        });
    }
    /**
     * create a ReplicationController
     */
    createNamespacedReplicationController(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.createNamespacedReplicationControllerRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * create a ResourceQuota
     */
    createNamespacedResourceQuotaRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                throw new runtime.RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling createNamespacedResourceQuota.');
            }
            if (requestParameters.body === null || requestParameters.body === undefined) {
                throw new runtime.RequiredError('body', 'Required parameter requestParameters.body was null or undefined when calling createNamespacedResourceQuota.');
            }
            const queryParameters = {};
            if (requestParameters.pretty !== undefined) {
                queryParameters['pretty'] = requestParameters.pretty;
            }
            if (requestParameters.dryRun !== undefined) {
                queryParameters['dryRun'] = requestParameters.dryRun;
            }
            if (requestParameters.fieldManager !== undefined) {
                queryParameters['fieldManager'] = requestParameters.fieldManager;
            }
            if (requestParameters.fieldValidation !== undefined) {
                queryParameters['fieldValidation'] = requestParameters.fieldValidation;
            }
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/api/v1/namespaces/{namespace}/resourcequotas`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: models_1.V1ResourceQuotaToJSON(requestParameters.body),
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.V1ResourceQuotaFromJSON(jsonValue));
        });
    }
    /**
     * create a ResourceQuota
     */
    createNamespacedResourceQuota(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.createNamespacedResourceQuotaRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * create a Secret
     */
    createNamespacedSecretRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                throw new runtime.RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling createNamespacedSecret.');
            }
            if (requestParameters.body === null || requestParameters.body === undefined) {
                throw new runtime.RequiredError('body', 'Required parameter requestParameters.body was null or undefined when calling createNamespacedSecret.');
            }
            const queryParameters = {};
            if (requestParameters.pretty !== undefined) {
                queryParameters['pretty'] = requestParameters.pretty;
            }
            if (requestParameters.dryRun !== undefined) {
                queryParameters['dryRun'] = requestParameters.dryRun;
            }
            if (requestParameters.fieldManager !== undefined) {
                queryParameters['fieldManager'] = requestParameters.fieldManager;
            }
            if (requestParameters.fieldValidation !== undefined) {
                queryParameters['fieldValidation'] = requestParameters.fieldValidation;
            }
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/api/v1/namespaces/{namespace}/secrets`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: models_1.V1SecretToJSON(requestParameters.body),
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.V1SecretFromJSON(jsonValue));
        });
    }
    /**
     * create a Secret
     */
    createNamespacedSecret(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.createNamespacedSecretRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * create a Service
     */
    createNamespacedServiceRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                throw new runtime.RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling createNamespacedService.');
            }
            if (requestParameters.body === null || requestParameters.body === undefined) {
                throw new runtime.RequiredError('body', 'Required parameter requestParameters.body was null or undefined when calling createNamespacedService.');
            }
            const queryParameters = {};
            if (requestParameters.pretty !== undefined) {
                queryParameters['pretty'] = requestParameters.pretty;
            }
            if (requestParameters.dryRun !== undefined) {
                queryParameters['dryRun'] = requestParameters.dryRun;
            }
            if (requestParameters.fieldManager !== undefined) {
                queryParameters['fieldManager'] = requestParameters.fieldManager;
            }
            if (requestParameters.fieldValidation !== undefined) {
                queryParameters['fieldValidation'] = requestParameters.fieldValidation;
            }
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/api/v1/namespaces/{namespace}/services`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: models_1.V1ServiceToJSON(requestParameters.body),
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.V1ServiceFromJSON(jsonValue));
        });
    }
    /**
     * create a Service
     */
    createNamespacedService(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.createNamespacedServiceRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * create a ServiceAccount
     */
    createNamespacedServiceAccountRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                throw new runtime.RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling createNamespacedServiceAccount.');
            }
            if (requestParameters.body === null || requestParameters.body === undefined) {
                throw new runtime.RequiredError('body', 'Required parameter requestParameters.body was null or undefined when calling createNamespacedServiceAccount.');
            }
            const queryParameters = {};
            if (requestParameters.pretty !== undefined) {
                queryParameters['pretty'] = requestParameters.pretty;
            }
            if (requestParameters.dryRun !== undefined) {
                queryParameters['dryRun'] = requestParameters.dryRun;
            }
            if (requestParameters.fieldManager !== undefined) {
                queryParameters['fieldManager'] = requestParameters.fieldManager;
            }
            if (requestParameters.fieldValidation !== undefined) {
                queryParameters['fieldValidation'] = requestParameters.fieldValidation;
            }
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/api/v1/namespaces/{namespace}/serviceaccounts`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: models_1.V1ServiceAccountToJSON(requestParameters.body),
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.V1ServiceAccountFromJSON(jsonValue));
        });
    }
    /**
     * create a ServiceAccount
     */
    createNamespacedServiceAccount(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.createNamespacedServiceAccountRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * create token of a ServiceAccount
     */
    createNamespacedServiceAccountTokenRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.name === null || requestParameters.name === undefined) {
                throw new runtime.RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling createNamespacedServiceAccountToken.');
            }
            if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                throw new runtime.RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling createNamespacedServiceAccountToken.');
            }
            if (requestParameters.body === null || requestParameters.body === undefined) {
                throw new runtime.RequiredError('body', 'Required parameter requestParameters.body was null or undefined when calling createNamespacedServiceAccountToken.');
            }
            const queryParameters = {};
            if (requestParameters.dryRun !== undefined) {
                queryParameters['dryRun'] = requestParameters.dryRun;
            }
            if (requestParameters.fieldManager !== undefined) {
                queryParameters['fieldManager'] = requestParameters.fieldManager;
            }
            if (requestParameters.fieldValidation !== undefined) {
                queryParameters['fieldValidation'] = requestParameters.fieldValidation;
            }
            if (requestParameters.pretty !== undefined) {
                queryParameters['pretty'] = requestParameters.pretty;
            }
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/api/v1/namespaces/{namespace}/serviceaccounts/{name}/token`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: models_1.AuthenticationV1TokenRequestToJSON(requestParameters.body),
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.AuthenticationV1TokenRequestFromJSON(jsonValue));
        });
    }
    /**
     * create token of a ServiceAccount
     */
    createNamespacedServiceAccountToken(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.createNamespacedServiceAccountTokenRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * create a Node
     */
    createNodeRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.body === null || requestParameters.body === undefined) {
                throw new runtime.RequiredError('body', 'Required parameter requestParameters.body was null or undefined when calling createNode.');
            }
            const queryParameters = {};
            if (requestParameters.pretty !== undefined) {
                queryParameters['pretty'] = requestParameters.pretty;
            }
            if (requestParameters.dryRun !== undefined) {
                queryParameters['dryRun'] = requestParameters.dryRun;
            }
            if (requestParameters.fieldManager !== undefined) {
                queryParameters['fieldManager'] = requestParameters.fieldManager;
            }
            if (requestParameters.fieldValidation !== undefined) {
                queryParameters['fieldValidation'] = requestParameters.fieldValidation;
            }
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/api/v1/nodes`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: models_1.V1NodeToJSON(requestParameters.body),
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.V1NodeFromJSON(jsonValue));
        });
    }
    /**
     * create a Node
     */
    createNode(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.createNodeRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * create a PersistentVolume
     */
    createPersistentVolumeRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.body === null || requestParameters.body === undefined) {
                throw new runtime.RequiredError('body', 'Required parameter requestParameters.body was null or undefined when calling createPersistentVolume.');
            }
            const queryParameters = {};
            if (requestParameters.pretty !== undefined) {
                queryParameters['pretty'] = requestParameters.pretty;
            }
            if (requestParameters.dryRun !== undefined) {
                queryParameters['dryRun'] = requestParameters.dryRun;
            }
            if (requestParameters.fieldManager !== undefined) {
                queryParameters['fieldManager'] = requestParameters.fieldManager;
            }
            if (requestParameters.fieldValidation !== undefined) {
                queryParameters['fieldValidation'] = requestParameters.fieldValidation;
            }
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/api/v1/persistentvolumes`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: models_1.V1PersistentVolumeToJSON(requestParameters.body),
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.V1PersistentVolumeFromJSON(jsonValue));
        });
    }
    /**
     * create a PersistentVolume
     */
    createPersistentVolume(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.createPersistentVolumeRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * delete collection of ConfigMap
     */
    deleteCollectionNamespacedConfigMapRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                throw new runtime.RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling deleteCollectionNamespacedConfigMap.');
            }
            const queryParameters = {};
            if (requestParameters.pretty !== undefined) {
                queryParameters['pretty'] = requestParameters.pretty;
            }
            if (requestParameters._continue !== undefined) {
                queryParameters['continue'] = requestParameters._continue;
            }
            if (requestParameters.dryRun !== undefined) {
                queryParameters['dryRun'] = requestParameters.dryRun;
            }
            if (requestParameters.fieldSelector !== undefined) {
                queryParameters['fieldSelector'] = requestParameters.fieldSelector;
            }
            if (requestParameters.gracePeriodSeconds !== undefined) {
                queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
            }
            if (requestParameters.labelSelector !== undefined) {
                queryParameters['labelSelector'] = requestParameters.labelSelector;
            }
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.orphanDependents !== undefined) {
                queryParameters['orphanDependents'] = requestParameters.orphanDependents;
            }
            if (requestParameters.propagationPolicy !== undefined) {
                queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
            }
            if (requestParameters.resourceVersion !== undefined) {
                queryParameters['resourceVersion'] = requestParameters.resourceVersion;
            }
            if (requestParameters.resourceVersionMatch !== undefined) {
                queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
            }
            if (requestParameters.timeoutSeconds !== undefined) {
                queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
            }
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/api/v1/namespaces/{namespace}/configmaps`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
                body: models_1.V1DeleteOptionsToJSON(requestParameters.body),
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.V1StatusFromJSON(jsonValue));
        });
    }
    /**
     * delete collection of ConfigMap
     */
    deleteCollectionNamespacedConfigMap(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteCollectionNamespacedConfigMapRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * delete collection of Endpoints
     */
    deleteCollectionNamespacedEndpointsRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                throw new runtime.RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling deleteCollectionNamespacedEndpoints.');
            }
            const queryParameters = {};
            if (requestParameters.pretty !== undefined) {
                queryParameters['pretty'] = requestParameters.pretty;
            }
            if (requestParameters._continue !== undefined) {
                queryParameters['continue'] = requestParameters._continue;
            }
            if (requestParameters.dryRun !== undefined) {
                queryParameters['dryRun'] = requestParameters.dryRun;
            }
            if (requestParameters.fieldSelector !== undefined) {
                queryParameters['fieldSelector'] = requestParameters.fieldSelector;
            }
            if (requestParameters.gracePeriodSeconds !== undefined) {
                queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
            }
            if (requestParameters.labelSelector !== undefined) {
                queryParameters['labelSelector'] = requestParameters.labelSelector;
            }
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.orphanDependents !== undefined) {
                queryParameters['orphanDependents'] = requestParameters.orphanDependents;
            }
            if (requestParameters.propagationPolicy !== undefined) {
                queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
            }
            if (requestParameters.resourceVersion !== undefined) {
                queryParameters['resourceVersion'] = requestParameters.resourceVersion;
            }
            if (requestParameters.resourceVersionMatch !== undefined) {
                queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
            }
            if (requestParameters.timeoutSeconds !== undefined) {
                queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
            }
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/api/v1/namespaces/{namespace}/endpoints`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
                body: models_1.V1DeleteOptionsToJSON(requestParameters.body),
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.V1StatusFromJSON(jsonValue));
        });
    }
    /**
     * delete collection of Endpoints
     */
    deleteCollectionNamespacedEndpoints(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteCollectionNamespacedEndpointsRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * delete collection of Event
     */
    deleteCollectionNamespacedEventRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                throw new runtime.RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling deleteCollectionNamespacedEvent.');
            }
            const queryParameters = {};
            if (requestParameters.pretty !== undefined) {
                queryParameters['pretty'] = requestParameters.pretty;
            }
            if (requestParameters._continue !== undefined) {
                queryParameters['continue'] = requestParameters._continue;
            }
            if (requestParameters.dryRun !== undefined) {
                queryParameters['dryRun'] = requestParameters.dryRun;
            }
            if (requestParameters.fieldSelector !== undefined) {
                queryParameters['fieldSelector'] = requestParameters.fieldSelector;
            }
            if (requestParameters.gracePeriodSeconds !== undefined) {
                queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
            }
            if (requestParameters.labelSelector !== undefined) {
                queryParameters['labelSelector'] = requestParameters.labelSelector;
            }
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.orphanDependents !== undefined) {
                queryParameters['orphanDependents'] = requestParameters.orphanDependents;
            }
            if (requestParameters.propagationPolicy !== undefined) {
                queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
            }
            if (requestParameters.resourceVersion !== undefined) {
                queryParameters['resourceVersion'] = requestParameters.resourceVersion;
            }
            if (requestParameters.resourceVersionMatch !== undefined) {
                queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
            }
            if (requestParameters.timeoutSeconds !== undefined) {
                queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
            }
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/api/v1/namespaces/{namespace}/events`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
                body: models_1.V1DeleteOptionsToJSON(requestParameters.body),
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.V1StatusFromJSON(jsonValue));
        });
    }
    /**
     * delete collection of Event
     */
    deleteCollectionNamespacedEvent(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteCollectionNamespacedEventRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * delete collection of LimitRange
     */
    deleteCollectionNamespacedLimitRangeRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                throw new runtime.RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling deleteCollectionNamespacedLimitRange.');
            }
            const queryParameters = {};
            if (requestParameters.pretty !== undefined) {
                queryParameters['pretty'] = requestParameters.pretty;
            }
            if (requestParameters._continue !== undefined) {
                queryParameters['continue'] = requestParameters._continue;
            }
            if (requestParameters.dryRun !== undefined) {
                queryParameters['dryRun'] = requestParameters.dryRun;
            }
            if (requestParameters.fieldSelector !== undefined) {
                queryParameters['fieldSelector'] = requestParameters.fieldSelector;
            }
            if (requestParameters.gracePeriodSeconds !== undefined) {
                queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
            }
            if (requestParameters.labelSelector !== undefined) {
                queryParameters['labelSelector'] = requestParameters.labelSelector;
            }
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.orphanDependents !== undefined) {
                queryParameters['orphanDependents'] = requestParameters.orphanDependents;
            }
            if (requestParameters.propagationPolicy !== undefined) {
                queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
            }
            if (requestParameters.resourceVersion !== undefined) {
                queryParameters['resourceVersion'] = requestParameters.resourceVersion;
            }
            if (requestParameters.resourceVersionMatch !== undefined) {
                queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
            }
            if (requestParameters.timeoutSeconds !== undefined) {
                queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
            }
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/api/v1/namespaces/{namespace}/limitranges`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
                body: models_1.V1DeleteOptionsToJSON(requestParameters.body),
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.V1StatusFromJSON(jsonValue));
        });
    }
    /**
     * delete collection of LimitRange
     */
    deleteCollectionNamespacedLimitRange(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteCollectionNamespacedLimitRangeRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * delete collection of PersistentVolumeClaim
     */
    deleteCollectionNamespacedPersistentVolumeClaimRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                throw new runtime.RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling deleteCollectionNamespacedPersistentVolumeClaim.');
            }
            const queryParameters = {};
            if (requestParameters.pretty !== undefined) {
                queryParameters['pretty'] = requestParameters.pretty;
            }
            if (requestParameters._continue !== undefined) {
                queryParameters['continue'] = requestParameters._continue;
            }
            if (requestParameters.dryRun !== undefined) {
                queryParameters['dryRun'] = requestParameters.dryRun;
            }
            if (requestParameters.fieldSelector !== undefined) {
                queryParameters['fieldSelector'] = requestParameters.fieldSelector;
            }
            if (requestParameters.gracePeriodSeconds !== undefined) {
                queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
            }
            if (requestParameters.labelSelector !== undefined) {
                queryParameters['labelSelector'] = requestParameters.labelSelector;
            }
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.orphanDependents !== undefined) {
                queryParameters['orphanDependents'] = requestParameters.orphanDependents;
            }
            if (requestParameters.propagationPolicy !== undefined) {
                queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
            }
            if (requestParameters.resourceVersion !== undefined) {
                queryParameters['resourceVersion'] = requestParameters.resourceVersion;
            }
            if (requestParameters.resourceVersionMatch !== undefined) {
                queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
            }
            if (requestParameters.timeoutSeconds !== undefined) {
                queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
            }
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/api/v1/namespaces/{namespace}/persistentvolumeclaims`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
                body: models_1.V1DeleteOptionsToJSON(requestParameters.body),
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.V1StatusFromJSON(jsonValue));
        });
    }
    /**
     * delete collection of PersistentVolumeClaim
     */
    deleteCollectionNamespacedPersistentVolumeClaim(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteCollectionNamespacedPersistentVolumeClaimRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * delete collection of Pod
     */
    deleteCollectionNamespacedPodRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                throw new runtime.RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling deleteCollectionNamespacedPod.');
            }
            const queryParameters = {};
            if (requestParameters.pretty !== undefined) {
                queryParameters['pretty'] = requestParameters.pretty;
            }
            if (requestParameters._continue !== undefined) {
                queryParameters['continue'] = requestParameters._continue;
            }
            if (requestParameters.dryRun !== undefined) {
                queryParameters['dryRun'] = requestParameters.dryRun;
            }
            if (requestParameters.fieldSelector !== undefined) {
                queryParameters['fieldSelector'] = requestParameters.fieldSelector;
            }
            if (requestParameters.gracePeriodSeconds !== undefined) {
                queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
            }
            if (requestParameters.labelSelector !== undefined) {
                queryParameters['labelSelector'] = requestParameters.labelSelector;
            }
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.orphanDependents !== undefined) {
                queryParameters['orphanDependents'] = requestParameters.orphanDependents;
            }
            if (requestParameters.propagationPolicy !== undefined) {
                queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
            }
            if (requestParameters.resourceVersion !== undefined) {
                queryParameters['resourceVersion'] = requestParameters.resourceVersion;
            }
            if (requestParameters.resourceVersionMatch !== undefined) {
                queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
            }
            if (requestParameters.timeoutSeconds !== undefined) {
                queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
            }
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/api/v1/namespaces/{namespace}/pods`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
                body: models_1.V1DeleteOptionsToJSON(requestParameters.body),
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.V1StatusFromJSON(jsonValue));
        });
    }
    /**
     * delete collection of Pod
     */
    deleteCollectionNamespacedPod(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteCollectionNamespacedPodRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * delete collection of PodTemplate
     */
    deleteCollectionNamespacedPodTemplateRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                throw new runtime.RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling deleteCollectionNamespacedPodTemplate.');
            }
            const queryParameters = {};
            if (requestParameters.pretty !== undefined) {
                queryParameters['pretty'] = requestParameters.pretty;
            }
            if (requestParameters._continue !== undefined) {
                queryParameters['continue'] = requestParameters._continue;
            }
            if (requestParameters.dryRun !== undefined) {
                queryParameters['dryRun'] = requestParameters.dryRun;
            }
            if (requestParameters.fieldSelector !== undefined) {
                queryParameters['fieldSelector'] = requestParameters.fieldSelector;
            }
            if (requestParameters.gracePeriodSeconds !== undefined) {
                queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
            }
            if (requestParameters.labelSelector !== undefined) {
                queryParameters['labelSelector'] = requestParameters.labelSelector;
            }
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.orphanDependents !== undefined) {
                queryParameters['orphanDependents'] = requestParameters.orphanDependents;
            }
            if (requestParameters.propagationPolicy !== undefined) {
                queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
            }
            if (requestParameters.resourceVersion !== undefined) {
                queryParameters['resourceVersion'] = requestParameters.resourceVersion;
            }
            if (requestParameters.resourceVersionMatch !== undefined) {
                queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
            }
            if (requestParameters.timeoutSeconds !== undefined) {
                queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
            }
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/api/v1/namespaces/{namespace}/podtemplates`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
                body: models_1.V1DeleteOptionsToJSON(requestParameters.body),
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.V1StatusFromJSON(jsonValue));
        });
    }
    /**
     * delete collection of PodTemplate
     */
    deleteCollectionNamespacedPodTemplate(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteCollectionNamespacedPodTemplateRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * delete collection of ReplicationController
     */
    deleteCollectionNamespacedReplicationControllerRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                throw new runtime.RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling deleteCollectionNamespacedReplicationController.');
            }
            const queryParameters = {};
            if (requestParameters.pretty !== undefined) {
                queryParameters['pretty'] = requestParameters.pretty;
            }
            if (requestParameters._continue !== undefined) {
                queryParameters['continue'] = requestParameters._continue;
            }
            if (requestParameters.dryRun !== undefined) {
                queryParameters['dryRun'] = requestParameters.dryRun;
            }
            if (requestParameters.fieldSelector !== undefined) {
                queryParameters['fieldSelector'] = requestParameters.fieldSelector;
            }
            if (requestParameters.gracePeriodSeconds !== undefined) {
                queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
            }
            if (requestParameters.labelSelector !== undefined) {
                queryParameters['labelSelector'] = requestParameters.labelSelector;
            }
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.orphanDependents !== undefined) {
                queryParameters['orphanDependents'] = requestParameters.orphanDependents;
            }
            if (requestParameters.propagationPolicy !== undefined) {
                queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
            }
            if (requestParameters.resourceVersion !== undefined) {
                queryParameters['resourceVersion'] = requestParameters.resourceVersion;
            }
            if (requestParameters.resourceVersionMatch !== undefined) {
                queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
            }
            if (requestParameters.timeoutSeconds !== undefined) {
                queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
            }
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/api/v1/namespaces/{namespace}/replicationcontrollers`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
                body: models_1.V1DeleteOptionsToJSON(requestParameters.body),
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.V1StatusFromJSON(jsonValue));
        });
    }
    /**
     * delete collection of ReplicationController
     */
    deleteCollectionNamespacedReplicationController(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteCollectionNamespacedReplicationControllerRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * delete collection of ResourceQuota
     */
    deleteCollectionNamespacedResourceQuotaRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                throw new runtime.RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling deleteCollectionNamespacedResourceQuota.');
            }
            const queryParameters = {};
            if (requestParameters.pretty !== undefined) {
                queryParameters['pretty'] = requestParameters.pretty;
            }
            if (requestParameters._continue !== undefined) {
                queryParameters['continue'] = requestParameters._continue;
            }
            if (requestParameters.dryRun !== undefined) {
                queryParameters['dryRun'] = requestParameters.dryRun;
            }
            if (requestParameters.fieldSelector !== undefined) {
                queryParameters['fieldSelector'] = requestParameters.fieldSelector;
            }
            if (requestParameters.gracePeriodSeconds !== undefined) {
                queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
            }
            if (requestParameters.labelSelector !== undefined) {
                queryParameters['labelSelector'] = requestParameters.labelSelector;
            }
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.orphanDependents !== undefined) {
                queryParameters['orphanDependents'] = requestParameters.orphanDependents;
            }
            if (requestParameters.propagationPolicy !== undefined) {
                queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
            }
            if (requestParameters.resourceVersion !== undefined) {
                queryParameters['resourceVersion'] = requestParameters.resourceVersion;
            }
            if (requestParameters.resourceVersionMatch !== undefined) {
                queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
            }
            if (requestParameters.timeoutSeconds !== undefined) {
                queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
            }
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/api/v1/namespaces/{namespace}/resourcequotas`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
                body: models_1.V1DeleteOptionsToJSON(requestParameters.body),
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.V1StatusFromJSON(jsonValue));
        });
    }
    /**
     * delete collection of ResourceQuota
     */
    deleteCollectionNamespacedResourceQuota(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteCollectionNamespacedResourceQuotaRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * delete collection of Secret
     */
    deleteCollectionNamespacedSecretRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                throw new runtime.RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling deleteCollectionNamespacedSecret.');
            }
            const queryParameters = {};
            if (requestParameters.pretty !== undefined) {
                queryParameters['pretty'] = requestParameters.pretty;
            }
            if (requestParameters._continue !== undefined) {
                queryParameters['continue'] = requestParameters._continue;
            }
            if (requestParameters.dryRun !== undefined) {
                queryParameters['dryRun'] = requestParameters.dryRun;
            }
            if (requestParameters.fieldSelector !== undefined) {
                queryParameters['fieldSelector'] = requestParameters.fieldSelector;
            }
            if (requestParameters.gracePeriodSeconds !== undefined) {
                queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
            }
            if (requestParameters.labelSelector !== undefined) {
                queryParameters['labelSelector'] = requestParameters.labelSelector;
            }
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.orphanDependents !== undefined) {
                queryParameters['orphanDependents'] = requestParameters.orphanDependents;
            }
            if (requestParameters.propagationPolicy !== undefined) {
                queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
            }
            if (requestParameters.resourceVersion !== undefined) {
                queryParameters['resourceVersion'] = requestParameters.resourceVersion;
            }
            if (requestParameters.resourceVersionMatch !== undefined) {
                queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
            }
            if (requestParameters.timeoutSeconds !== undefined) {
                queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
            }
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/api/v1/namespaces/{namespace}/secrets`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
                body: models_1.V1DeleteOptionsToJSON(requestParameters.body),
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.V1StatusFromJSON(jsonValue));
        });
    }
    /**
     * delete collection of Secret
     */
    deleteCollectionNamespacedSecret(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteCollectionNamespacedSecretRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * delete collection of Service
     */
    deleteCollectionNamespacedServiceRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                throw new runtime.RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling deleteCollectionNamespacedService.');
            }
            const queryParameters = {};
            if (requestParameters.pretty !== undefined) {
                queryParameters['pretty'] = requestParameters.pretty;
            }
            if (requestParameters._continue !== undefined) {
                queryParameters['continue'] = requestParameters._continue;
            }
            if (requestParameters.dryRun !== undefined) {
                queryParameters['dryRun'] = requestParameters.dryRun;
            }
            if (requestParameters.fieldSelector !== undefined) {
                queryParameters['fieldSelector'] = requestParameters.fieldSelector;
            }
            if (requestParameters.gracePeriodSeconds !== undefined) {
                queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
            }
            if (requestParameters.labelSelector !== undefined) {
                queryParameters['labelSelector'] = requestParameters.labelSelector;
            }
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.orphanDependents !== undefined) {
                queryParameters['orphanDependents'] = requestParameters.orphanDependents;
            }
            if (requestParameters.propagationPolicy !== undefined) {
                queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
            }
            if (requestParameters.resourceVersion !== undefined) {
                queryParameters['resourceVersion'] = requestParameters.resourceVersion;
            }
            if (requestParameters.resourceVersionMatch !== undefined) {
                queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
            }
            if (requestParameters.timeoutSeconds !== undefined) {
                queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
            }
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/api/v1/namespaces/{namespace}/services`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
                body: models_1.V1DeleteOptionsToJSON(requestParameters.body),
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.V1StatusFromJSON(jsonValue));
        });
    }
    /**
     * delete collection of Service
     */
    deleteCollectionNamespacedService(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteCollectionNamespacedServiceRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * delete collection of ServiceAccount
     */
    deleteCollectionNamespacedServiceAccountRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                throw new runtime.RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling deleteCollectionNamespacedServiceAccount.');
            }
            const queryParameters = {};
            if (requestParameters.pretty !== undefined) {
                queryParameters['pretty'] = requestParameters.pretty;
            }
            if (requestParameters._continue !== undefined) {
                queryParameters['continue'] = requestParameters._continue;
            }
            if (requestParameters.dryRun !== undefined) {
                queryParameters['dryRun'] = requestParameters.dryRun;
            }
            if (requestParameters.fieldSelector !== undefined) {
                queryParameters['fieldSelector'] = requestParameters.fieldSelector;
            }
            if (requestParameters.gracePeriodSeconds !== undefined) {
                queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
            }
            if (requestParameters.labelSelector !== undefined) {
                queryParameters['labelSelector'] = requestParameters.labelSelector;
            }
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.orphanDependents !== undefined) {
                queryParameters['orphanDependents'] = requestParameters.orphanDependents;
            }
            if (requestParameters.propagationPolicy !== undefined) {
                queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
            }
            if (requestParameters.resourceVersion !== undefined) {
                queryParameters['resourceVersion'] = requestParameters.resourceVersion;
            }
            if (requestParameters.resourceVersionMatch !== undefined) {
                queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
            }
            if (requestParameters.timeoutSeconds !== undefined) {
                queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
            }
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/api/v1/namespaces/{namespace}/serviceaccounts`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
                body: models_1.V1DeleteOptionsToJSON(requestParameters.body),
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.V1StatusFromJSON(jsonValue));
        });
    }
    /**
     * delete collection of ServiceAccount
     */
    deleteCollectionNamespacedServiceAccount(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteCollectionNamespacedServiceAccountRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * delete collection of Node
     */
    deleteCollectionNodeRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.pretty !== undefined) {
                queryParameters['pretty'] = requestParameters.pretty;
            }
            if (requestParameters._continue !== undefined) {
                queryParameters['continue'] = requestParameters._continue;
            }
            if (requestParameters.dryRun !== undefined) {
                queryParameters['dryRun'] = requestParameters.dryRun;
            }
            if (requestParameters.fieldSelector !== undefined) {
                queryParameters['fieldSelector'] = requestParameters.fieldSelector;
            }
            if (requestParameters.gracePeriodSeconds !== undefined) {
                queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
            }
            if (requestParameters.labelSelector !== undefined) {
                queryParameters['labelSelector'] = requestParameters.labelSelector;
            }
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.orphanDependents !== undefined) {
                queryParameters['orphanDependents'] = requestParameters.orphanDependents;
            }
            if (requestParameters.propagationPolicy !== undefined) {
                queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
            }
            if (requestParameters.resourceVersion !== undefined) {
                queryParameters['resourceVersion'] = requestParameters.resourceVersion;
            }
            if (requestParameters.resourceVersionMatch !== undefined) {
                queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
            }
            if (requestParameters.timeoutSeconds !== undefined) {
                queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
            }
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/api/v1/nodes`,
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
                body: models_1.V1DeleteOptionsToJSON(requestParameters.body),
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.V1StatusFromJSON(jsonValue));
        });
    }
    /**
     * delete collection of Node
     */
    deleteCollectionNode(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteCollectionNodeRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * delete collection of PersistentVolume
     */
    deleteCollectionPersistentVolumeRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.pretty !== undefined) {
                queryParameters['pretty'] = requestParameters.pretty;
            }
            if (requestParameters._continue !== undefined) {
                queryParameters['continue'] = requestParameters._continue;
            }
            if (requestParameters.dryRun !== undefined) {
                queryParameters['dryRun'] = requestParameters.dryRun;
            }
            if (requestParameters.fieldSelector !== undefined) {
                queryParameters['fieldSelector'] = requestParameters.fieldSelector;
            }
            if (requestParameters.gracePeriodSeconds !== undefined) {
                queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
            }
            if (requestParameters.labelSelector !== undefined) {
                queryParameters['labelSelector'] = requestParameters.labelSelector;
            }
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.orphanDependents !== undefined) {
                queryParameters['orphanDependents'] = requestParameters.orphanDependents;
            }
            if (requestParameters.propagationPolicy !== undefined) {
                queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
            }
            if (requestParameters.resourceVersion !== undefined) {
                queryParameters['resourceVersion'] = requestParameters.resourceVersion;
            }
            if (requestParameters.resourceVersionMatch !== undefined) {
                queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
            }
            if (requestParameters.timeoutSeconds !== undefined) {
                queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
            }
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/api/v1/persistentvolumes`,
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
                body: models_1.V1DeleteOptionsToJSON(requestParameters.body),
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.V1StatusFromJSON(jsonValue));
        });
    }
    /**
     * delete collection of PersistentVolume
     */
    deleteCollectionPersistentVolume(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteCollectionPersistentVolumeRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * delete a Namespace
     */
    deleteNamespaceRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.name === null || requestParameters.name === undefined) {
                throw new runtime.RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling deleteNamespace.');
            }
            const queryParameters = {};
            if (requestParameters.pretty !== undefined) {
                queryParameters['pretty'] = requestParameters.pretty;
            }
            if (requestParameters.dryRun !== undefined) {
                queryParameters['dryRun'] = requestParameters.dryRun;
            }
            if (requestParameters.gracePeriodSeconds !== undefined) {
                queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
            }
            if (requestParameters.orphanDependents !== undefined) {
                queryParameters['orphanDependents'] = requestParameters.orphanDependents;
            }
            if (requestParameters.propagationPolicy !== undefined) {
                queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
            }
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/api/v1/namespaces/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
                body: models_1.V1DeleteOptionsToJSON(requestParameters.body),
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.V1StatusFromJSON(jsonValue));
        });
    }
    /**
     * delete a Namespace
     */
    deleteNamespace(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteNamespaceRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * delete a ConfigMap
     */
    deleteNamespacedConfigMapRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.name === null || requestParameters.name === undefined) {
                throw new runtime.RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling deleteNamespacedConfigMap.');
            }
            if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                throw new runtime.RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling deleteNamespacedConfigMap.');
            }
            const queryParameters = {};
            if (requestParameters.pretty !== undefined) {
                queryParameters['pretty'] = requestParameters.pretty;
            }
            if (requestParameters.dryRun !== undefined) {
                queryParameters['dryRun'] = requestParameters.dryRun;
            }
            if (requestParameters.gracePeriodSeconds !== undefined) {
                queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
            }
            if (requestParameters.orphanDependents !== undefined) {
                queryParameters['orphanDependents'] = requestParameters.orphanDependents;
            }
            if (requestParameters.propagationPolicy !== undefined) {
                queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
            }
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/api/v1/namespaces/{namespace}/configmaps/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
                body: models_1.V1DeleteOptionsToJSON(requestParameters.body),
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.V1StatusFromJSON(jsonValue));
        });
    }
    /**
     * delete a ConfigMap
     */
    deleteNamespacedConfigMap(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteNamespacedConfigMapRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * delete Endpoints
     */
    deleteNamespacedEndpointsRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.name === null || requestParameters.name === undefined) {
                throw new runtime.RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling deleteNamespacedEndpoints.');
            }
            if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                throw new runtime.RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling deleteNamespacedEndpoints.');
            }
            const queryParameters = {};
            if (requestParameters.pretty !== undefined) {
                queryParameters['pretty'] = requestParameters.pretty;
            }
            if (requestParameters.dryRun !== undefined) {
                queryParameters['dryRun'] = requestParameters.dryRun;
            }
            if (requestParameters.gracePeriodSeconds !== undefined) {
                queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
            }
            if (requestParameters.orphanDependents !== undefined) {
                queryParameters['orphanDependents'] = requestParameters.orphanDependents;
            }
            if (requestParameters.propagationPolicy !== undefined) {
                queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
            }
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/api/v1/namespaces/{namespace}/endpoints/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
                body: models_1.V1DeleteOptionsToJSON(requestParameters.body),
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.V1StatusFromJSON(jsonValue));
        });
    }
    /**
     * delete Endpoints
     */
    deleteNamespacedEndpoints(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteNamespacedEndpointsRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * delete an Event
     */
    deleteNamespacedEventRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.name === null || requestParameters.name === undefined) {
                throw new runtime.RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling deleteNamespacedEvent.');
            }
            if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                throw new runtime.RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling deleteNamespacedEvent.');
            }
            const queryParameters = {};
            if (requestParameters.pretty !== undefined) {
                queryParameters['pretty'] = requestParameters.pretty;
            }
            if (requestParameters.dryRun !== undefined) {
                queryParameters['dryRun'] = requestParameters.dryRun;
            }
            if (requestParameters.gracePeriodSeconds !== undefined) {
                queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
            }
            if (requestParameters.orphanDependents !== undefined) {
                queryParameters['orphanDependents'] = requestParameters.orphanDependents;
            }
            if (requestParameters.propagationPolicy !== undefined) {
                queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
            }
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/api/v1/namespaces/{namespace}/events/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
                body: models_1.V1DeleteOptionsToJSON(requestParameters.body),
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.V1StatusFromJSON(jsonValue));
        });
    }
    /**
     * delete an Event
     */
    deleteNamespacedEvent(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteNamespacedEventRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * delete a LimitRange
     */
    deleteNamespacedLimitRangeRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.name === null || requestParameters.name === undefined) {
                throw new runtime.RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling deleteNamespacedLimitRange.');
            }
            if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                throw new runtime.RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling deleteNamespacedLimitRange.');
            }
            const queryParameters = {};
            if (requestParameters.pretty !== undefined) {
                queryParameters['pretty'] = requestParameters.pretty;
            }
            if (requestParameters.dryRun !== undefined) {
                queryParameters['dryRun'] = requestParameters.dryRun;
            }
            if (requestParameters.gracePeriodSeconds !== undefined) {
                queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
            }
            if (requestParameters.orphanDependents !== undefined) {
                queryParameters['orphanDependents'] = requestParameters.orphanDependents;
            }
            if (requestParameters.propagationPolicy !== undefined) {
                queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
            }
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/api/v1/namespaces/{namespace}/limitranges/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
                body: models_1.V1DeleteOptionsToJSON(requestParameters.body),
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.V1StatusFromJSON(jsonValue));
        });
    }
    /**
     * delete a LimitRange
     */
    deleteNamespacedLimitRange(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteNamespacedLimitRangeRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * delete a PersistentVolumeClaim
     */
    deleteNamespacedPersistentVolumeClaimRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.name === null || requestParameters.name === undefined) {
                throw new runtime.RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling deleteNamespacedPersistentVolumeClaim.');
            }
            if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                throw new runtime.RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling deleteNamespacedPersistentVolumeClaim.');
            }
            const queryParameters = {};
            if (requestParameters.pretty !== undefined) {
                queryParameters['pretty'] = requestParameters.pretty;
            }
            if (requestParameters.dryRun !== undefined) {
                queryParameters['dryRun'] = requestParameters.dryRun;
            }
            if (requestParameters.gracePeriodSeconds !== undefined) {
                queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
            }
            if (requestParameters.orphanDependents !== undefined) {
                queryParameters['orphanDependents'] = requestParameters.orphanDependents;
            }
            if (requestParameters.propagationPolicy !== undefined) {
                queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
            }
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/api/v1/namespaces/{namespace}/persistentvolumeclaims/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
                body: models_1.V1DeleteOptionsToJSON(requestParameters.body),
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.V1PersistentVolumeClaimFromJSON(jsonValue));
        });
    }
    /**
     * delete a PersistentVolumeClaim
     */
    deleteNamespacedPersistentVolumeClaim(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteNamespacedPersistentVolumeClaimRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * delete a Pod
     */
    deleteNamespacedPodRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.name === null || requestParameters.name === undefined) {
                throw new runtime.RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling deleteNamespacedPod.');
            }
            if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                throw new runtime.RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling deleteNamespacedPod.');
            }
            const queryParameters = {};
            if (requestParameters.pretty !== undefined) {
                queryParameters['pretty'] = requestParameters.pretty;
            }
            if (requestParameters.dryRun !== undefined) {
                queryParameters['dryRun'] = requestParameters.dryRun;
            }
            if (requestParameters.gracePeriodSeconds !== undefined) {
                queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
            }
            if (requestParameters.orphanDependents !== undefined) {
                queryParameters['orphanDependents'] = requestParameters.orphanDependents;
            }
            if (requestParameters.propagationPolicy !== undefined) {
                queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
            }
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/api/v1/namespaces/{namespace}/pods/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
                body: models_1.V1DeleteOptionsToJSON(requestParameters.body),
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.V1PodFromJSON(jsonValue));
        });
    }
    /**
     * delete a Pod
     */
    deleteNamespacedPod(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteNamespacedPodRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * delete a PodTemplate
     */
    deleteNamespacedPodTemplateRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.name === null || requestParameters.name === undefined) {
                throw new runtime.RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling deleteNamespacedPodTemplate.');
            }
            if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                throw new runtime.RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling deleteNamespacedPodTemplate.');
            }
            const queryParameters = {};
            if (requestParameters.pretty !== undefined) {
                queryParameters['pretty'] = requestParameters.pretty;
            }
            if (requestParameters.dryRun !== undefined) {
                queryParameters['dryRun'] = requestParameters.dryRun;
            }
            if (requestParameters.gracePeriodSeconds !== undefined) {
                queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
            }
            if (requestParameters.orphanDependents !== undefined) {
                queryParameters['orphanDependents'] = requestParameters.orphanDependents;
            }
            if (requestParameters.propagationPolicy !== undefined) {
                queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
            }
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/api/v1/namespaces/{namespace}/podtemplates/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
                body: models_1.V1DeleteOptionsToJSON(requestParameters.body),
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.V1PodTemplateFromJSON(jsonValue));
        });
    }
    /**
     * delete a PodTemplate
     */
    deleteNamespacedPodTemplate(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteNamespacedPodTemplateRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * delete a ReplicationController
     */
    deleteNamespacedReplicationControllerRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.name === null || requestParameters.name === undefined) {
                throw new runtime.RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling deleteNamespacedReplicationController.');
            }
            if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                throw new runtime.RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling deleteNamespacedReplicationController.');
            }
            const queryParameters = {};
            if (requestParameters.pretty !== undefined) {
                queryParameters['pretty'] = requestParameters.pretty;
            }
            if (requestParameters.dryRun !== undefined) {
                queryParameters['dryRun'] = requestParameters.dryRun;
            }
            if (requestParameters.gracePeriodSeconds !== undefined) {
                queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
            }
            if (requestParameters.orphanDependents !== undefined) {
                queryParameters['orphanDependents'] = requestParameters.orphanDependents;
            }
            if (requestParameters.propagationPolicy !== undefined) {
                queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
            }
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/api/v1/namespaces/{namespace}/replicationcontrollers/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
                body: models_1.V1DeleteOptionsToJSON(requestParameters.body),
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.V1StatusFromJSON(jsonValue));
        });
    }
    /**
     * delete a ReplicationController
     */
    deleteNamespacedReplicationController(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteNamespacedReplicationControllerRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * delete a ResourceQuota
     */
    deleteNamespacedResourceQuotaRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.name === null || requestParameters.name === undefined) {
                throw new runtime.RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling deleteNamespacedResourceQuota.');
            }
            if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                throw new runtime.RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling deleteNamespacedResourceQuota.');
            }
            const queryParameters = {};
            if (requestParameters.pretty !== undefined) {
                queryParameters['pretty'] = requestParameters.pretty;
            }
            if (requestParameters.dryRun !== undefined) {
                queryParameters['dryRun'] = requestParameters.dryRun;
            }
            if (requestParameters.gracePeriodSeconds !== undefined) {
                queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
            }
            if (requestParameters.orphanDependents !== undefined) {
                queryParameters['orphanDependents'] = requestParameters.orphanDependents;
            }
            if (requestParameters.propagationPolicy !== undefined) {
                queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
            }
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/api/v1/namespaces/{namespace}/resourcequotas/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
                body: models_1.V1DeleteOptionsToJSON(requestParameters.body),
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.V1ResourceQuotaFromJSON(jsonValue));
        });
    }
    /**
     * delete a ResourceQuota
     */
    deleteNamespacedResourceQuota(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteNamespacedResourceQuotaRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * delete a Secret
     */
    deleteNamespacedSecretRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.name === null || requestParameters.name === undefined) {
                throw new runtime.RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling deleteNamespacedSecret.');
            }
            if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                throw new runtime.RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling deleteNamespacedSecret.');
            }
            const queryParameters = {};
            if (requestParameters.pretty !== undefined) {
                queryParameters['pretty'] = requestParameters.pretty;
            }
            if (requestParameters.dryRun !== undefined) {
                queryParameters['dryRun'] = requestParameters.dryRun;
            }
            if (requestParameters.gracePeriodSeconds !== undefined) {
                queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
            }
            if (requestParameters.orphanDependents !== undefined) {
                queryParameters['orphanDependents'] = requestParameters.orphanDependents;
            }
            if (requestParameters.propagationPolicy !== undefined) {
                queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
            }
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/api/v1/namespaces/{namespace}/secrets/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
                body: models_1.V1DeleteOptionsToJSON(requestParameters.body),
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.V1StatusFromJSON(jsonValue));
        });
    }
    /**
     * delete a Secret
     */
    deleteNamespacedSecret(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteNamespacedSecretRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * delete a Service
     */
    deleteNamespacedServiceRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.name === null || requestParameters.name === undefined) {
                throw new runtime.RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling deleteNamespacedService.');
            }
            if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                throw new runtime.RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling deleteNamespacedService.');
            }
            const queryParameters = {};
            if (requestParameters.pretty !== undefined) {
                queryParameters['pretty'] = requestParameters.pretty;
            }
            if (requestParameters.dryRun !== undefined) {
                queryParameters['dryRun'] = requestParameters.dryRun;
            }
            if (requestParameters.gracePeriodSeconds !== undefined) {
                queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
            }
            if (requestParameters.orphanDependents !== undefined) {
                queryParameters['orphanDependents'] = requestParameters.orphanDependents;
            }
            if (requestParameters.propagationPolicy !== undefined) {
                queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
            }
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/api/v1/namespaces/{namespace}/services/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
                body: models_1.V1DeleteOptionsToJSON(requestParameters.body),
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.V1ServiceFromJSON(jsonValue));
        });
    }
    /**
     * delete a Service
     */
    deleteNamespacedService(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteNamespacedServiceRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * delete a ServiceAccount
     */
    deleteNamespacedServiceAccountRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.name === null || requestParameters.name === undefined) {
                throw new runtime.RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling deleteNamespacedServiceAccount.');
            }
            if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                throw new runtime.RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling deleteNamespacedServiceAccount.');
            }
            const queryParameters = {};
            if (requestParameters.pretty !== undefined) {
                queryParameters['pretty'] = requestParameters.pretty;
            }
            if (requestParameters.dryRun !== undefined) {
                queryParameters['dryRun'] = requestParameters.dryRun;
            }
            if (requestParameters.gracePeriodSeconds !== undefined) {
                queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
            }
            if (requestParameters.orphanDependents !== undefined) {
                queryParameters['orphanDependents'] = requestParameters.orphanDependents;
            }
            if (requestParameters.propagationPolicy !== undefined) {
                queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
            }
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/api/v1/namespaces/{namespace}/serviceaccounts/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
                body: models_1.V1DeleteOptionsToJSON(requestParameters.body),
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.V1ServiceAccountFromJSON(jsonValue));
        });
    }
    /**
     * delete a ServiceAccount
     */
    deleteNamespacedServiceAccount(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteNamespacedServiceAccountRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * delete a Node
     */
    deleteNodeRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.name === null || requestParameters.name === undefined) {
                throw new runtime.RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling deleteNode.');
            }
            const queryParameters = {};
            if (requestParameters.pretty !== undefined) {
                queryParameters['pretty'] = requestParameters.pretty;
            }
            if (requestParameters.dryRun !== undefined) {
                queryParameters['dryRun'] = requestParameters.dryRun;
            }
            if (requestParameters.gracePeriodSeconds !== undefined) {
                queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
            }
            if (requestParameters.orphanDependents !== undefined) {
                queryParameters['orphanDependents'] = requestParameters.orphanDependents;
            }
            if (requestParameters.propagationPolicy !== undefined) {
                queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
            }
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/api/v1/nodes/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
                body: models_1.V1DeleteOptionsToJSON(requestParameters.body),
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.V1StatusFromJSON(jsonValue));
        });
    }
    /**
     * delete a Node
     */
    deleteNode(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteNodeRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * delete a PersistentVolume
     */
    deletePersistentVolumeRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.name === null || requestParameters.name === undefined) {
                throw new runtime.RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling deletePersistentVolume.');
            }
            const queryParameters = {};
            if (requestParameters.pretty !== undefined) {
                queryParameters['pretty'] = requestParameters.pretty;
            }
            if (requestParameters.dryRun !== undefined) {
                queryParameters['dryRun'] = requestParameters.dryRun;
            }
            if (requestParameters.gracePeriodSeconds !== undefined) {
                queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
            }
            if (requestParameters.orphanDependents !== undefined) {
                queryParameters['orphanDependents'] = requestParameters.orphanDependents;
            }
            if (requestParameters.propagationPolicy !== undefined) {
                queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
            }
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/api/v1/persistentvolumes/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
                body: models_1.V1DeleteOptionsToJSON(requestParameters.body),
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.V1PersistentVolumeFromJSON(jsonValue));
        });
    }
    /**
     * delete a PersistentVolume
     */
    deletePersistentVolume(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deletePersistentVolumeRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * get available resources
     */
    getAPIResourcesRaw() {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/api/v1/`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.V1APIResourceListFromJSON(jsonValue));
        });
    }
    /**
     * get available resources
     */
    getAPIResources() {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getAPIResourcesRaw();
            return yield response.value();
        });
    }
    /**
     * list objects of kind ComponentStatus
     */
    listComponentStatusRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.allowWatchBookmarks !== undefined) {
                queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
            }
            if (requestParameters._continue !== undefined) {
                queryParameters['continue'] = requestParameters._continue;
            }
            if (requestParameters.fieldSelector !== undefined) {
                queryParameters['fieldSelector'] = requestParameters.fieldSelector;
            }
            if (requestParameters.labelSelector !== undefined) {
                queryParameters['labelSelector'] = requestParameters.labelSelector;
            }
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.pretty !== undefined) {
                queryParameters['pretty'] = requestParameters.pretty;
            }
            if (requestParameters.resourceVersion !== undefined) {
                queryParameters['resourceVersion'] = requestParameters.resourceVersion;
            }
            if (requestParameters.resourceVersionMatch !== undefined) {
                queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
            }
            if (requestParameters.timeoutSeconds !== undefined) {
                queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
            }
            if (requestParameters.watch !== undefined) {
                queryParameters['watch'] = requestParameters.watch;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/api/v1/componentstatuses`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.V1ComponentStatusListFromJSON(jsonValue));
        });
    }
    /**
     * list objects of kind ComponentStatus
     */
    listComponentStatus(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.listComponentStatusRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * list or watch objects of kind ConfigMap
     */
    listConfigMapForAllNamespacesRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.allowWatchBookmarks !== undefined) {
                queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
            }
            if (requestParameters._continue !== undefined) {
                queryParameters['continue'] = requestParameters._continue;
            }
            if (requestParameters.fieldSelector !== undefined) {
                queryParameters['fieldSelector'] = requestParameters.fieldSelector;
            }
            if (requestParameters.labelSelector !== undefined) {
                queryParameters['labelSelector'] = requestParameters.labelSelector;
            }
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.pretty !== undefined) {
                queryParameters['pretty'] = requestParameters.pretty;
            }
            if (requestParameters.resourceVersion !== undefined) {
                queryParameters['resourceVersion'] = requestParameters.resourceVersion;
            }
            if (requestParameters.resourceVersionMatch !== undefined) {
                queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
            }
            if (requestParameters.timeoutSeconds !== undefined) {
                queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
            }
            if (requestParameters.watch !== undefined) {
                queryParameters['watch'] = requestParameters.watch;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/api/v1/configmaps`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.V1ConfigMapListFromJSON(jsonValue));
        });
    }
    /**
     * list or watch objects of kind ConfigMap
     */
    listConfigMapForAllNamespaces(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.listConfigMapForAllNamespacesRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * list or watch objects of kind Endpoints
     */
    listEndpointsForAllNamespacesRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.allowWatchBookmarks !== undefined) {
                queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
            }
            if (requestParameters._continue !== undefined) {
                queryParameters['continue'] = requestParameters._continue;
            }
            if (requestParameters.fieldSelector !== undefined) {
                queryParameters['fieldSelector'] = requestParameters.fieldSelector;
            }
            if (requestParameters.labelSelector !== undefined) {
                queryParameters['labelSelector'] = requestParameters.labelSelector;
            }
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.pretty !== undefined) {
                queryParameters['pretty'] = requestParameters.pretty;
            }
            if (requestParameters.resourceVersion !== undefined) {
                queryParameters['resourceVersion'] = requestParameters.resourceVersion;
            }
            if (requestParameters.resourceVersionMatch !== undefined) {
                queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
            }
            if (requestParameters.timeoutSeconds !== undefined) {
                queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
            }
            if (requestParameters.watch !== undefined) {
                queryParameters['watch'] = requestParameters.watch;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/api/v1/endpoints`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.V1EndpointsListFromJSON(jsonValue));
        });
    }
    /**
     * list or watch objects of kind Endpoints
     */
    listEndpointsForAllNamespaces(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.listEndpointsForAllNamespacesRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * list or watch objects of kind Event
     */
    listEventForAllNamespacesRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.allowWatchBookmarks !== undefined) {
                queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
            }
            if (requestParameters._continue !== undefined) {
                queryParameters['continue'] = requestParameters._continue;
            }
            if (requestParameters.fieldSelector !== undefined) {
                queryParameters['fieldSelector'] = requestParameters.fieldSelector;
            }
            if (requestParameters.labelSelector !== undefined) {
                queryParameters['labelSelector'] = requestParameters.labelSelector;
            }
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.pretty !== undefined) {
                queryParameters['pretty'] = requestParameters.pretty;
            }
            if (requestParameters.resourceVersion !== undefined) {
                queryParameters['resourceVersion'] = requestParameters.resourceVersion;
            }
            if (requestParameters.resourceVersionMatch !== undefined) {
                queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
            }
            if (requestParameters.timeoutSeconds !== undefined) {
                queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
            }
            if (requestParameters.watch !== undefined) {
                queryParameters['watch'] = requestParameters.watch;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/api/v1/events`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.CoreV1EventListFromJSON(jsonValue));
        });
    }
    /**
     * list or watch objects of kind Event
     */
    listEventForAllNamespaces(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.listEventForAllNamespacesRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * list or watch objects of kind LimitRange
     */
    listLimitRangeForAllNamespacesRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.allowWatchBookmarks !== undefined) {
                queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
            }
            if (requestParameters._continue !== undefined) {
                queryParameters['continue'] = requestParameters._continue;
            }
            if (requestParameters.fieldSelector !== undefined) {
                queryParameters['fieldSelector'] = requestParameters.fieldSelector;
            }
            if (requestParameters.labelSelector !== undefined) {
                queryParameters['labelSelector'] = requestParameters.labelSelector;
            }
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.pretty !== undefined) {
                queryParameters['pretty'] = requestParameters.pretty;
            }
            if (requestParameters.resourceVersion !== undefined) {
                queryParameters['resourceVersion'] = requestParameters.resourceVersion;
            }
            if (requestParameters.resourceVersionMatch !== undefined) {
                queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
            }
            if (requestParameters.timeoutSeconds !== undefined) {
                queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
            }
            if (requestParameters.watch !== undefined) {
                queryParameters['watch'] = requestParameters.watch;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/api/v1/limitranges`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.V1LimitRangeListFromJSON(jsonValue));
        });
    }
    /**
     * list or watch objects of kind LimitRange
     */
    listLimitRangeForAllNamespaces(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.listLimitRangeForAllNamespacesRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * list or watch objects of kind Namespace
     */
    listNamespaceRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.pretty !== undefined) {
                queryParameters['pretty'] = requestParameters.pretty;
            }
            if (requestParameters.allowWatchBookmarks !== undefined) {
                queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
            }
            if (requestParameters._continue !== undefined) {
                queryParameters['continue'] = requestParameters._continue;
            }
            if (requestParameters.fieldSelector !== undefined) {
                queryParameters['fieldSelector'] = requestParameters.fieldSelector;
            }
            if (requestParameters.labelSelector !== undefined) {
                queryParameters['labelSelector'] = requestParameters.labelSelector;
            }
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.resourceVersion !== undefined) {
                queryParameters['resourceVersion'] = requestParameters.resourceVersion;
            }
            if (requestParameters.resourceVersionMatch !== undefined) {
                queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
            }
            if (requestParameters.timeoutSeconds !== undefined) {
                queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
            }
            if (requestParameters.watch !== undefined) {
                queryParameters['watch'] = requestParameters.watch;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/api/v1/namespaces`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.V1NamespaceListFromJSON(jsonValue));
        });
    }
    /**
     * list or watch objects of kind Namespace
     */
    listNamespace(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.listNamespaceRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * list or watch objects of kind ConfigMap
     */
    listNamespacedConfigMapRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                throw new runtime.RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling listNamespacedConfigMap.');
            }
            const queryParameters = {};
            if (requestParameters.pretty !== undefined) {
                queryParameters['pretty'] = requestParameters.pretty;
            }
            if (requestParameters.allowWatchBookmarks !== undefined) {
                queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
            }
            if (requestParameters._continue !== undefined) {
                queryParameters['continue'] = requestParameters._continue;
            }
            if (requestParameters.fieldSelector !== undefined) {
                queryParameters['fieldSelector'] = requestParameters.fieldSelector;
            }
            if (requestParameters.labelSelector !== undefined) {
                queryParameters['labelSelector'] = requestParameters.labelSelector;
            }
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.resourceVersion !== undefined) {
                queryParameters['resourceVersion'] = requestParameters.resourceVersion;
            }
            if (requestParameters.resourceVersionMatch !== undefined) {
                queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
            }
            if (requestParameters.timeoutSeconds !== undefined) {
                queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
            }
            if (requestParameters.watch !== undefined) {
                queryParameters['watch'] = requestParameters.watch;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/api/v1/namespaces/{namespace}/configmaps`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.V1ConfigMapListFromJSON(jsonValue));
        });
    }
    /**
     * list or watch objects of kind ConfigMap
     */
    listNamespacedConfigMap(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.listNamespacedConfigMapRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * list or watch objects of kind Endpoints
     */
    listNamespacedEndpointsRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                throw new runtime.RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling listNamespacedEndpoints.');
            }
            const queryParameters = {};
            if (requestParameters.pretty !== undefined) {
                queryParameters['pretty'] = requestParameters.pretty;
            }
            if (requestParameters.allowWatchBookmarks !== undefined) {
                queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
            }
            if (requestParameters._continue !== undefined) {
                queryParameters['continue'] = requestParameters._continue;
            }
            if (requestParameters.fieldSelector !== undefined) {
                queryParameters['fieldSelector'] = requestParameters.fieldSelector;
            }
            if (requestParameters.labelSelector !== undefined) {
                queryParameters['labelSelector'] = requestParameters.labelSelector;
            }
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.resourceVersion !== undefined) {
                queryParameters['resourceVersion'] = requestParameters.resourceVersion;
            }
            if (requestParameters.resourceVersionMatch !== undefined) {
                queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
            }
            if (requestParameters.timeoutSeconds !== undefined) {
                queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
            }
            if (requestParameters.watch !== undefined) {
                queryParameters['watch'] = requestParameters.watch;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/api/v1/namespaces/{namespace}/endpoints`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.V1EndpointsListFromJSON(jsonValue));
        });
    }
    /**
     * list or watch objects of kind Endpoints
     */
    listNamespacedEndpoints(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.listNamespacedEndpointsRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * list or watch objects of kind Event
     */
    listNamespacedEventRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                throw new runtime.RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling listNamespacedEvent.');
            }
            const queryParameters = {};
            if (requestParameters.pretty !== undefined) {
                queryParameters['pretty'] = requestParameters.pretty;
            }
            if (requestParameters.allowWatchBookmarks !== undefined) {
                queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
            }
            if (requestParameters._continue !== undefined) {
                queryParameters['continue'] = requestParameters._continue;
            }
            if (requestParameters.fieldSelector !== undefined) {
                queryParameters['fieldSelector'] = requestParameters.fieldSelector;
            }
            if (requestParameters.labelSelector !== undefined) {
                queryParameters['labelSelector'] = requestParameters.labelSelector;
            }
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.resourceVersion !== undefined) {
                queryParameters['resourceVersion'] = requestParameters.resourceVersion;
            }
            if (requestParameters.resourceVersionMatch !== undefined) {
                queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
            }
            if (requestParameters.timeoutSeconds !== undefined) {
                queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
            }
            if (requestParameters.watch !== undefined) {
                queryParameters['watch'] = requestParameters.watch;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/api/v1/namespaces/{namespace}/events`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.CoreV1EventListFromJSON(jsonValue));
        });
    }
    /**
     * list or watch objects of kind Event
     */
    listNamespacedEvent(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.listNamespacedEventRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * list or watch objects of kind LimitRange
     */
    listNamespacedLimitRangeRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                throw new runtime.RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling listNamespacedLimitRange.');
            }
            const queryParameters = {};
            if (requestParameters.pretty !== undefined) {
                queryParameters['pretty'] = requestParameters.pretty;
            }
            if (requestParameters.allowWatchBookmarks !== undefined) {
                queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
            }
            if (requestParameters._continue !== undefined) {
                queryParameters['continue'] = requestParameters._continue;
            }
            if (requestParameters.fieldSelector !== undefined) {
                queryParameters['fieldSelector'] = requestParameters.fieldSelector;
            }
            if (requestParameters.labelSelector !== undefined) {
                queryParameters['labelSelector'] = requestParameters.labelSelector;
            }
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.resourceVersion !== undefined) {
                queryParameters['resourceVersion'] = requestParameters.resourceVersion;
            }
            if (requestParameters.resourceVersionMatch !== undefined) {
                queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
            }
            if (requestParameters.timeoutSeconds !== undefined) {
                queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
            }
            if (requestParameters.watch !== undefined) {
                queryParameters['watch'] = requestParameters.watch;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/api/v1/namespaces/{namespace}/limitranges`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.V1LimitRangeListFromJSON(jsonValue));
        });
    }
    /**
     * list or watch objects of kind LimitRange
     */
    listNamespacedLimitRange(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.listNamespacedLimitRangeRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * list or watch objects of kind PersistentVolumeClaim
     */
    listNamespacedPersistentVolumeClaimRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                throw new runtime.RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling listNamespacedPersistentVolumeClaim.');
            }
            const queryParameters = {};
            if (requestParameters.pretty !== undefined) {
                queryParameters['pretty'] = requestParameters.pretty;
            }
            if (requestParameters.allowWatchBookmarks !== undefined) {
                queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
            }
            if (requestParameters._continue !== undefined) {
                queryParameters['continue'] = requestParameters._continue;
            }
            if (requestParameters.fieldSelector !== undefined) {
                queryParameters['fieldSelector'] = requestParameters.fieldSelector;
            }
            if (requestParameters.labelSelector !== undefined) {
                queryParameters['labelSelector'] = requestParameters.labelSelector;
            }
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.resourceVersion !== undefined) {
                queryParameters['resourceVersion'] = requestParameters.resourceVersion;
            }
            if (requestParameters.resourceVersionMatch !== undefined) {
                queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
            }
            if (requestParameters.timeoutSeconds !== undefined) {
                queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
            }
            if (requestParameters.watch !== undefined) {
                queryParameters['watch'] = requestParameters.watch;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/api/v1/namespaces/{namespace}/persistentvolumeclaims`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.V1PersistentVolumeClaimListFromJSON(jsonValue));
        });
    }
    /**
     * list or watch objects of kind PersistentVolumeClaim
     */
    listNamespacedPersistentVolumeClaim(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.listNamespacedPersistentVolumeClaimRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * list or watch objects of kind Pod
     */
    listNamespacedPodRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                throw new runtime.RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling listNamespacedPod.');
            }
            const queryParameters = {};
            if (requestParameters.pretty !== undefined) {
                queryParameters['pretty'] = requestParameters.pretty;
            }
            if (requestParameters.allowWatchBookmarks !== undefined) {
                queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
            }
            if (requestParameters._continue !== undefined) {
                queryParameters['continue'] = requestParameters._continue;
            }
            if (requestParameters.fieldSelector !== undefined) {
                queryParameters['fieldSelector'] = requestParameters.fieldSelector;
            }
            if (requestParameters.labelSelector !== undefined) {
                queryParameters['labelSelector'] = requestParameters.labelSelector;
            }
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.resourceVersion !== undefined) {
                queryParameters['resourceVersion'] = requestParameters.resourceVersion;
            }
            if (requestParameters.resourceVersionMatch !== undefined) {
                queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
            }
            if (requestParameters.timeoutSeconds !== undefined) {
                queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
            }
            if (requestParameters.watch !== undefined) {
                queryParameters['watch'] = requestParameters.watch;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/api/v1/namespaces/{namespace}/pods`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.V1PodListFromJSON(jsonValue));
        });
    }
    /**
     * list or watch objects of kind Pod
     */
    listNamespacedPod(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.listNamespacedPodRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * list or watch objects of kind PodTemplate
     */
    listNamespacedPodTemplateRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                throw new runtime.RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling listNamespacedPodTemplate.');
            }
            const queryParameters = {};
            if (requestParameters.pretty !== undefined) {
                queryParameters['pretty'] = requestParameters.pretty;
            }
            if (requestParameters.allowWatchBookmarks !== undefined) {
                queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
            }
            if (requestParameters._continue !== undefined) {
                queryParameters['continue'] = requestParameters._continue;
            }
            if (requestParameters.fieldSelector !== undefined) {
                queryParameters['fieldSelector'] = requestParameters.fieldSelector;
            }
            if (requestParameters.labelSelector !== undefined) {
                queryParameters['labelSelector'] = requestParameters.labelSelector;
            }
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.resourceVersion !== undefined) {
                queryParameters['resourceVersion'] = requestParameters.resourceVersion;
            }
            if (requestParameters.resourceVersionMatch !== undefined) {
                queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
            }
            if (requestParameters.timeoutSeconds !== undefined) {
                queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
            }
            if (requestParameters.watch !== undefined) {
                queryParameters['watch'] = requestParameters.watch;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/api/v1/namespaces/{namespace}/podtemplates`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.V1PodTemplateListFromJSON(jsonValue));
        });
    }
    /**
     * list or watch objects of kind PodTemplate
     */
    listNamespacedPodTemplate(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.listNamespacedPodTemplateRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * list or watch objects of kind ReplicationController
     */
    listNamespacedReplicationControllerRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                throw new runtime.RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling listNamespacedReplicationController.');
            }
            const queryParameters = {};
            if (requestParameters.pretty !== undefined) {
                queryParameters['pretty'] = requestParameters.pretty;
            }
            if (requestParameters.allowWatchBookmarks !== undefined) {
                queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
            }
            if (requestParameters._continue !== undefined) {
                queryParameters['continue'] = requestParameters._continue;
            }
            if (requestParameters.fieldSelector !== undefined) {
                queryParameters['fieldSelector'] = requestParameters.fieldSelector;
            }
            if (requestParameters.labelSelector !== undefined) {
                queryParameters['labelSelector'] = requestParameters.labelSelector;
            }
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.resourceVersion !== undefined) {
                queryParameters['resourceVersion'] = requestParameters.resourceVersion;
            }
            if (requestParameters.resourceVersionMatch !== undefined) {
                queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
            }
            if (requestParameters.timeoutSeconds !== undefined) {
                queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
            }
            if (requestParameters.watch !== undefined) {
                queryParameters['watch'] = requestParameters.watch;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/api/v1/namespaces/{namespace}/replicationcontrollers`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.V1ReplicationControllerListFromJSON(jsonValue));
        });
    }
    /**
     * list or watch objects of kind ReplicationController
     */
    listNamespacedReplicationController(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.listNamespacedReplicationControllerRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * list or watch objects of kind ResourceQuota
     */
    listNamespacedResourceQuotaRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                throw new runtime.RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling listNamespacedResourceQuota.');
            }
            const queryParameters = {};
            if (requestParameters.pretty !== undefined) {
                queryParameters['pretty'] = requestParameters.pretty;
            }
            if (requestParameters.allowWatchBookmarks !== undefined) {
                queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
            }
            if (requestParameters._continue !== undefined) {
                queryParameters['continue'] = requestParameters._continue;
            }
            if (requestParameters.fieldSelector !== undefined) {
                queryParameters['fieldSelector'] = requestParameters.fieldSelector;
            }
            if (requestParameters.labelSelector !== undefined) {
                queryParameters['labelSelector'] = requestParameters.labelSelector;
            }
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.resourceVersion !== undefined) {
                queryParameters['resourceVersion'] = requestParameters.resourceVersion;
            }
            if (requestParameters.resourceVersionMatch !== undefined) {
                queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
            }
            if (requestParameters.timeoutSeconds !== undefined) {
                queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
            }
            if (requestParameters.watch !== undefined) {
                queryParameters['watch'] = requestParameters.watch;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/api/v1/namespaces/{namespace}/resourcequotas`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.V1ResourceQuotaListFromJSON(jsonValue));
        });
    }
    /**
     * list or watch objects of kind ResourceQuota
     */
    listNamespacedResourceQuota(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.listNamespacedResourceQuotaRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * list or watch objects of kind Secret
     */
    listNamespacedSecretRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                throw new runtime.RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling listNamespacedSecret.');
            }
            const queryParameters = {};
            if (requestParameters.pretty !== undefined) {
                queryParameters['pretty'] = requestParameters.pretty;
            }
            if (requestParameters.allowWatchBookmarks !== undefined) {
                queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
            }
            if (requestParameters._continue !== undefined) {
                queryParameters['continue'] = requestParameters._continue;
            }
            if (requestParameters.fieldSelector !== undefined) {
                queryParameters['fieldSelector'] = requestParameters.fieldSelector;
            }
            if (requestParameters.labelSelector !== undefined) {
                queryParameters['labelSelector'] = requestParameters.labelSelector;
            }
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.resourceVersion !== undefined) {
                queryParameters['resourceVersion'] = requestParameters.resourceVersion;
            }
            if (requestParameters.resourceVersionMatch !== undefined) {
                queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
            }
            if (requestParameters.timeoutSeconds !== undefined) {
                queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
            }
            if (requestParameters.watch !== undefined) {
                queryParameters['watch'] = requestParameters.watch;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/api/v1/namespaces/{namespace}/secrets`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.V1SecretListFromJSON(jsonValue));
        });
    }
    /**
     * list or watch objects of kind Secret
     */
    listNamespacedSecret(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.listNamespacedSecretRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * list or watch objects of kind Service
     */
    listNamespacedServiceRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                throw new runtime.RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling listNamespacedService.');
            }
            const queryParameters = {};
            if (requestParameters.pretty !== undefined) {
                queryParameters['pretty'] = requestParameters.pretty;
            }
            if (requestParameters.allowWatchBookmarks !== undefined) {
                queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
            }
            if (requestParameters._continue !== undefined) {
                queryParameters['continue'] = requestParameters._continue;
            }
            if (requestParameters.fieldSelector !== undefined) {
                queryParameters['fieldSelector'] = requestParameters.fieldSelector;
            }
            if (requestParameters.labelSelector !== undefined) {
                queryParameters['labelSelector'] = requestParameters.labelSelector;
            }
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.resourceVersion !== undefined) {
                queryParameters['resourceVersion'] = requestParameters.resourceVersion;
            }
            if (requestParameters.resourceVersionMatch !== undefined) {
                queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
            }
            if (requestParameters.timeoutSeconds !== undefined) {
                queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
            }
            if (requestParameters.watch !== undefined) {
                queryParameters['watch'] = requestParameters.watch;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/api/v1/namespaces/{namespace}/services`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.V1ServiceListFromJSON(jsonValue));
        });
    }
    /**
     * list or watch objects of kind Service
     */
    listNamespacedService(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.listNamespacedServiceRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * list or watch objects of kind ServiceAccount
     */
    listNamespacedServiceAccountRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                throw new runtime.RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling listNamespacedServiceAccount.');
            }
            const queryParameters = {};
            if (requestParameters.pretty !== undefined) {
                queryParameters['pretty'] = requestParameters.pretty;
            }
            if (requestParameters.allowWatchBookmarks !== undefined) {
                queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
            }
            if (requestParameters._continue !== undefined) {
                queryParameters['continue'] = requestParameters._continue;
            }
            if (requestParameters.fieldSelector !== undefined) {
                queryParameters['fieldSelector'] = requestParameters.fieldSelector;
            }
            if (requestParameters.labelSelector !== undefined) {
                queryParameters['labelSelector'] = requestParameters.labelSelector;
            }
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.resourceVersion !== undefined) {
                queryParameters['resourceVersion'] = requestParameters.resourceVersion;
            }
            if (requestParameters.resourceVersionMatch !== undefined) {
                queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
            }
            if (requestParameters.timeoutSeconds !== undefined) {
                queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
            }
            if (requestParameters.watch !== undefined) {
                queryParameters['watch'] = requestParameters.watch;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/api/v1/namespaces/{namespace}/serviceaccounts`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.V1ServiceAccountListFromJSON(jsonValue));
        });
    }
    /**
     * list or watch objects of kind ServiceAccount
     */
    listNamespacedServiceAccount(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.listNamespacedServiceAccountRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * list or watch objects of kind Node
     */
    listNodeRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.pretty !== undefined) {
                queryParameters['pretty'] = requestParameters.pretty;
            }
            if (requestParameters.allowWatchBookmarks !== undefined) {
                queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
            }
            if (requestParameters._continue !== undefined) {
                queryParameters['continue'] = requestParameters._continue;
            }
            if (requestParameters.fieldSelector !== undefined) {
                queryParameters['fieldSelector'] = requestParameters.fieldSelector;
            }
            if (requestParameters.labelSelector !== undefined) {
                queryParameters['labelSelector'] = requestParameters.labelSelector;
            }
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.resourceVersion !== undefined) {
                queryParameters['resourceVersion'] = requestParameters.resourceVersion;
            }
            if (requestParameters.resourceVersionMatch !== undefined) {
                queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
            }
            if (requestParameters.timeoutSeconds !== undefined) {
                queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
            }
            if (requestParameters.watch !== undefined) {
                queryParameters['watch'] = requestParameters.watch;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/api/v1/nodes`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.V1NodeListFromJSON(jsonValue));
        });
    }
    /**
     * list or watch objects of kind Node
     */
    listNode(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.listNodeRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * list or watch objects of kind PersistentVolume
     */
    listPersistentVolumeRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.pretty !== undefined) {
                queryParameters['pretty'] = requestParameters.pretty;
            }
            if (requestParameters.allowWatchBookmarks !== undefined) {
                queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
            }
            if (requestParameters._continue !== undefined) {
                queryParameters['continue'] = requestParameters._continue;
            }
            if (requestParameters.fieldSelector !== undefined) {
                queryParameters['fieldSelector'] = requestParameters.fieldSelector;
            }
            if (requestParameters.labelSelector !== undefined) {
                queryParameters['labelSelector'] = requestParameters.labelSelector;
            }
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.resourceVersion !== undefined) {
                queryParameters['resourceVersion'] = requestParameters.resourceVersion;
            }
            if (requestParameters.resourceVersionMatch !== undefined) {
                queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
            }
            if (requestParameters.timeoutSeconds !== undefined) {
                queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
            }
            if (requestParameters.watch !== undefined) {
                queryParameters['watch'] = requestParameters.watch;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/api/v1/persistentvolumes`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.V1PersistentVolumeListFromJSON(jsonValue));
        });
    }
    /**
     * list or watch objects of kind PersistentVolume
     */
    listPersistentVolume(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.listPersistentVolumeRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * list or watch objects of kind PersistentVolumeClaim
     */
    listPersistentVolumeClaimForAllNamespacesRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.allowWatchBookmarks !== undefined) {
                queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
            }
            if (requestParameters._continue !== undefined) {
                queryParameters['continue'] = requestParameters._continue;
            }
            if (requestParameters.fieldSelector !== undefined) {
                queryParameters['fieldSelector'] = requestParameters.fieldSelector;
            }
            if (requestParameters.labelSelector !== undefined) {
                queryParameters['labelSelector'] = requestParameters.labelSelector;
            }
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.pretty !== undefined) {
                queryParameters['pretty'] = requestParameters.pretty;
            }
            if (requestParameters.resourceVersion !== undefined) {
                queryParameters['resourceVersion'] = requestParameters.resourceVersion;
            }
            if (requestParameters.resourceVersionMatch !== undefined) {
                queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
            }
            if (requestParameters.timeoutSeconds !== undefined) {
                queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
            }
            if (requestParameters.watch !== undefined) {
                queryParameters['watch'] = requestParameters.watch;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/api/v1/persistentvolumeclaims`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.V1PersistentVolumeClaimListFromJSON(jsonValue));
        });
    }
    /**
     * list or watch objects of kind PersistentVolumeClaim
     */
    listPersistentVolumeClaimForAllNamespaces(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.listPersistentVolumeClaimForAllNamespacesRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * list or watch objects of kind Pod
     */
    listPodForAllNamespacesRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.allowWatchBookmarks !== undefined) {
                queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
            }
            if (requestParameters._continue !== undefined) {
                queryParameters['continue'] = requestParameters._continue;
            }
            if (requestParameters.fieldSelector !== undefined) {
                queryParameters['fieldSelector'] = requestParameters.fieldSelector;
            }
            if (requestParameters.labelSelector !== undefined) {
                queryParameters['labelSelector'] = requestParameters.labelSelector;
            }
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.pretty !== undefined) {
                queryParameters['pretty'] = requestParameters.pretty;
            }
            if (requestParameters.resourceVersion !== undefined) {
                queryParameters['resourceVersion'] = requestParameters.resourceVersion;
            }
            if (requestParameters.resourceVersionMatch !== undefined) {
                queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
            }
            if (requestParameters.timeoutSeconds !== undefined) {
                queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
            }
            if (requestParameters.watch !== undefined) {
                queryParameters['watch'] = requestParameters.watch;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/api/v1/pods`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.V1PodListFromJSON(jsonValue));
        });
    }
    /**
     * list or watch objects of kind Pod
     */
    listPodForAllNamespaces(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.listPodForAllNamespacesRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * list or watch objects of kind PodTemplate
     */
    listPodTemplateForAllNamespacesRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.allowWatchBookmarks !== undefined) {
                queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
            }
            if (requestParameters._continue !== undefined) {
                queryParameters['continue'] = requestParameters._continue;
            }
            if (requestParameters.fieldSelector !== undefined) {
                queryParameters['fieldSelector'] = requestParameters.fieldSelector;
            }
            if (requestParameters.labelSelector !== undefined) {
                queryParameters['labelSelector'] = requestParameters.labelSelector;
            }
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.pretty !== undefined) {
                queryParameters['pretty'] = requestParameters.pretty;
            }
            if (requestParameters.resourceVersion !== undefined) {
                queryParameters['resourceVersion'] = requestParameters.resourceVersion;
            }
            if (requestParameters.resourceVersionMatch !== undefined) {
                queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
            }
            if (requestParameters.timeoutSeconds !== undefined) {
                queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
            }
            if (requestParameters.watch !== undefined) {
                queryParameters['watch'] = requestParameters.watch;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/api/v1/podtemplates`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.V1PodTemplateListFromJSON(jsonValue));
        });
    }
    /**
     * list or watch objects of kind PodTemplate
     */
    listPodTemplateForAllNamespaces(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.listPodTemplateForAllNamespacesRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * list or watch objects of kind ReplicationController
     */
    listReplicationControllerForAllNamespacesRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.allowWatchBookmarks !== undefined) {
                queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
            }
            if (requestParameters._continue !== undefined) {
                queryParameters['continue'] = requestParameters._continue;
            }
            if (requestParameters.fieldSelector !== undefined) {
                queryParameters['fieldSelector'] = requestParameters.fieldSelector;
            }
            if (requestParameters.labelSelector !== undefined) {
                queryParameters['labelSelector'] = requestParameters.labelSelector;
            }
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.pretty !== undefined) {
                queryParameters['pretty'] = requestParameters.pretty;
            }
            if (requestParameters.resourceVersion !== undefined) {
                queryParameters['resourceVersion'] = requestParameters.resourceVersion;
            }
            if (requestParameters.resourceVersionMatch !== undefined) {
                queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
            }
            if (requestParameters.timeoutSeconds !== undefined) {
                queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
            }
            if (requestParameters.watch !== undefined) {
                queryParameters['watch'] = requestParameters.watch;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/api/v1/replicationcontrollers`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.V1ReplicationControllerListFromJSON(jsonValue));
        });
    }
    /**
     * list or watch objects of kind ReplicationController
     */
    listReplicationControllerForAllNamespaces(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.listReplicationControllerForAllNamespacesRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * list or watch objects of kind ResourceQuota
     */
    listResourceQuotaForAllNamespacesRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.allowWatchBookmarks !== undefined) {
                queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
            }
            if (requestParameters._continue !== undefined) {
                queryParameters['continue'] = requestParameters._continue;
            }
            if (requestParameters.fieldSelector !== undefined) {
                queryParameters['fieldSelector'] = requestParameters.fieldSelector;
            }
            if (requestParameters.labelSelector !== undefined) {
                queryParameters['labelSelector'] = requestParameters.labelSelector;
            }
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.pretty !== undefined) {
                queryParameters['pretty'] = requestParameters.pretty;
            }
            if (requestParameters.resourceVersion !== undefined) {
                queryParameters['resourceVersion'] = requestParameters.resourceVersion;
            }
            if (requestParameters.resourceVersionMatch !== undefined) {
                queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
            }
            if (requestParameters.timeoutSeconds !== undefined) {
                queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
            }
            if (requestParameters.watch !== undefined) {
                queryParameters['watch'] = requestParameters.watch;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/api/v1/resourcequotas`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.V1ResourceQuotaListFromJSON(jsonValue));
        });
    }
    /**
     * list or watch objects of kind ResourceQuota
     */
    listResourceQuotaForAllNamespaces(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.listResourceQuotaForAllNamespacesRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * list or watch objects of kind Secret
     */
    listSecretForAllNamespacesRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.allowWatchBookmarks !== undefined) {
                queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
            }
            if (requestParameters._continue !== undefined) {
                queryParameters['continue'] = requestParameters._continue;
            }
            if (requestParameters.fieldSelector !== undefined) {
                queryParameters['fieldSelector'] = requestParameters.fieldSelector;
            }
            if (requestParameters.labelSelector !== undefined) {
                queryParameters['labelSelector'] = requestParameters.labelSelector;
            }
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.pretty !== undefined) {
                queryParameters['pretty'] = requestParameters.pretty;
            }
            if (requestParameters.resourceVersion !== undefined) {
                queryParameters['resourceVersion'] = requestParameters.resourceVersion;
            }
            if (requestParameters.resourceVersionMatch !== undefined) {
                queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
            }
            if (requestParameters.timeoutSeconds !== undefined) {
                queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
            }
            if (requestParameters.watch !== undefined) {
                queryParameters['watch'] = requestParameters.watch;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/api/v1/secrets`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.V1SecretListFromJSON(jsonValue));
        });
    }
    /**
     * list or watch objects of kind Secret
     */
    listSecretForAllNamespaces(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.listSecretForAllNamespacesRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * list or watch objects of kind ServiceAccount
     */
    listServiceAccountForAllNamespacesRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.allowWatchBookmarks !== undefined) {
                queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
            }
            if (requestParameters._continue !== undefined) {
                queryParameters['continue'] = requestParameters._continue;
            }
            if (requestParameters.fieldSelector !== undefined) {
                queryParameters['fieldSelector'] = requestParameters.fieldSelector;
            }
            if (requestParameters.labelSelector !== undefined) {
                queryParameters['labelSelector'] = requestParameters.labelSelector;
            }
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.pretty !== undefined) {
                queryParameters['pretty'] = requestParameters.pretty;
            }
            if (requestParameters.resourceVersion !== undefined) {
                queryParameters['resourceVersion'] = requestParameters.resourceVersion;
            }
            if (requestParameters.resourceVersionMatch !== undefined) {
                queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
            }
            if (requestParameters.timeoutSeconds !== undefined) {
                queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
            }
            if (requestParameters.watch !== undefined) {
                queryParameters['watch'] = requestParameters.watch;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/api/v1/serviceaccounts`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.V1ServiceAccountListFromJSON(jsonValue));
        });
    }
    /**
     * list or watch objects of kind ServiceAccount
     */
    listServiceAccountForAllNamespaces(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.listServiceAccountForAllNamespacesRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * list or watch objects of kind Service
     */
    listServiceForAllNamespacesRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.allowWatchBookmarks !== undefined) {
                queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
            }
            if (requestParameters._continue !== undefined) {
                queryParameters['continue'] = requestParameters._continue;
            }
            if (requestParameters.fieldSelector !== undefined) {
                queryParameters['fieldSelector'] = requestParameters.fieldSelector;
            }
            if (requestParameters.labelSelector !== undefined) {
                queryParameters['labelSelector'] = requestParameters.labelSelector;
            }
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.pretty !== undefined) {
                queryParameters['pretty'] = requestParameters.pretty;
            }
            if (requestParameters.resourceVersion !== undefined) {
                queryParameters['resourceVersion'] = requestParameters.resourceVersion;
            }
            if (requestParameters.resourceVersionMatch !== undefined) {
                queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
            }
            if (requestParameters.timeoutSeconds !== undefined) {
                queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
            }
            if (requestParameters.watch !== undefined) {
                queryParameters['watch'] = requestParameters.watch;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/api/v1/services`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.V1ServiceListFromJSON(jsonValue));
        });
    }
    /**
     * list or watch objects of kind Service
     */
    listServiceForAllNamespaces(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.listServiceForAllNamespacesRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * partially update the specified Namespace
     */
    patchNamespaceRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.name === null || requestParameters.name === undefined) {
                throw new runtime.RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling patchNamespace.');
            }
            if (requestParameters.body === null || requestParameters.body === undefined) {
                throw new runtime.RequiredError('body', 'Required parameter requestParameters.body was null or undefined when calling patchNamespace.');
            }
            const queryParameters = {};
            if (requestParameters.pretty !== undefined) {
                queryParameters['pretty'] = requestParameters.pretty;
            }
            if (requestParameters.dryRun !== undefined) {
                queryParameters['dryRun'] = requestParameters.dryRun;
            }
            if (requestParameters.fieldManager !== undefined) {
                queryParameters['fieldManager'] = requestParameters.fieldManager;
            }
            if (requestParameters.fieldValidation !== undefined) {
                queryParameters['fieldValidation'] = requestParameters.fieldValidation;
            }
            if (requestParameters.force !== undefined) {
                queryParameters['force'] = requestParameters.force;
            }
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json-patch+json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/api/v1/namespaces/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
                method: 'PATCH',
                headers: headerParameters,
                query: queryParameters,
                body: requestParameters.body,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.V1NamespaceFromJSON(jsonValue));
        });
    }
    /**
     * partially update the specified Namespace
     */
    patchNamespace(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.patchNamespaceRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * partially update status of the specified Namespace
     */
    patchNamespaceStatusRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.name === null || requestParameters.name === undefined) {
                throw new runtime.RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling patchNamespaceStatus.');
            }
            if (requestParameters.body === null || requestParameters.body === undefined) {
                throw new runtime.RequiredError('body', 'Required parameter requestParameters.body was null or undefined when calling patchNamespaceStatus.');
            }
            const queryParameters = {};
            if (requestParameters.pretty !== undefined) {
                queryParameters['pretty'] = requestParameters.pretty;
            }
            if (requestParameters.dryRun !== undefined) {
                queryParameters['dryRun'] = requestParameters.dryRun;
            }
            if (requestParameters.fieldManager !== undefined) {
                queryParameters['fieldManager'] = requestParameters.fieldManager;
            }
            if (requestParameters.fieldValidation !== undefined) {
                queryParameters['fieldValidation'] = requestParameters.fieldValidation;
            }
            if (requestParameters.force !== undefined) {
                queryParameters['force'] = requestParameters.force;
            }
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json-patch+json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/api/v1/namespaces/{name}/status`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
                method: 'PATCH',
                headers: headerParameters,
                query: queryParameters,
                body: requestParameters.body,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.V1NamespaceFromJSON(jsonValue));
        });
    }
    /**
     * partially update status of the specified Namespace
     */
    patchNamespaceStatus(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.patchNamespaceStatusRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * partially update the specified ConfigMap
     */
    patchNamespacedConfigMapRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.name === null || requestParameters.name === undefined) {
                throw new runtime.RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling patchNamespacedConfigMap.');
            }
            if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                throw new runtime.RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling patchNamespacedConfigMap.');
            }
            if (requestParameters.body === null || requestParameters.body === undefined) {
                throw new runtime.RequiredError('body', 'Required parameter requestParameters.body was null or undefined when calling patchNamespacedConfigMap.');
            }
            const queryParameters = {};
            if (requestParameters.pretty !== undefined) {
                queryParameters['pretty'] = requestParameters.pretty;
            }
            if (requestParameters.dryRun !== undefined) {
                queryParameters['dryRun'] = requestParameters.dryRun;
            }
            if (requestParameters.fieldManager !== undefined) {
                queryParameters['fieldManager'] = requestParameters.fieldManager;
            }
            if (requestParameters.fieldValidation !== undefined) {
                queryParameters['fieldValidation'] = requestParameters.fieldValidation;
            }
            if (requestParameters.force !== undefined) {
                queryParameters['force'] = requestParameters.force;
            }
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json-patch+json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/api/v1/namespaces/{namespace}/configmaps/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
                method: 'PATCH',
                headers: headerParameters,
                query: queryParameters,
                body: requestParameters.body,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.V1ConfigMapFromJSON(jsonValue));
        });
    }
    /**
     * partially update the specified ConfigMap
     */
    patchNamespacedConfigMap(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.patchNamespacedConfigMapRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * partially update the specified Endpoints
     */
    patchNamespacedEndpointsRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.name === null || requestParameters.name === undefined) {
                throw new runtime.RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling patchNamespacedEndpoints.');
            }
            if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                throw new runtime.RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling patchNamespacedEndpoints.');
            }
            if (requestParameters.body === null || requestParameters.body === undefined) {
                throw new runtime.RequiredError('body', 'Required parameter requestParameters.body was null or undefined when calling patchNamespacedEndpoints.');
            }
            const queryParameters = {};
            if (requestParameters.pretty !== undefined) {
                queryParameters['pretty'] = requestParameters.pretty;
            }
            if (requestParameters.dryRun !== undefined) {
                queryParameters['dryRun'] = requestParameters.dryRun;
            }
            if (requestParameters.fieldManager !== undefined) {
                queryParameters['fieldManager'] = requestParameters.fieldManager;
            }
            if (requestParameters.fieldValidation !== undefined) {
                queryParameters['fieldValidation'] = requestParameters.fieldValidation;
            }
            if (requestParameters.force !== undefined) {
                queryParameters['force'] = requestParameters.force;
            }
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json-patch+json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/api/v1/namespaces/{namespace}/endpoints/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
                method: 'PATCH',
                headers: headerParameters,
                query: queryParameters,
                body: requestParameters.body,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.V1EndpointsFromJSON(jsonValue));
        });
    }
    /**
     * partially update the specified Endpoints
     */
    patchNamespacedEndpoints(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.patchNamespacedEndpointsRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * partially update the specified Event
     */
    patchNamespacedEventRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.name === null || requestParameters.name === undefined) {
                throw new runtime.RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling patchNamespacedEvent.');
            }
            if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                throw new runtime.RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling patchNamespacedEvent.');
            }
            if (requestParameters.body === null || requestParameters.body === undefined) {
                throw new runtime.RequiredError('body', 'Required parameter requestParameters.body was null or undefined when calling patchNamespacedEvent.');
            }
            const queryParameters = {};
            if (requestParameters.pretty !== undefined) {
                queryParameters['pretty'] = requestParameters.pretty;
            }
            if (requestParameters.dryRun !== undefined) {
                queryParameters['dryRun'] = requestParameters.dryRun;
            }
            if (requestParameters.fieldManager !== undefined) {
                queryParameters['fieldManager'] = requestParameters.fieldManager;
            }
            if (requestParameters.fieldValidation !== undefined) {
                queryParameters['fieldValidation'] = requestParameters.fieldValidation;
            }
            if (requestParameters.force !== undefined) {
                queryParameters['force'] = requestParameters.force;
            }
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json-patch+json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/api/v1/namespaces/{namespace}/events/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
                method: 'PATCH',
                headers: headerParameters,
                query: queryParameters,
                body: requestParameters.body,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.CoreV1EventFromJSON(jsonValue));
        });
    }
    /**
     * partially update the specified Event
     */
    patchNamespacedEvent(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.patchNamespacedEventRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * partially update the specified LimitRange
     */
    patchNamespacedLimitRangeRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.name === null || requestParameters.name === undefined) {
                throw new runtime.RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling patchNamespacedLimitRange.');
            }
            if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                throw new runtime.RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling patchNamespacedLimitRange.');
            }
            if (requestParameters.body === null || requestParameters.body === undefined) {
                throw new runtime.RequiredError('body', 'Required parameter requestParameters.body was null or undefined when calling patchNamespacedLimitRange.');
            }
            const queryParameters = {};
            if (requestParameters.pretty !== undefined) {
                queryParameters['pretty'] = requestParameters.pretty;
            }
            if (requestParameters.dryRun !== undefined) {
                queryParameters['dryRun'] = requestParameters.dryRun;
            }
            if (requestParameters.fieldManager !== undefined) {
                queryParameters['fieldManager'] = requestParameters.fieldManager;
            }
            if (requestParameters.fieldValidation !== undefined) {
                queryParameters['fieldValidation'] = requestParameters.fieldValidation;
            }
            if (requestParameters.force !== undefined) {
                queryParameters['force'] = requestParameters.force;
            }
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json-patch+json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/api/v1/namespaces/{namespace}/limitranges/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
                method: 'PATCH',
                headers: headerParameters,
                query: queryParameters,
                body: requestParameters.body,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.V1LimitRangeFromJSON(jsonValue));
        });
    }
    /**
     * partially update the specified LimitRange
     */
    patchNamespacedLimitRange(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.patchNamespacedLimitRangeRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * partially update the specified PersistentVolumeClaim
     */
    patchNamespacedPersistentVolumeClaimRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.name === null || requestParameters.name === undefined) {
                throw new runtime.RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling patchNamespacedPersistentVolumeClaim.');
            }
            if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                throw new runtime.RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling patchNamespacedPersistentVolumeClaim.');
            }
            if (requestParameters.body === null || requestParameters.body === undefined) {
                throw new runtime.RequiredError('body', 'Required parameter requestParameters.body was null or undefined when calling patchNamespacedPersistentVolumeClaim.');
            }
            const queryParameters = {};
            if (requestParameters.pretty !== undefined) {
                queryParameters['pretty'] = requestParameters.pretty;
            }
            if (requestParameters.dryRun !== undefined) {
                queryParameters['dryRun'] = requestParameters.dryRun;
            }
            if (requestParameters.fieldManager !== undefined) {
                queryParameters['fieldManager'] = requestParameters.fieldManager;
            }
            if (requestParameters.fieldValidation !== undefined) {
                queryParameters['fieldValidation'] = requestParameters.fieldValidation;
            }
            if (requestParameters.force !== undefined) {
                queryParameters['force'] = requestParameters.force;
            }
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json-patch+json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/api/v1/namespaces/{namespace}/persistentvolumeclaims/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
                method: 'PATCH',
                headers: headerParameters,
                query: queryParameters,
                body: requestParameters.body,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.V1PersistentVolumeClaimFromJSON(jsonValue));
        });
    }
    /**
     * partially update the specified PersistentVolumeClaim
     */
    patchNamespacedPersistentVolumeClaim(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.patchNamespacedPersistentVolumeClaimRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * partially update status of the specified PersistentVolumeClaim
     */
    patchNamespacedPersistentVolumeClaimStatusRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.name === null || requestParameters.name === undefined) {
                throw new runtime.RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling patchNamespacedPersistentVolumeClaimStatus.');
            }
            if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                throw new runtime.RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling patchNamespacedPersistentVolumeClaimStatus.');
            }
            if (requestParameters.body === null || requestParameters.body === undefined) {
                throw new runtime.RequiredError('body', 'Required parameter requestParameters.body was null or undefined when calling patchNamespacedPersistentVolumeClaimStatus.');
            }
            const queryParameters = {};
            if (requestParameters.pretty !== undefined) {
                queryParameters['pretty'] = requestParameters.pretty;
            }
            if (requestParameters.dryRun !== undefined) {
                queryParameters['dryRun'] = requestParameters.dryRun;
            }
            if (requestParameters.fieldManager !== undefined) {
                queryParameters['fieldManager'] = requestParameters.fieldManager;
            }
            if (requestParameters.fieldValidation !== undefined) {
                queryParameters['fieldValidation'] = requestParameters.fieldValidation;
            }
            if (requestParameters.force !== undefined) {
                queryParameters['force'] = requestParameters.force;
            }
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json-patch+json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/api/v1/namespaces/{namespace}/persistentvolumeclaims/{name}/status`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
                method: 'PATCH',
                headers: headerParameters,
                query: queryParameters,
                body: requestParameters.body,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.V1PersistentVolumeClaimFromJSON(jsonValue));
        });
    }
    /**
     * partially update status of the specified PersistentVolumeClaim
     */
    patchNamespacedPersistentVolumeClaimStatus(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.patchNamespacedPersistentVolumeClaimStatusRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * partially update the specified Pod
     */
    patchNamespacedPodRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.name === null || requestParameters.name === undefined) {
                throw new runtime.RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling patchNamespacedPod.');
            }
            if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                throw new runtime.RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling patchNamespacedPod.');
            }
            if (requestParameters.body === null || requestParameters.body === undefined) {
                throw new runtime.RequiredError('body', 'Required parameter requestParameters.body was null or undefined when calling patchNamespacedPod.');
            }
            const queryParameters = {};
            if (requestParameters.pretty !== undefined) {
                queryParameters['pretty'] = requestParameters.pretty;
            }
            if (requestParameters.dryRun !== undefined) {
                queryParameters['dryRun'] = requestParameters.dryRun;
            }
            if (requestParameters.fieldManager !== undefined) {
                queryParameters['fieldManager'] = requestParameters.fieldManager;
            }
            if (requestParameters.fieldValidation !== undefined) {
                queryParameters['fieldValidation'] = requestParameters.fieldValidation;
            }
            if (requestParameters.force !== undefined) {
                queryParameters['force'] = requestParameters.force;
            }
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json-patch+json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/api/v1/namespaces/{namespace}/pods/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
                method: 'PATCH',
                headers: headerParameters,
                query: queryParameters,
                body: requestParameters.body,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.V1PodFromJSON(jsonValue));
        });
    }
    /**
     * partially update the specified Pod
     */
    patchNamespacedPod(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.patchNamespacedPodRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * partially update ephemeralcontainers of the specified Pod
     */
    patchNamespacedPodEphemeralcontainersRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.name === null || requestParameters.name === undefined) {
                throw new runtime.RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling patchNamespacedPodEphemeralcontainers.');
            }
            if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                throw new runtime.RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling patchNamespacedPodEphemeralcontainers.');
            }
            if (requestParameters.body === null || requestParameters.body === undefined) {
                throw new runtime.RequiredError('body', 'Required parameter requestParameters.body was null or undefined when calling patchNamespacedPodEphemeralcontainers.');
            }
            const queryParameters = {};
            if (requestParameters.pretty !== undefined) {
                queryParameters['pretty'] = requestParameters.pretty;
            }
            if (requestParameters.dryRun !== undefined) {
                queryParameters['dryRun'] = requestParameters.dryRun;
            }
            if (requestParameters.fieldManager !== undefined) {
                queryParameters['fieldManager'] = requestParameters.fieldManager;
            }
            if (requestParameters.fieldValidation !== undefined) {
                queryParameters['fieldValidation'] = requestParameters.fieldValidation;
            }
            if (requestParameters.force !== undefined) {
                queryParameters['force'] = requestParameters.force;
            }
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json-patch+json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/api/v1/namespaces/{namespace}/pods/{name}/ephemeralcontainers`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
                method: 'PATCH',
                headers: headerParameters,
                query: queryParameters,
                body: requestParameters.body,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.V1PodFromJSON(jsonValue));
        });
    }
    /**
     * partially update ephemeralcontainers of the specified Pod
     */
    patchNamespacedPodEphemeralcontainers(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.patchNamespacedPodEphemeralcontainersRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * partially update status of the specified Pod
     */
    patchNamespacedPodStatusRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.name === null || requestParameters.name === undefined) {
                throw new runtime.RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling patchNamespacedPodStatus.');
            }
            if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                throw new runtime.RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling patchNamespacedPodStatus.');
            }
            if (requestParameters.body === null || requestParameters.body === undefined) {
                throw new runtime.RequiredError('body', 'Required parameter requestParameters.body was null or undefined when calling patchNamespacedPodStatus.');
            }
            const queryParameters = {};
            if (requestParameters.pretty !== undefined) {
                queryParameters['pretty'] = requestParameters.pretty;
            }
            if (requestParameters.dryRun !== undefined) {
                queryParameters['dryRun'] = requestParameters.dryRun;
            }
            if (requestParameters.fieldManager !== undefined) {
                queryParameters['fieldManager'] = requestParameters.fieldManager;
            }
            if (requestParameters.fieldValidation !== undefined) {
                queryParameters['fieldValidation'] = requestParameters.fieldValidation;
            }
            if (requestParameters.force !== undefined) {
                queryParameters['force'] = requestParameters.force;
            }
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json-patch+json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/api/v1/namespaces/{namespace}/pods/{name}/status`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
                method: 'PATCH',
                headers: headerParameters,
                query: queryParameters,
                body: requestParameters.body,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.V1PodFromJSON(jsonValue));
        });
    }
    /**
     * partially update status of the specified Pod
     */
    patchNamespacedPodStatus(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.patchNamespacedPodStatusRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * partially update the specified PodTemplate
     */
    patchNamespacedPodTemplateRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.name === null || requestParameters.name === undefined) {
                throw new runtime.RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling patchNamespacedPodTemplate.');
            }
            if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                throw new runtime.RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling patchNamespacedPodTemplate.');
            }
            if (requestParameters.body === null || requestParameters.body === undefined) {
                throw new runtime.RequiredError('body', 'Required parameter requestParameters.body was null or undefined when calling patchNamespacedPodTemplate.');
            }
            const queryParameters = {};
            if (requestParameters.pretty !== undefined) {
                queryParameters['pretty'] = requestParameters.pretty;
            }
            if (requestParameters.dryRun !== undefined) {
                queryParameters['dryRun'] = requestParameters.dryRun;
            }
            if (requestParameters.fieldManager !== undefined) {
                queryParameters['fieldManager'] = requestParameters.fieldManager;
            }
            if (requestParameters.fieldValidation !== undefined) {
                queryParameters['fieldValidation'] = requestParameters.fieldValidation;
            }
            if (requestParameters.force !== undefined) {
                queryParameters['force'] = requestParameters.force;
            }
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json-patch+json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/api/v1/namespaces/{namespace}/podtemplates/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
                method: 'PATCH',
                headers: headerParameters,
                query: queryParameters,
                body: requestParameters.body,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.V1PodTemplateFromJSON(jsonValue));
        });
    }
    /**
     * partially update the specified PodTemplate
     */
    patchNamespacedPodTemplate(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.patchNamespacedPodTemplateRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * partially update the specified ReplicationController
     */
    patchNamespacedReplicationControllerRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.name === null || requestParameters.name === undefined) {
                throw new runtime.RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling patchNamespacedReplicationController.');
            }
            if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                throw new runtime.RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling patchNamespacedReplicationController.');
            }
            if (requestParameters.body === null || requestParameters.body === undefined) {
                throw new runtime.RequiredError('body', 'Required parameter requestParameters.body was null or undefined when calling patchNamespacedReplicationController.');
            }
            const queryParameters = {};
            if (requestParameters.pretty !== undefined) {
                queryParameters['pretty'] = requestParameters.pretty;
            }
            if (requestParameters.dryRun !== undefined) {
                queryParameters['dryRun'] = requestParameters.dryRun;
            }
            if (requestParameters.fieldManager !== undefined) {
                queryParameters['fieldManager'] = requestParameters.fieldManager;
            }
            if (requestParameters.fieldValidation !== undefined) {
                queryParameters['fieldValidation'] = requestParameters.fieldValidation;
            }
            if (requestParameters.force !== undefined) {
                queryParameters['force'] = requestParameters.force;
            }
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json-patch+json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/api/v1/namespaces/{namespace}/replicationcontrollers/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
                method: 'PATCH',
                headers: headerParameters,
                query: queryParameters,
                body: requestParameters.body,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.V1ReplicationControllerFromJSON(jsonValue));
        });
    }
    /**
     * partially update the specified ReplicationController
     */
    patchNamespacedReplicationController(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.patchNamespacedReplicationControllerRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * partially update scale of the specified ReplicationController
     */
    patchNamespacedReplicationControllerScaleRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.name === null || requestParameters.name === undefined) {
                throw new runtime.RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling patchNamespacedReplicationControllerScale.');
            }
            if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                throw new runtime.RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling patchNamespacedReplicationControllerScale.');
            }
            if (requestParameters.body === null || requestParameters.body === undefined) {
                throw new runtime.RequiredError('body', 'Required parameter requestParameters.body was null or undefined when calling patchNamespacedReplicationControllerScale.');
            }
            const queryParameters = {};
            if (requestParameters.pretty !== undefined) {
                queryParameters['pretty'] = requestParameters.pretty;
            }
            if (requestParameters.dryRun !== undefined) {
                queryParameters['dryRun'] = requestParameters.dryRun;
            }
            if (requestParameters.fieldManager !== undefined) {
                queryParameters['fieldManager'] = requestParameters.fieldManager;
            }
            if (requestParameters.fieldValidation !== undefined) {
                queryParameters['fieldValidation'] = requestParameters.fieldValidation;
            }
            if (requestParameters.force !== undefined) {
                queryParameters['force'] = requestParameters.force;
            }
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json-patch+json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/api/v1/namespaces/{namespace}/replicationcontrollers/{name}/scale`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
                method: 'PATCH',
                headers: headerParameters,
                query: queryParameters,
                body: requestParameters.body,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.V1ScaleFromJSON(jsonValue));
        });
    }
    /**
     * partially update scale of the specified ReplicationController
     */
    patchNamespacedReplicationControllerScale(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.patchNamespacedReplicationControllerScaleRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * partially update status of the specified ReplicationController
     */
    patchNamespacedReplicationControllerStatusRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.name === null || requestParameters.name === undefined) {
                throw new runtime.RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling patchNamespacedReplicationControllerStatus.');
            }
            if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                throw new runtime.RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling patchNamespacedReplicationControllerStatus.');
            }
            if (requestParameters.body === null || requestParameters.body === undefined) {
                throw new runtime.RequiredError('body', 'Required parameter requestParameters.body was null or undefined when calling patchNamespacedReplicationControllerStatus.');
            }
            const queryParameters = {};
            if (requestParameters.pretty !== undefined) {
                queryParameters['pretty'] = requestParameters.pretty;
            }
            if (requestParameters.dryRun !== undefined) {
                queryParameters['dryRun'] = requestParameters.dryRun;
            }
            if (requestParameters.fieldManager !== undefined) {
                queryParameters['fieldManager'] = requestParameters.fieldManager;
            }
            if (requestParameters.fieldValidation !== undefined) {
                queryParameters['fieldValidation'] = requestParameters.fieldValidation;
            }
            if (requestParameters.force !== undefined) {
                queryParameters['force'] = requestParameters.force;
            }
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json-patch+json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/api/v1/namespaces/{namespace}/replicationcontrollers/{name}/status`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
                method: 'PATCH',
                headers: headerParameters,
                query: queryParameters,
                body: requestParameters.body,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.V1ReplicationControllerFromJSON(jsonValue));
        });
    }
    /**
     * partially update status of the specified ReplicationController
     */
    patchNamespacedReplicationControllerStatus(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.patchNamespacedReplicationControllerStatusRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * partially update the specified ResourceQuota
     */
    patchNamespacedResourceQuotaRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.name === null || requestParameters.name === undefined) {
                throw new runtime.RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling patchNamespacedResourceQuota.');
            }
            if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                throw new runtime.RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling patchNamespacedResourceQuota.');
            }
            if (requestParameters.body === null || requestParameters.body === undefined) {
                throw new runtime.RequiredError('body', 'Required parameter requestParameters.body was null or undefined when calling patchNamespacedResourceQuota.');
            }
            const queryParameters = {};
            if (requestParameters.pretty !== undefined) {
                queryParameters['pretty'] = requestParameters.pretty;
            }
            if (requestParameters.dryRun !== undefined) {
                queryParameters['dryRun'] = requestParameters.dryRun;
            }
            if (requestParameters.fieldManager !== undefined) {
                queryParameters['fieldManager'] = requestParameters.fieldManager;
            }
            if (requestParameters.fieldValidation !== undefined) {
                queryParameters['fieldValidation'] = requestParameters.fieldValidation;
            }
            if (requestParameters.force !== undefined) {
                queryParameters['force'] = requestParameters.force;
            }
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json-patch+json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/api/v1/namespaces/{namespace}/resourcequotas/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
                method: 'PATCH',
                headers: headerParameters,
                query: queryParameters,
                body: requestParameters.body,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.V1ResourceQuotaFromJSON(jsonValue));
        });
    }
    /**
     * partially update the specified ResourceQuota
     */
    patchNamespacedResourceQuota(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.patchNamespacedResourceQuotaRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * partially update status of the specified ResourceQuota
     */
    patchNamespacedResourceQuotaStatusRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.name === null || requestParameters.name === undefined) {
                throw new runtime.RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling patchNamespacedResourceQuotaStatus.');
            }
            if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                throw new runtime.RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling patchNamespacedResourceQuotaStatus.');
            }
            if (requestParameters.body === null || requestParameters.body === undefined) {
                throw new runtime.RequiredError('body', 'Required parameter requestParameters.body was null or undefined when calling patchNamespacedResourceQuotaStatus.');
            }
            const queryParameters = {};
            if (requestParameters.pretty !== undefined) {
                queryParameters['pretty'] = requestParameters.pretty;
            }
            if (requestParameters.dryRun !== undefined) {
                queryParameters['dryRun'] = requestParameters.dryRun;
            }
            if (requestParameters.fieldManager !== undefined) {
                queryParameters['fieldManager'] = requestParameters.fieldManager;
            }
            if (requestParameters.fieldValidation !== undefined) {
                queryParameters['fieldValidation'] = requestParameters.fieldValidation;
            }
            if (requestParameters.force !== undefined) {
                queryParameters['force'] = requestParameters.force;
            }
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json-patch+json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/api/v1/namespaces/{namespace}/resourcequotas/{name}/status`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
                method: 'PATCH',
                headers: headerParameters,
                query: queryParameters,
                body: requestParameters.body,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.V1ResourceQuotaFromJSON(jsonValue));
        });
    }
    /**
     * partially update status of the specified ResourceQuota
     */
    patchNamespacedResourceQuotaStatus(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.patchNamespacedResourceQuotaStatusRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * partially update the specified Secret
     */
    patchNamespacedSecretRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.name === null || requestParameters.name === undefined) {
                throw new runtime.RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling patchNamespacedSecret.');
            }
            if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                throw new runtime.RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling patchNamespacedSecret.');
            }
            if (requestParameters.body === null || requestParameters.body === undefined) {
                throw new runtime.RequiredError('body', 'Required parameter requestParameters.body was null or undefined when calling patchNamespacedSecret.');
            }
            const queryParameters = {};
            if (requestParameters.pretty !== undefined) {
                queryParameters['pretty'] = requestParameters.pretty;
            }
            if (requestParameters.dryRun !== undefined) {
                queryParameters['dryRun'] = requestParameters.dryRun;
            }
            if (requestParameters.fieldManager !== undefined) {
                queryParameters['fieldManager'] = requestParameters.fieldManager;
            }
            if (requestParameters.fieldValidation !== undefined) {
                queryParameters['fieldValidation'] = requestParameters.fieldValidation;
            }
            if (requestParameters.force !== undefined) {
                queryParameters['force'] = requestParameters.force;
            }
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json-patch+json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/api/v1/namespaces/{namespace}/secrets/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
                method: 'PATCH',
                headers: headerParameters,
                query: queryParameters,
                body: requestParameters.body,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.V1SecretFromJSON(jsonValue));
        });
    }
    /**
     * partially update the specified Secret
     */
    patchNamespacedSecret(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.patchNamespacedSecretRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * partially update the specified Service
     */
    patchNamespacedServiceRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.name === null || requestParameters.name === undefined) {
                throw new runtime.RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling patchNamespacedService.');
            }
            if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                throw new runtime.RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling patchNamespacedService.');
            }
            if (requestParameters.body === null || requestParameters.body === undefined) {
                throw new runtime.RequiredError('body', 'Required parameter requestParameters.body was null or undefined when calling patchNamespacedService.');
            }
            const queryParameters = {};
            if (requestParameters.pretty !== undefined) {
                queryParameters['pretty'] = requestParameters.pretty;
            }
            if (requestParameters.dryRun !== undefined) {
                queryParameters['dryRun'] = requestParameters.dryRun;
            }
            if (requestParameters.fieldManager !== undefined) {
                queryParameters['fieldManager'] = requestParameters.fieldManager;
            }
            if (requestParameters.fieldValidation !== undefined) {
                queryParameters['fieldValidation'] = requestParameters.fieldValidation;
            }
            if (requestParameters.force !== undefined) {
                queryParameters['force'] = requestParameters.force;
            }
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json-patch+json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/api/v1/namespaces/{namespace}/services/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
                method: 'PATCH',
                headers: headerParameters,
                query: queryParameters,
                body: requestParameters.body,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.V1ServiceFromJSON(jsonValue));
        });
    }
    /**
     * partially update the specified Service
     */
    patchNamespacedService(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.patchNamespacedServiceRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * partially update the specified ServiceAccount
     */
    patchNamespacedServiceAccountRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.name === null || requestParameters.name === undefined) {
                throw new runtime.RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling patchNamespacedServiceAccount.');
            }
            if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                throw new runtime.RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling patchNamespacedServiceAccount.');
            }
            if (requestParameters.body === null || requestParameters.body === undefined) {
                throw new runtime.RequiredError('body', 'Required parameter requestParameters.body was null or undefined when calling patchNamespacedServiceAccount.');
            }
            const queryParameters = {};
            if (requestParameters.pretty !== undefined) {
                queryParameters['pretty'] = requestParameters.pretty;
            }
            if (requestParameters.dryRun !== undefined) {
                queryParameters['dryRun'] = requestParameters.dryRun;
            }
            if (requestParameters.fieldManager !== undefined) {
                queryParameters['fieldManager'] = requestParameters.fieldManager;
            }
            if (requestParameters.fieldValidation !== undefined) {
                queryParameters['fieldValidation'] = requestParameters.fieldValidation;
            }
            if (requestParameters.force !== undefined) {
                queryParameters['force'] = requestParameters.force;
            }
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json-patch+json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/api/v1/namespaces/{namespace}/serviceaccounts/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
                method: 'PATCH',
                headers: headerParameters,
                query: queryParameters,
                body: requestParameters.body,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.V1ServiceAccountFromJSON(jsonValue));
        });
    }
    /**
     * partially update the specified ServiceAccount
     */
    patchNamespacedServiceAccount(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.patchNamespacedServiceAccountRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * partially update status of the specified Service
     */
    patchNamespacedServiceStatusRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.name === null || requestParameters.name === undefined) {
                throw new runtime.RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling patchNamespacedServiceStatus.');
            }
            if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                throw new runtime.RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling patchNamespacedServiceStatus.');
            }
            if (requestParameters.body === null || requestParameters.body === undefined) {
                throw new runtime.RequiredError('body', 'Required parameter requestParameters.body was null or undefined when calling patchNamespacedServiceStatus.');
            }
            const queryParameters = {};
            if (requestParameters.pretty !== undefined) {
                queryParameters['pretty'] = requestParameters.pretty;
            }
            if (requestParameters.dryRun !== undefined) {
                queryParameters['dryRun'] = requestParameters.dryRun;
            }
            if (requestParameters.fieldManager !== undefined) {
                queryParameters['fieldManager'] = requestParameters.fieldManager;
            }
            if (requestParameters.fieldValidation !== undefined) {
                queryParameters['fieldValidation'] = requestParameters.fieldValidation;
            }
            if (requestParameters.force !== undefined) {
                queryParameters['force'] = requestParameters.force;
            }
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json-patch+json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/api/v1/namespaces/{namespace}/services/{name}/status`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
                method: 'PATCH',
                headers: headerParameters,
                query: queryParameters,
                body: requestParameters.body,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.V1ServiceFromJSON(jsonValue));
        });
    }
    /**
     * partially update status of the specified Service
     */
    patchNamespacedServiceStatus(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.patchNamespacedServiceStatusRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * partially update the specified Node
     */
    patchNodeRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.name === null || requestParameters.name === undefined) {
                throw new runtime.RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling patchNode.');
            }
            if (requestParameters.body === null || requestParameters.body === undefined) {
                throw new runtime.RequiredError('body', 'Required parameter requestParameters.body was null or undefined when calling patchNode.');
            }
            const queryParameters = {};
            if (requestParameters.pretty !== undefined) {
                queryParameters['pretty'] = requestParameters.pretty;
            }
            if (requestParameters.dryRun !== undefined) {
                queryParameters['dryRun'] = requestParameters.dryRun;
            }
            if (requestParameters.fieldManager !== undefined) {
                queryParameters['fieldManager'] = requestParameters.fieldManager;
            }
            if (requestParameters.fieldValidation !== undefined) {
                queryParameters['fieldValidation'] = requestParameters.fieldValidation;
            }
            if (requestParameters.force !== undefined) {
                queryParameters['force'] = requestParameters.force;
            }
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json-patch+json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/api/v1/nodes/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
                method: 'PATCH',
                headers: headerParameters,
                query: queryParameters,
                body: requestParameters.body,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.V1NodeFromJSON(jsonValue));
        });
    }
    /**
     * partially update the specified Node
     */
    patchNode(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.patchNodeRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * partially update status of the specified Node
     */
    patchNodeStatusRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.name === null || requestParameters.name === undefined) {
                throw new runtime.RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling patchNodeStatus.');
            }
            if (requestParameters.body === null || requestParameters.body === undefined) {
                throw new runtime.RequiredError('body', 'Required parameter requestParameters.body was null or undefined when calling patchNodeStatus.');
            }
            const queryParameters = {};
            if (requestParameters.pretty !== undefined) {
                queryParameters['pretty'] = requestParameters.pretty;
            }
            if (requestParameters.dryRun !== undefined) {
                queryParameters['dryRun'] = requestParameters.dryRun;
            }
            if (requestParameters.fieldManager !== undefined) {
                queryParameters['fieldManager'] = requestParameters.fieldManager;
            }
            if (requestParameters.fieldValidation !== undefined) {
                queryParameters['fieldValidation'] = requestParameters.fieldValidation;
            }
            if (requestParameters.force !== undefined) {
                queryParameters['force'] = requestParameters.force;
            }
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json-patch+json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/api/v1/nodes/{name}/status`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
                method: 'PATCH',
                headers: headerParameters,
                query: queryParameters,
                body: requestParameters.body,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.V1NodeFromJSON(jsonValue));
        });
    }
    /**
     * partially update status of the specified Node
     */
    patchNodeStatus(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.patchNodeStatusRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * partially update the specified PersistentVolume
     */
    patchPersistentVolumeRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.name === null || requestParameters.name === undefined) {
                throw new runtime.RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling patchPersistentVolume.');
            }
            if (requestParameters.body === null || requestParameters.body === undefined) {
                throw new runtime.RequiredError('body', 'Required parameter requestParameters.body was null or undefined when calling patchPersistentVolume.');
            }
            const queryParameters = {};
            if (requestParameters.pretty !== undefined) {
                queryParameters['pretty'] = requestParameters.pretty;
            }
            if (requestParameters.dryRun !== undefined) {
                queryParameters['dryRun'] = requestParameters.dryRun;
            }
            if (requestParameters.fieldManager !== undefined) {
                queryParameters['fieldManager'] = requestParameters.fieldManager;
            }
            if (requestParameters.fieldValidation !== undefined) {
                queryParameters['fieldValidation'] = requestParameters.fieldValidation;
            }
            if (requestParameters.force !== undefined) {
                queryParameters['force'] = requestParameters.force;
            }
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json-patch+json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/api/v1/persistentvolumes/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
                method: 'PATCH',
                headers: headerParameters,
                query: queryParameters,
                body: requestParameters.body,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.V1PersistentVolumeFromJSON(jsonValue));
        });
    }
    /**
     * partially update the specified PersistentVolume
     */
    patchPersistentVolume(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.patchPersistentVolumeRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * partially update status of the specified PersistentVolume
     */
    patchPersistentVolumeStatusRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.name === null || requestParameters.name === undefined) {
                throw new runtime.RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling patchPersistentVolumeStatus.');
            }
            if (requestParameters.body === null || requestParameters.body === undefined) {
                throw new runtime.RequiredError('body', 'Required parameter requestParameters.body was null or undefined when calling patchPersistentVolumeStatus.');
            }
            const queryParameters = {};
            if (requestParameters.pretty !== undefined) {
                queryParameters['pretty'] = requestParameters.pretty;
            }
            if (requestParameters.dryRun !== undefined) {
                queryParameters['dryRun'] = requestParameters.dryRun;
            }
            if (requestParameters.fieldManager !== undefined) {
                queryParameters['fieldManager'] = requestParameters.fieldManager;
            }
            if (requestParameters.fieldValidation !== undefined) {
                queryParameters['fieldValidation'] = requestParameters.fieldValidation;
            }
            if (requestParameters.force !== undefined) {
                queryParameters['force'] = requestParameters.force;
            }
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json-patch+json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/api/v1/persistentvolumes/{name}/status`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
                method: 'PATCH',
                headers: headerParameters,
                query: queryParameters,
                body: requestParameters.body,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.V1PersistentVolumeFromJSON(jsonValue));
        });
    }
    /**
     * partially update status of the specified PersistentVolume
     */
    patchPersistentVolumeStatus(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.patchPersistentVolumeStatusRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * read the specified ComponentStatus
     */
    readComponentStatusRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.name === null || requestParameters.name === undefined) {
                throw new runtime.RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling readComponentStatus.');
            }
            const queryParameters = {};
            if (requestParameters.pretty !== undefined) {
                queryParameters['pretty'] = requestParameters.pretty;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/api/v1/componentstatuses/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.V1ComponentStatusFromJSON(jsonValue));
        });
    }
    /**
     * read the specified ComponentStatus
     */
    readComponentStatus(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.readComponentStatusRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * read the specified Namespace
     */
    readNamespaceRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.name === null || requestParameters.name === undefined) {
                throw new runtime.RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling readNamespace.');
            }
            const queryParameters = {};
            if (requestParameters.pretty !== undefined) {
                queryParameters['pretty'] = requestParameters.pretty;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/api/v1/namespaces/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.V1NamespaceFromJSON(jsonValue));
        });
    }
    /**
     * read the specified Namespace
     */
    readNamespace(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.readNamespaceRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * read status of the specified Namespace
     */
    readNamespaceStatusRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.name === null || requestParameters.name === undefined) {
                throw new runtime.RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling readNamespaceStatus.');
            }
            const queryParameters = {};
            if (requestParameters.pretty !== undefined) {
                queryParameters['pretty'] = requestParameters.pretty;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/api/v1/namespaces/{name}/status`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.V1NamespaceFromJSON(jsonValue));
        });
    }
    /**
     * read status of the specified Namespace
     */
    readNamespaceStatus(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.readNamespaceStatusRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * read the specified ConfigMap
     */
    readNamespacedConfigMapRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.name === null || requestParameters.name === undefined) {
                throw new runtime.RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling readNamespacedConfigMap.');
            }
            if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                throw new runtime.RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling readNamespacedConfigMap.');
            }
            const queryParameters = {};
            if (requestParameters.pretty !== undefined) {
                queryParameters['pretty'] = requestParameters.pretty;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/api/v1/namespaces/{namespace}/configmaps/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.V1ConfigMapFromJSON(jsonValue));
        });
    }
    /**
     * read the specified ConfigMap
     */
    readNamespacedConfigMap(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.readNamespacedConfigMapRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * read the specified Endpoints
     */
    readNamespacedEndpointsRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.name === null || requestParameters.name === undefined) {
                throw new runtime.RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling readNamespacedEndpoints.');
            }
            if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                throw new runtime.RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling readNamespacedEndpoints.');
            }
            const queryParameters = {};
            if (requestParameters.pretty !== undefined) {
                queryParameters['pretty'] = requestParameters.pretty;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/api/v1/namespaces/{namespace}/endpoints/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.V1EndpointsFromJSON(jsonValue));
        });
    }
    /**
     * read the specified Endpoints
     */
    readNamespacedEndpoints(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.readNamespacedEndpointsRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * read the specified Event
     */
    readNamespacedEventRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.name === null || requestParameters.name === undefined) {
                throw new runtime.RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling readNamespacedEvent.');
            }
            if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                throw new runtime.RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling readNamespacedEvent.');
            }
            const queryParameters = {};
            if (requestParameters.pretty !== undefined) {
                queryParameters['pretty'] = requestParameters.pretty;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/api/v1/namespaces/{namespace}/events/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.CoreV1EventFromJSON(jsonValue));
        });
    }
    /**
     * read the specified Event
     */
    readNamespacedEvent(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.readNamespacedEventRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * read the specified LimitRange
     */
    readNamespacedLimitRangeRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.name === null || requestParameters.name === undefined) {
                throw new runtime.RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling readNamespacedLimitRange.');
            }
            if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                throw new runtime.RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling readNamespacedLimitRange.');
            }
            const queryParameters = {};
            if (requestParameters.pretty !== undefined) {
                queryParameters['pretty'] = requestParameters.pretty;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/api/v1/namespaces/{namespace}/limitranges/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.V1LimitRangeFromJSON(jsonValue));
        });
    }
    /**
     * read the specified LimitRange
     */
    readNamespacedLimitRange(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.readNamespacedLimitRangeRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * read the specified PersistentVolumeClaim
     */
    readNamespacedPersistentVolumeClaimRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.name === null || requestParameters.name === undefined) {
                throw new runtime.RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling readNamespacedPersistentVolumeClaim.');
            }
            if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                throw new runtime.RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling readNamespacedPersistentVolumeClaim.');
            }
            const queryParameters = {};
            if (requestParameters.pretty !== undefined) {
                queryParameters['pretty'] = requestParameters.pretty;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/api/v1/namespaces/{namespace}/persistentvolumeclaims/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.V1PersistentVolumeClaimFromJSON(jsonValue));
        });
    }
    /**
     * read the specified PersistentVolumeClaim
     */
    readNamespacedPersistentVolumeClaim(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.readNamespacedPersistentVolumeClaimRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * read status of the specified PersistentVolumeClaim
     */
    readNamespacedPersistentVolumeClaimStatusRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.name === null || requestParameters.name === undefined) {
                throw new runtime.RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling readNamespacedPersistentVolumeClaimStatus.');
            }
            if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                throw new runtime.RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling readNamespacedPersistentVolumeClaimStatus.');
            }
            const queryParameters = {};
            if (requestParameters.pretty !== undefined) {
                queryParameters['pretty'] = requestParameters.pretty;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/api/v1/namespaces/{namespace}/persistentvolumeclaims/{name}/status`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.V1PersistentVolumeClaimFromJSON(jsonValue));
        });
    }
    /**
     * read status of the specified PersistentVolumeClaim
     */
    readNamespacedPersistentVolumeClaimStatus(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.readNamespacedPersistentVolumeClaimStatusRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * read the specified Pod
     */
    readNamespacedPodRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.name === null || requestParameters.name === undefined) {
                throw new runtime.RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling readNamespacedPod.');
            }
            if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                throw new runtime.RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling readNamespacedPod.');
            }
            const queryParameters = {};
            if (requestParameters.pretty !== undefined) {
                queryParameters['pretty'] = requestParameters.pretty;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/api/v1/namespaces/{namespace}/pods/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.V1PodFromJSON(jsonValue));
        });
    }
    /**
     * read the specified Pod
     */
    readNamespacedPod(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.readNamespacedPodRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * read ephemeralcontainers of the specified Pod
     */
    readNamespacedPodEphemeralcontainersRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.name === null || requestParameters.name === undefined) {
                throw new runtime.RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling readNamespacedPodEphemeralcontainers.');
            }
            if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                throw new runtime.RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling readNamespacedPodEphemeralcontainers.');
            }
            const queryParameters = {};
            if (requestParameters.pretty !== undefined) {
                queryParameters['pretty'] = requestParameters.pretty;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/api/v1/namespaces/{namespace}/pods/{name}/ephemeralcontainers`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.V1PodFromJSON(jsonValue));
        });
    }
    /**
     * read ephemeralcontainers of the specified Pod
     */
    readNamespacedPodEphemeralcontainers(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.readNamespacedPodEphemeralcontainersRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * read log of the specified Pod
     */
    readNamespacedPodLogRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.name === null || requestParameters.name === undefined) {
                throw new runtime.RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling readNamespacedPodLog.');
            }
            if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                throw new runtime.RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling readNamespacedPodLog.');
            }
            const queryParameters = {};
            if (requestParameters.container !== undefined) {
                queryParameters['container'] = requestParameters.container;
            }
            if (requestParameters.follow !== undefined) {
                queryParameters['follow'] = requestParameters.follow;
            }
            if (requestParameters.insecureSkipTLSVerifyBackend !== undefined) {
                queryParameters['insecureSkipTLSVerifyBackend'] = requestParameters.insecureSkipTLSVerifyBackend;
            }
            if (requestParameters.limitBytes !== undefined) {
                queryParameters['limitBytes'] = requestParameters.limitBytes;
            }
            if (requestParameters.pretty !== undefined) {
                queryParameters['pretty'] = requestParameters.pretty;
            }
            if (requestParameters.previous !== undefined) {
                queryParameters['previous'] = requestParameters.previous;
            }
            if (requestParameters.sinceSeconds !== undefined) {
                queryParameters['sinceSeconds'] = requestParameters.sinceSeconds;
            }
            if (requestParameters.tailLines !== undefined) {
                queryParameters['tailLines'] = requestParameters.tailLines;
            }
            if (requestParameters.timestamps !== undefined) {
                queryParameters['timestamps'] = requestParameters.timestamps;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/api/v1/namespaces/{namespace}/pods/{name}/log`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.TextApiResponse(response);
        });
    }
    /**
     * read log of the specified Pod
     */
    readNamespacedPodLog(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.readNamespacedPodLogRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * read status of the specified Pod
     */
    readNamespacedPodStatusRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.name === null || requestParameters.name === undefined) {
                throw new runtime.RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling readNamespacedPodStatus.');
            }
            if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                throw new runtime.RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling readNamespacedPodStatus.');
            }
            const queryParameters = {};
            if (requestParameters.pretty !== undefined) {
                queryParameters['pretty'] = requestParameters.pretty;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/api/v1/namespaces/{namespace}/pods/{name}/status`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.V1PodFromJSON(jsonValue));
        });
    }
    /**
     * read status of the specified Pod
     */
    readNamespacedPodStatus(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.readNamespacedPodStatusRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * read the specified PodTemplate
     */
    readNamespacedPodTemplateRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.name === null || requestParameters.name === undefined) {
                throw new runtime.RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling readNamespacedPodTemplate.');
            }
            if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                throw new runtime.RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling readNamespacedPodTemplate.');
            }
            const queryParameters = {};
            if (requestParameters.pretty !== undefined) {
                queryParameters['pretty'] = requestParameters.pretty;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/api/v1/namespaces/{namespace}/podtemplates/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.V1PodTemplateFromJSON(jsonValue));
        });
    }
    /**
     * read the specified PodTemplate
     */
    readNamespacedPodTemplate(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.readNamespacedPodTemplateRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * read the specified ReplicationController
     */
    readNamespacedReplicationControllerRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.name === null || requestParameters.name === undefined) {
                throw new runtime.RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling readNamespacedReplicationController.');
            }
            if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                throw new runtime.RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling readNamespacedReplicationController.');
            }
            const queryParameters = {};
            if (requestParameters.pretty !== undefined) {
                queryParameters['pretty'] = requestParameters.pretty;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/api/v1/namespaces/{namespace}/replicationcontrollers/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.V1ReplicationControllerFromJSON(jsonValue));
        });
    }
    /**
     * read the specified ReplicationController
     */
    readNamespacedReplicationController(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.readNamespacedReplicationControllerRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * read scale of the specified ReplicationController
     */
    readNamespacedReplicationControllerScaleRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.name === null || requestParameters.name === undefined) {
                throw new runtime.RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling readNamespacedReplicationControllerScale.');
            }
            if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                throw new runtime.RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling readNamespacedReplicationControllerScale.');
            }
            const queryParameters = {};
            if (requestParameters.pretty !== undefined) {
                queryParameters['pretty'] = requestParameters.pretty;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/api/v1/namespaces/{namespace}/replicationcontrollers/{name}/scale`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.V1ScaleFromJSON(jsonValue));
        });
    }
    /**
     * read scale of the specified ReplicationController
     */
    readNamespacedReplicationControllerScale(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.readNamespacedReplicationControllerScaleRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * read status of the specified ReplicationController
     */
    readNamespacedReplicationControllerStatusRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.name === null || requestParameters.name === undefined) {
                throw new runtime.RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling readNamespacedReplicationControllerStatus.');
            }
            if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                throw new runtime.RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling readNamespacedReplicationControllerStatus.');
            }
            const queryParameters = {};
            if (requestParameters.pretty !== undefined) {
                queryParameters['pretty'] = requestParameters.pretty;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/api/v1/namespaces/{namespace}/replicationcontrollers/{name}/status`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.V1ReplicationControllerFromJSON(jsonValue));
        });
    }
    /**
     * read status of the specified ReplicationController
     */
    readNamespacedReplicationControllerStatus(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.readNamespacedReplicationControllerStatusRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * read the specified ResourceQuota
     */
    readNamespacedResourceQuotaRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.name === null || requestParameters.name === undefined) {
                throw new runtime.RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling readNamespacedResourceQuota.');
            }
            if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                throw new runtime.RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling readNamespacedResourceQuota.');
            }
            const queryParameters = {};
            if (requestParameters.pretty !== undefined) {
                queryParameters['pretty'] = requestParameters.pretty;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/api/v1/namespaces/{namespace}/resourcequotas/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.V1ResourceQuotaFromJSON(jsonValue));
        });
    }
    /**
     * read the specified ResourceQuota
     */
    readNamespacedResourceQuota(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.readNamespacedResourceQuotaRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * read status of the specified ResourceQuota
     */
    readNamespacedResourceQuotaStatusRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.name === null || requestParameters.name === undefined) {
                throw new runtime.RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling readNamespacedResourceQuotaStatus.');
            }
            if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                throw new runtime.RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling readNamespacedResourceQuotaStatus.');
            }
            const queryParameters = {};
            if (requestParameters.pretty !== undefined) {
                queryParameters['pretty'] = requestParameters.pretty;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/api/v1/namespaces/{namespace}/resourcequotas/{name}/status`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.V1ResourceQuotaFromJSON(jsonValue));
        });
    }
    /**
     * read status of the specified ResourceQuota
     */
    readNamespacedResourceQuotaStatus(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.readNamespacedResourceQuotaStatusRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * read the specified Secret
     */
    readNamespacedSecretRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.name === null || requestParameters.name === undefined) {
                throw new runtime.RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling readNamespacedSecret.');
            }
            if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                throw new runtime.RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling readNamespacedSecret.');
            }
            const queryParameters = {};
            if (requestParameters.pretty !== undefined) {
                queryParameters['pretty'] = requestParameters.pretty;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/api/v1/namespaces/{namespace}/secrets/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.V1SecretFromJSON(jsonValue));
        });
    }
    /**
     * read the specified Secret
     */
    readNamespacedSecret(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.readNamespacedSecretRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * read the specified Service
     */
    readNamespacedServiceRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.name === null || requestParameters.name === undefined) {
                throw new runtime.RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling readNamespacedService.');
            }
            if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                throw new runtime.RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling readNamespacedService.');
            }
            const queryParameters = {};
            if (requestParameters.pretty !== undefined) {
                queryParameters['pretty'] = requestParameters.pretty;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/api/v1/namespaces/{namespace}/services/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.V1ServiceFromJSON(jsonValue));
        });
    }
    /**
     * read the specified Service
     */
    readNamespacedService(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.readNamespacedServiceRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * read the specified ServiceAccount
     */
    readNamespacedServiceAccountRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.name === null || requestParameters.name === undefined) {
                throw new runtime.RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling readNamespacedServiceAccount.');
            }
            if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                throw new runtime.RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling readNamespacedServiceAccount.');
            }
            const queryParameters = {};
            if (requestParameters.pretty !== undefined) {
                queryParameters['pretty'] = requestParameters.pretty;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/api/v1/namespaces/{namespace}/serviceaccounts/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.V1ServiceAccountFromJSON(jsonValue));
        });
    }
    /**
     * read the specified ServiceAccount
     */
    readNamespacedServiceAccount(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.readNamespacedServiceAccountRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * read status of the specified Service
     */
    readNamespacedServiceStatusRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.name === null || requestParameters.name === undefined) {
                throw new runtime.RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling readNamespacedServiceStatus.');
            }
            if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                throw new runtime.RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling readNamespacedServiceStatus.');
            }
            const queryParameters = {};
            if (requestParameters.pretty !== undefined) {
                queryParameters['pretty'] = requestParameters.pretty;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/api/v1/namespaces/{namespace}/services/{name}/status`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.V1ServiceFromJSON(jsonValue));
        });
    }
    /**
     * read status of the specified Service
     */
    readNamespacedServiceStatus(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.readNamespacedServiceStatusRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * read the specified Node
     */
    readNodeRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.name === null || requestParameters.name === undefined) {
                throw new runtime.RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling readNode.');
            }
            const queryParameters = {};
            if (requestParameters.pretty !== undefined) {
                queryParameters['pretty'] = requestParameters.pretty;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/api/v1/nodes/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.V1NodeFromJSON(jsonValue));
        });
    }
    /**
     * read the specified Node
     */
    readNode(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.readNodeRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * read status of the specified Node
     */
    readNodeStatusRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.name === null || requestParameters.name === undefined) {
                throw new runtime.RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling readNodeStatus.');
            }
            const queryParameters = {};
            if (requestParameters.pretty !== undefined) {
                queryParameters['pretty'] = requestParameters.pretty;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/api/v1/nodes/{name}/status`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.V1NodeFromJSON(jsonValue));
        });
    }
    /**
     * read status of the specified Node
     */
    readNodeStatus(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.readNodeStatusRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * read the specified PersistentVolume
     */
    readPersistentVolumeRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.name === null || requestParameters.name === undefined) {
                throw new runtime.RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling readPersistentVolume.');
            }
            const queryParameters = {};
            if (requestParameters.pretty !== undefined) {
                queryParameters['pretty'] = requestParameters.pretty;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/api/v1/persistentvolumes/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.V1PersistentVolumeFromJSON(jsonValue));
        });
    }
    /**
     * read the specified PersistentVolume
     */
    readPersistentVolume(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.readPersistentVolumeRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * read status of the specified PersistentVolume
     */
    readPersistentVolumeStatusRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.name === null || requestParameters.name === undefined) {
                throw new runtime.RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling readPersistentVolumeStatus.');
            }
            const queryParameters = {};
            if (requestParameters.pretty !== undefined) {
                queryParameters['pretty'] = requestParameters.pretty;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/api/v1/persistentvolumes/{name}/status`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.V1PersistentVolumeFromJSON(jsonValue));
        });
    }
    /**
     * read status of the specified PersistentVolume
     */
    readPersistentVolumeStatus(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.readPersistentVolumeStatusRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * replace the specified Namespace
     */
    replaceNamespaceRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.name === null || requestParameters.name === undefined) {
                throw new runtime.RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling replaceNamespace.');
            }
            if (requestParameters.body === null || requestParameters.body === undefined) {
                throw new runtime.RequiredError('body', 'Required parameter requestParameters.body was null or undefined when calling replaceNamespace.');
            }
            const queryParameters = {};
            if (requestParameters.pretty !== undefined) {
                queryParameters['pretty'] = requestParameters.pretty;
            }
            if (requestParameters.dryRun !== undefined) {
                queryParameters['dryRun'] = requestParameters.dryRun;
            }
            if (requestParameters.fieldManager !== undefined) {
                queryParameters['fieldManager'] = requestParameters.fieldManager;
            }
            if (requestParameters.fieldValidation !== undefined) {
                queryParameters['fieldValidation'] = requestParameters.fieldValidation;
            }
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/api/v1/namespaces/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: models_1.V1NamespaceToJSON(requestParameters.body),
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.V1NamespaceFromJSON(jsonValue));
        });
    }
    /**
     * replace the specified Namespace
     */
    replaceNamespace(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.replaceNamespaceRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * replace finalize of the specified Namespace
     */
    replaceNamespaceFinalizeRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.name === null || requestParameters.name === undefined) {
                throw new runtime.RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling replaceNamespaceFinalize.');
            }
            if (requestParameters.body === null || requestParameters.body === undefined) {
                throw new runtime.RequiredError('body', 'Required parameter requestParameters.body was null or undefined when calling replaceNamespaceFinalize.');
            }
            const queryParameters = {};
            if (requestParameters.dryRun !== undefined) {
                queryParameters['dryRun'] = requestParameters.dryRun;
            }
            if (requestParameters.fieldManager !== undefined) {
                queryParameters['fieldManager'] = requestParameters.fieldManager;
            }
            if (requestParameters.fieldValidation !== undefined) {
                queryParameters['fieldValidation'] = requestParameters.fieldValidation;
            }
            if (requestParameters.pretty !== undefined) {
                queryParameters['pretty'] = requestParameters.pretty;
            }
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/api/v1/namespaces/{name}/finalize`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: models_1.V1NamespaceToJSON(requestParameters.body),
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.V1NamespaceFromJSON(jsonValue));
        });
    }
    /**
     * replace finalize of the specified Namespace
     */
    replaceNamespaceFinalize(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.replaceNamespaceFinalizeRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * replace status of the specified Namespace
     */
    replaceNamespaceStatusRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.name === null || requestParameters.name === undefined) {
                throw new runtime.RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling replaceNamespaceStatus.');
            }
            if (requestParameters.body === null || requestParameters.body === undefined) {
                throw new runtime.RequiredError('body', 'Required parameter requestParameters.body was null or undefined when calling replaceNamespaceStatus.');
            }
            const queryParameters = {};
            if (requestParameters.pretty !== undefined) {
                queryParameters['pretty'] = requestParameters.pretty;
            }
            if (requestParameters.dryRun !== undefined) {
                queryParameters['dryRun'] = requestParameters.dryRun;
            }
            if (requestParameters.fieldManager !== undefined) {
                queryParameters['fieldManager'] = requestParameters.fieldManager;
            }
            if (requestParameters.fieldValidation !== undefined) {
                queryParameters['fieldValidation'] = requestParameters.fieldValidation;
            }
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/api/v1/namespaces/{name}/status`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: models_1.V1NamespaceToJSON(requestParameters.body),
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.V1NamespaceFromJSON(jsonValue));
        });
    }
    /**
     * replace status of the specified Namespace
     */
    replaceNamespaceStatus(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.replaceNamespaceStatusRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * replace the specified ConfigMap
     */
    replaceNamespacedConfigMapRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.name === null || requestParameters.name === undefined) {
                throw new runtime.RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling replaceNamespacedConfigMap.');
            }
            if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                throw new runtime.RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling replaceNamespacedConfigMap.');
            }
            if (requestParameters.body === null || requestParameters.body === undefined) {
                throw new runtime.RequiredError('body', 'Required parameter requestParameters.body was null or undefined when calling replaceNamespacedConfigMap.');
            }
            const queryParameters = {};
            if (requestParameters.pretty !== undefined) {
                queryParameters['pretty'] = requestParameters.pretty;
            }
            if (requestParameters.dryRun !== undefined) {
                queryParameters['dryRun'] = requestParameters.dryRun;
            }
            if (requestParameters.fieldManager !== undefined) {
                queryParameters['fieldManager'] = requestParameters.fieldManager;
            }
            if (requestParameters.fieldValidation !== undefined) {
                queryParameters['fieldValidation'] = requestParameters.fieldValidation;
            }
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/api/v1/namespaces/{namespace}/configmaps/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: models_1.V1ConfigMapToJSON(requestParameters.body),
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.V1ConfigMapFromJSON(jsonValue));
        });
    }
    /**
     * replace the specified ConfigMap
     */
    replaceNamespacedConfigMap(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.replaceNamespacedConfigMapRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * replace the specified Endpoints
     */
    replaceNamespacedEndpointsRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.name === null || requestParameters.name === undefined) {
                throw new runtime.RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling replaceNamespacedEndpoints.');
            }
            if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                throw new runtime.RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling replaceNamespacedEndpoints.');
            }
            if (requestParameters.body === null || requestParameters.body === undefined) {
                throw new runtime.RequiredError('body', 'Required parameter requestParameters.body was null or undefined when calling replaceNamespacedEndpoints.');
            }
            const queryParameters = {};
            if (requestParameters.pretty !== undefined) {
                queryParameters['pretty'] = requestParameters.pretty;
            }
            if (requestParameters.dryRun !== undefined) {
                queryParameters['dryRun'] = requestParameters.dryRun;
            }
            if (requestParameters.fieldManager !== undefined) {
                queryParameters['fieldManager'] = requestParameters.fieldManager;
            }
            if (requestParameters.fieldValidation !== undefined) {
                queryParameters['fieldValidation'] = requestParameters.fieldValidation;
            }
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/api/v1/namespaces/{namespace}/endpoints/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: models_1.V1EndpointsToJSON(requestParameters.body),
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.V1EndpointsFromJSON(jsonValue));
        });
    }
    /**
     * replace the specified Endpoints
     */
    replaceNamespacedEndpoints(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.replaceNamespacedEndpointsRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * replace the specified Event
     */
    replaceNamespacedEventRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.name === null || requestParameters.name === undefined) {
                throw new runtime.RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling replaceNamespacedEvent.');
            }
            if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                throw new runtime.RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling replaceNamespacedEvent.');
            }
            if (requestParameters.body === null || requestParameters.body === undefined) {
                throw new runtime.RequiredError('body', 'Required parameter requestParameters.body was null or undefined when calling replaceNamespacedEvent.');
            }
            const queryParameters = {};
            if (requestParameters.pretty !== undefined) {
                queryParameters['pretty'] = requestParameters.pretty;
            }
            if (requestParameters.dryRun !== undefined) {
                queryParameters['dryRun'] = requestParameters.dryRun;
            }
            if (requestParameters.fieldManager !== undefined) {
                queryParameters['fieldManager'] = requestParameters.fieldManager;
            }
            if (requestParameters.fieldValidation !== undefined) {
                queryParameters['fieldValidation'] = requestParameters.fieldValidation;
            }
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/api/v1/namespaces/{namespace}/events/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: models_1.CoreV1EventToJSON(requestParameters.body),
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.CoreV1EventFromJSON(jsonValue));
        });
    }
    /**
     * replace the specified Event
     */
    replaceNamespacedEvent(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.replaceNamespacedEventRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * replace the specified LimitRange
     */
    replaceNamespacedLimitRangeRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.name === null || requestParameters.name === undefined) {
                throw new runtime.RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling replaceNamespacedLimitRange.');
            }
            if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                throw new runtime.RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling replaceNamespacedLimitRange.');
            }
            if (requestParameters.body === null || requestParameters.body === undefined) {
                throw new runtime.RequiredError('body', 'Required parameter requestParameters.body was null or undefined when calling replaceNamespacedLimitRange.');
            }
            const queryParameters = {};
            if (requestParameters.pretty !== undefined) {
                queryParameters['pretty'] = requestParameters.pretty;
            }
            if (requestParameters.dryRun !== undefined) {
                queryParameters['dryRun'] = requestParameters.dryRun;
            }
            if (requestParameters.fieldManager !== undefined) {
                queryParameters['fieldManager'] = requestParameters.fieldManager;
            }
            if (requestParameters.fieldValidation !== undefined) {
                queryParameters['fieldValidation'] = requestParameters.fieldValidation;
            }
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/api/v1/namespaces/{namespace}/limitranges/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: models_1.V1LimitRangeToJSON(requestParameters.body),
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.V1LimitRangeFromJSON(jsonValue));
        });
    }
    /**
     * replace the specified LimitRange
     */
    replaceNamespacedLimitRange(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.replaceNamespacedLimitRangeRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * replace the specified PersistentVolumeClaim
     */
    replaceNamespacedPersistentVolumeClaimRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.name === null || requestParameters.name === undefined) {
                throw new runtime.RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling replaceNamespacedPersistentVolumeClaim.');
            }
            if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                throw new runtime.RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling replaceNamespacedPersistentVolumeClaim.');
            }
            if (requestParameters.body === null || requestParameters.body === undefined) {
                throw new runtime.RequiredError('body', 'Required parameter requestParameters.body was null or undefined when calling replaceNamespacedPersistentVolumeClaim.');
            }
            const queryParameters = {};
            if (requestParameters.pretty !== undefined) {
                queryParameters['pretty'] = requestParameters.pretty;
            }
            if (requestParameters.dryRun !== undefined) {
                queryParameters['dryRun'] = requestParameters.dryRun;
            }
            if (requestParameters.fieldManager !== undefined) {
                queryParameters['fieldManager'] = requestParameters.fieldManager;
            }
            if (requestParameters.fieldValidation !== undefined) {
                queryParameters['fieldValidation'] = requestParameters.fieldValidation;
            }
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/api/v1/namespaces/{namespace}/persistentvolumeclaims/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: models_1.V1PersistentVolumeClaimToJSON(requestParameters.body),
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.V1PersistentVolumeClaimFromJSON(jsonValue));
        });
    }
    /**
     * replace the specified PersistentVolumeClaim
     */
    replaceNamespacedPersistentVolumeClaim(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.replaceNamespacedPersistentVolumeClaimRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * replace status of the specified PersistentVolumeClaim
     */
    replaceNamespacedPersistentVolumeClaimStatusRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.name === null || requestParameters.name === undefined) {
                throw new runtime.RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling replaceNamespacedPersistentVolumeClaimStatus.');
            }
            if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                throw new runtime.RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling replaceNamespacedPersistentVolumeClaimStatus.');
            }
            if (requestParameters.body === null || requestParameters.body === undefined) {
                throw new runtime.RequiredError('body', 'Required parameter requestParameters.body was null or undefined when calling replaceNamespacedPersistentVolumeClaimStatus.');
            }
            const queryParameters = {};
            if (requestParameters.pretty !== undefined) {
                queryParameters['pretty'] = requestParameters.pretty;
            }
            if (requestParameters.dryRun !== undefined) {
                queryParameters['dryRun'] = requestParameters.dryRun;
            }
            if (requestParameters.fieldManager !== undefined) {
                queryParameters['fieldManager'] = requestParameters.fieldManager;
            }
            if (requestParameters.fieldValidation !== undefined) {
                queryParameters['fieldValidation'] = requestParameters.fieldValidation;
            }
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/api/v1/namespaces/{namespace}/persistentvolumeclaims/{name}/status`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: models_1.V1PersistentVolumeClaimToJSON(requestParameters.body),
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.V1PersistentVolumeClaimFromJSON(jsonValue));
        });
    }
    /**
     * replace status of the specified PersistentVolumeClaim
     */
    replaceNamespacedPersistentVolumeClaimStatus(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.replaceNamespacedPersistentVolumeClaimStatusRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * replace the specified Pod
     */
    replaceNamespacedPodRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.name === null || requestParameters.name === undefined) {
                throw new runtime.RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling replaceNamespacedPod.');
            }
            if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                throw new runtime.RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling replaceNamespacedPod.');
            }
            if (requestParameters.body === null || requestParameters.body === undefined) {
                throw new runtime.RequiredError('body', 'Required parameter requestParameters.body was null or undefined when calling replaceNamespacedPod.');
            }
            const queryParameters = {};
            if (requestParameters.pretty !== undefined) {
                queryParameters['pretty'] = requestParameters.pretty;
            }
            if (requestParameters.dryRun !== undefined) {
                queryParameters['dryRun'] = requestParameters.dryRun;
            }
            if (requestParameters.fieldManager !== undefined) {
                queryParameters['fieldManager'] = requestParameters.fieldManager;
            }
            if (requestParameters.fieldValidation !== undefined) {
                queryParameters['fieldValidation'] = requestParameters.fieldValidation;
            }
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/api/v1/namespaces/{namespace}/pods/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: models_1.V1PodToJSON(requestParameters.body),
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.V1PodFromJSON(jsonValue));
        });
    }
    /**
     * replace the specified Pod
     */
    replaceNamespacedPod(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.replaceNamespacedPodRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * replace ephemeralcontainers of the specified Pod
     */
    replaceNamespacedPodEphemeralcontainersRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.name === null || requestParameters.name === undefined) {
                throw new runtime.RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling replaceNamespacedPodEphemeralcontainers.');
            }
            if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                throw new runtime.RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling replaceNamespacedPodEphemeralcontainers.');
            }
            if (requestParameters.body === null || requestParameters.body === undefined) {
                throw new runtime.RequiredError('body', 'Required parameter requestParameters.body was null or undefined when calling replaceNamespacedPodEphemeralcontainers.');
            }
            const queryParameters = {};
            if (requestParameters.pretty !== undefined) {
                queryParameters['pretty'] = requestParameters.pretty;
            }
            if (requestParameters.dryRun !== undefined) {
                queryParameters['dryRun'] = requestParameters.dryRun;
            }
            if (requestParameters.fieldManager !== undefined) {
                queryParameters['fieldManager'] = requestParameters.fieldManager;
            }
            if (requestParameters.fieldValidation !== undefined) {
                queryParameters['fieldValidation'] = requestParameters.fieldValidation;
            }
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/api/v1/namespaces/{namespace}/pods/{name}/ephemeralcontainers`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: models_1.V1PodToJSON(requestParameters.body),
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.V1PodFromJSON(jsonValue));
        });
    }
    /**
     * replace ephemeralcontainers of the specified Pod
     */
    replaceNamespacedPodEphemeralcontainers(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.replaceNamespacedPodEphemeralcontainersRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * replace status of the specified Pod
     */
    replaceNamespacedPodStatusRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.name === null || requestParameters.name === undefined) {
                throw new runtime.RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling replaceNamespacedPodStatus.');
            }
            if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                throw new runtime.RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling replaceNamespacedPodStatus.');
            }
            if (requestParameters.body === null || requestParameters.body === undefined) {
                throw new runtime.RequiredError('body', 'Required parameter requestParameters.body was null or undefined when calling replaceNamespacedPodStatus.');
            }
            const queryParameters = {};
            if (requestParameters.pretty !== undefined) {
                queryParameters['pretty'] = requestParameters.pretty;
            }
            if (requestParameters.dryRun !== undefined) {
                queryParameters['dryRun'] = requestParameters.dryRun;
            }
            if (requestParameters.fieldManager !== undefined) {
                queryParameters['fieldManager'] = requestParameters.fieldManager;
            }
            if (requestParameters.fieldValidation !== undefined) {
                queryParameters['fieldValidation'] = requestParameters.fieldValidation;
            }
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/api/v1/namespaces/{namespace}/pods/{name}/status`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: models_1.V1PodToJSON(requestParameters.body),
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.V1PodFromJSON(jsonValue));
        });
    }
    /**
     * replace status of the specified Pod
     */
    replaceNamespacedPodStatus(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.replaceNamespacedPodStatusRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * replace the specified PodTemplate
     */
    replaceNamespacedPodTemplateRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.name === null || requestParameters.name === undefined) {
                throw new runtime.RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling replaceNamespacedPodTemplate.');
            }
            if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                throw new runtime.RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling replaceNamespacedPodTemplate.');
            }
            if (requestParameters.body === null || requestParameters.body === undefined) {
                throw new runtime.RequiredError('body', 'Required parameter requestParameters.body was null or undefined when calling replaceNamespacedPodTemplate.');
            }
            const queryParameters = {};
            if (requestParameters.pretty !== undefined) {
                queryParameters['pretty'] = requestParameters.pretty;
            }
            if (requestParameters.dryRun !== undefined) {
                queryParameters['dryRun'] = requestParameters.dryRun;
            }
            if (requestParameters.fieldManager !== undefined) {
                queryParameters['fieldManager'] = requestParameters.fieldManager;
            }
            if (requestParameters.fieldValidation !== undefined) {
                queryParameters['fieldValidation'] = requestParameters.fieldValidation;
            }
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/api/v1/namespaces/{namespace}/podtemplates/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: models_1.V1PodTemplateToJSON(requestParameters.body),
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.V1PodTemplateFromJSON(jsonValue));
        });
    }
    /**
     * replace the specified PodTemplate
     */
    replaceNamespacedPodTemplate(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.replaceNamespacedPodTemplateRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * replace the specified ReplicationController
     */
    replaceNamespacedReplicationControllerRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.name === null || requestParameters.name === undefined) {
                throw new runtime.RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling replaceNamespacedReplicationController.');
            }
            if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                throw new runtime.RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling replaceNamespacedReplicationController.');
            }
            if (requestParameters.body === null || requestParameters.body === undefined) {
                throw new runtime.RequiredError('body', 'Required parameter requestParameters.body was null or undefined when calling replaceNamespacedReplicationController.');
            }
            const queryParameters = {};
            if (requestParameters.pretty !== undefined) {
                queryParameters['pretty'] = requestParameters.pretty;
            }
            if (requestParameters.dryRun !== undefined) {
                queryParameters['dryRun'] = requestParameters.dryRun;
            }
            if (requestParameters.fieldManager !== undefined) {
                queryParameters['fieldManager'] = requestParameters.fieldManager;
            }
            if (requestParameters.fieldValidation !== undefined) {
                queryParameters['fieldValidation'] = requestParameters.fieldValidation;
            }
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/api/v1/namespaces/{namespace}/replicationcontrollers/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: models_1.V1ReplicationControllerToJSON(requestParameters.body),
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.V1ReplicationControllerFromJSON(jsonValue));
        });
    }
    /**
     * replace the specified ReplicationController
     */
    replaceNamespacedReplicationController(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.replaceNamespacedReplicationControllerRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * replace scale of the specified ReplicationController
     */
    replaceNamespacedReplicationControllerScaleRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.name === null || requestParameters.name === undefined) {
                throw new runtime.RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling replaceNamespacedReplicationControllerScale.');
            }
            if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                throw new runtime.RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling replaceNamespacedReplicationControllerScale.');
            }
            if (requestParameters.body === null || requestParameters.body === undefined) {
                throw new runtime.RequiredError('body', 'Required parameter requestParameters.body was null or undefined when calling replaceNamespacedReplicationControllerScale.');
            }
            const queryParameters = {};
            if (requestParameters.pretty !== undefined) {
                queryParameters['pretty'] = requestParameters.pretty;
            }
            if (requestParameters.dryRun !== undefined) {
                queryParameters['dryRun'] = requestParameters.dryRun;
            }
            if (requestParameters.fieldManager !== undefined) {
                queryParameters['fieldManager'] = requestParameters.fieldManager;
            }
            if (requestParameters.fieldValidation !== undefined) {
                queryParameters['fieldValidation'] = requestParameters.fieldValidation;
            }
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/api/v1/namespaces/{namespace}/replicationcontrollers/{name}/scale`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: models_1.V1ScaleToJSON(requestParameters.body),
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.V1ScaleFromJSON(jsonValue));
        });
    }
    /**
     * replace scale of the specified ReplicationController
     */
    replaceNamespacedReplicationControllerScale(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.replaceNamespacedReplicationControllerScaleRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * replace status of the specified ReplicationController
     */
    replaceNamespacedReplicationControllerStatusRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.name === null || requestParameters.name === undefined) {
                throw new runtime.RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling replaceNamespacedReplicationControllerStatus.');
            }
            if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                throw new runtime.RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling replaceNamespacedReplicationControllerStatus.');
            }
            if (requestParameters.body === null || requestParameters.body === undefined) {
                throw new runtime.RequiredError('body', 'Required parameter requestParameters.body was null or undefined when calling replaceNamespacedReplicationControllerStatus.');
            }
            const queryParameters = {};
            if (requestParameters.pretty !== undefined) {
                queryParameters['pretty'] = requestParameters.pretty;
            }
            if (requestParameters.dryRun !== undefined) {
                queryParameters['dryRun'] = requestParameters.dryRun;
            }
            if (requestParameters.fieldManager !== undefined) {
                queryParameters['fieldManager'] = requestParameters.fieldManager;
            }
            if (requestParameters.fieldValidation !== undefined) {
                queryParameters['fieldValidation'] = requestParameters.fieldValidation;
            }
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/api/v1/namespaces/{namespace}/replicationcontrollers/{name}/status`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: models_1.V1ReplicationControllerToJSON(requestParameters.body),
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.V1ReplicationControllerFromJSON(jsonValue));
        });
    }
    /**
     * replace status of the specified ReplicationController
     */
    replaceNamespacedReplicationControllerStatus(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.replaceNamespacedReplicationControllerStatusRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * replace the specified ResourceQuota
     */
    replaceNamespacedResourceQuotaRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.name === null || requestParameters.name === undefined) {
                throw new runtime.RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling replaceNamespacedResourceQuota.');
            }
            if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                throw new runtime.RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling replaceNamespacedResourceQuota.');
            }
            if (requestParameters.body === null || requestParameters.body === undefined) {
                throw new runtime.RequiredError('body', 'Required parameter requestParameters.body was null or undefined when calling replaceNamespacedResourceQuota.');
            }
            const queryParameters = {};
            if (requestParameters.pretty !== undefined) {
                queryParameters['pretty'] = requestParameters.pretty;
            }
            if (requestParameters.dryRun !== undefined) {
                queryParameters['dryRun'] = requestParameters.dryRun;
            }
            if (requestParameters.fieldManager !== undefined) {
                queryParameters['fieldManager'] = requestParameters.fieldManager;
            }
            if (requestParameters.fieldValidation !== undefined) {
                queryParameters['fieldValidation'] = requestParameters.fieldValidation;
            }
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/api/v1/namespaces/{namespace}/resourcequotas/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: models_1.V1ResourceQuotaToJSON(requestParameters.body),
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.V1ResourceQuotaFromJSON(jsonValue));
        });
    }
    /**
     * replace the specified ResourceQuota
     */
    replaceNamespacedResourceQuota(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.replaceNamespacedResourceQuotaRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * replace status of the specified ResourceQuota
     */
    replaceNamespacedResourceQuotaStatusRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.name === null || requestParameters.name === undefined) {
                throw new runtime.RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling replaceNamespacedResourceQuotaStatus.');
            }
            if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                throw new runtime.RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling replaceNamespacedResourceQuotaStatus.');
            }
            if (requestParameters.body === null || requestParameters.body === undefined) {
                throw new runtime.RequiredError('body', 'Required parameter requestParameters.body was null or undefined when calling replaceNamespacedResourceQuotaStatus.');
            }
            const queryParameters = {};
            if (requestParameters.pretty !== undefined) {
                queryParameters['pretty'] = requestParameters.pretty;
            }
            if (requestParameters.dryRun !== undefined) {
                queryParameters['dryRun'] = requestParameters.dryRun;
            }
            if (requestParameters.fieldManager !== undefined) {
                queryParameters['fieldManager'] = requestParameters.fieldManager;
            }
            if (requestParameters.fieldValidation !== undefined) {
                queryParameters['fieldValidation'] = requestParameters.fieldValidation;
            }
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/api/v1/namespaces/{namespace}/resourcequotas/{name}/status`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: models_1.V1ResourceQuotaToJSON(requestParameters.body),
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.V1ResourceQuotaFromJSON(jsonValue));
        });
    }
    /**
     * replace status of the specified ResourceQuota
     */
    replaceNamespacedResourceQuotaStatus(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.replaceNamespacedResourceQuotaStatusRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * replace the specified Secret
     */
    replaceNamespacedSecretRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.name === null || requestParameters.name === undefined) {
                throw new runtime.RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling replaceNamespacedSecret.');
            }
            if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                throw new runtime.RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling replaceNamespacedSecret.');
            }
            if (requestParameters.body === null || requestParameters.body === undefined) {
                throw new runtime.RequiredError('body', 'Required parameter requestParameters.body was null or undefined when calling replaceNamespacedSecret.');
            }
            const queryParameters = {};
            if (requestParameters.pretty !== undefined) {
                queryParameters['pretty'] = requestParameters.pretty;
            }
            if (requestParameters.dryRun !== undefined) {
                queryParameters['dryRun'] = requestParameters.dryRun;
            }
            if (requestParameters.fieldManager !== undefined) {
                queryParameters['fieldManager'] = requestParameters.fieldManager;
            }
            if (requestParameters.fieldValidation !== undefined) {
                queryParameters['fieldValidation'] = requestParameters.fieldValidation;
            }
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/api/v1/namespaces/{namespace}/secrets/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: models_1.V1SecretToJSON(requestParameters.body),
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.V1SecretFromJSON(jsonValue));
        });
    }
    /**
     * replace the specified Secret
     */
    replaceNamespacedSecret(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.replaceNamespacedSecretRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * replace the specified Service
     */
    replaceNamespacedServiceRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.name === null || requestParameters.name === undefined) {
                throw new runtime.RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling replaceNamespacedService.');
            }
            if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                throw new runtime.RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling replaceNamespacedService.');
            }
            if (requestParameters.body === null || requestParameters.body === undefined) {
                throw new runtime.RequiredError('body', 'Required parameter requestParameters.body was null or undefined when calling replaceNamespacedService.');
            }
            const queryParameters = {};
            if (requestParameters.pretty !== undefined) {
                queryParameters['pretty'] = requestParameters.pretty;
            }
            if (requestParameters.dryRun !== undefined) {
                queryParameters['dryRun'] = requestParameters.dryRun;
            }
            if (requestParameters.fieldManager !== undefined) {
                queryParameters['fieldManager'] = requestParameters.fieldManager;
            }
            if (requestParameters.fieldValidation !== undefined) {
                queryParameters['fieldValidation'] = requestParameters.fieldValidation;
            }
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/api/v1/namespaces/{namespace}/services/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: models_1.V1ServiceToJSON(requestParameters.body),
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.V1ServiceFromJSON(jsonValue));
        });
    }
    /**
     * replace the specified Service
     */
    replaceNamespacedService(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.replaceNamespacedServiceRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * replace the specified ServiceAccount
     */
    replaceNamespacedServiceAccountRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.name === null || requestParameters.name === undefined) {
                throw new runtime.RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling replaceNamespacedServiceAccount.');
            }
            if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                throw new runtime.RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling replaceNamespacedServiceAccount.');
            }
            if (requestParameters.body === null || requestParameters.body === undefined) {
                throw new runtime.RequiredError('body', 'Required parameter requestParameters.body was null or undefined when calling replaceNamespacedServiceAccount.');
            }
            const queryParameters = {};
            if (requestParameters.pretty !== undefined) {
                queryParameters['pretty'] = requestParameters.pretty;
            }
            if (requestParameters.dryRun !== undefined) {
                queryParameters['dryRun'] = requestParameters.dryRun;
            }
            if (requestParameters.fieldManager !== undefined) {
                queryParameters['fieldManager'] = requestParameters.fieldManager;
            }
            if (requestParameters.fieldValidation !== undefined) {
                queryParameters['fieldValidation'] = requestParameters.fieldValidation;
            }
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/api/v1/namespaces/{namespace}/serviceaccounts/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: models_1.V1ServiceAccountToJSON(requestParameters.body),
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.V1ServiceAccountFromJSON(jsonValue));
        });
    }
    /**
     * replace the specified ServiceAccount
     */
    replaceNamespacedServiceAccount(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.replaceNamespacedServiceAccountRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * replace status of the specified Service
     */
    replaceNamespacedServiceStatusRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.name === null || requestParameters.name === undefined) {
                throw new runtime.RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling replaceNamespacedServiceStatus.');
            }
            if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                throw new runtime.RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling replaceNamespacedServiceStatus.');
            }
            if (requestParameters.body === null || requestParameters.body === undefined) {
                throw new runtime.RequiredError('body', 'Required parameter requestParameters.body was null or undefined when calling replaceNamespacedServiceStatus.');
            }
            const queryParameters = {};
            if (requestParameters.pretty !== undefined) {
                queryParameters['pretty'] = requestParameters.pretty;
            }
            if (requestParameters.dryRun !== undefined) {
                queryParameters['dryRun'] = requestParameters.dryRun;
            }
            if (requestParameters.fieldManager !== undefined) {
                queryParameters['fieldManager'] = requestParameters.fieldManager;
            }
            if (requestParameters.fieldValidation !== undefined) {
                queryParameters['fieldValidation'] = requestParameters.fieldValidation;
            }
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/api/v1/namespaces/{namespace}/services/{name}/status`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: models_1.V1ServiceToJSON(requestParameters.body),
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.V1ServiceFromJSON(jsonValue));
        });
    }
    /**
     * replace status of the specified Service
     */
    replaceNamespacedServiceStatus(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.replaceNamespacedServiceStatusRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * replace the specified Node
     */
    replaceNodeRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.name === null || requestParameters.name === undefined) {
                throw new runtime.RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling replaceNode.');
            }
            if (requestParameters.body === null || requestParameters.body === undefined) {
                throw new runtime.RequiredError('body', 'Required parameter requestParameters.body was null or undefined when calling replaceNode.');
            }
            const queryParameters = {};
            if (requestParameters.pretty !== undefined) {
                queryParameters['pretty'] = requestParameters.pretty;
            }
            if (requestParameters.dryRun !== undefined) {
                queryParameters['dryRun'] = requestParameters.dryRun;
            }
            if (requestParameters.fieldManager !== undefined) {
                queryParameters['fieldManager'] = requestParameters.fieldManager;
            }
            if (requestParameters.fieldValidation !== undefined) {
                queryParameters['fieldValidation'] = requestParameters.fieldValidation;
            }
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/api/v1/nodes/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: models_1.V1NodeToJSON(requestParameters.body),
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.V1NodeFromJSON(jsonValue));
        });
    }
    /**
     * replace the specified Node
     */
    replaceNode(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.replaceNodeRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * replace status of the specified Node
     */
    replaceNodeStatusRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.name === null || requestParameters.name === undefined) {
                throw new runtime.RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling replaceNodeStatus.');
            }
            if (requestParameters.body === null || requestParameters.body === undefined) {
                throw new runtime.RequiredError('body', 'Required parameter requestParameters.body was null or undefined when calling replaceNodeStatus.');
            }
            const queryParameters = {};
            if (requestParameters.pretty !== undefined) {
                queryParameters['pretty'] = requestParameters.pretty;
            }
            if (requestParameters.dryRun !== undefined) {
                queryParameters['dryRun'] = requestParameters.dryRun;
            }
            if (requestParameters.fieldManager !== undefined) {
                queryParameters['fieldManager'] = requestParameters.fieldManager;
            }
            if (requestParameters.fieldValidation !== undefined) {
                queryParameters['fieldValidation'] = requestParameters.fieldValidation;
            }
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/api/v1/nodes/{name}/status`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: models_1.V1NodeToJSON(requestParameters.body),
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.V1NodeFromJSON(jsonValue));
        });
    }
    /**
     * replace status of the specified Node
     */
    replaceNodeStatus(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.replaceNodeStatusRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * replace the specified PersistentVolume
     */
    replacePersistentVolumeRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.name === null || requestParameters.name === undefined) {
                throw new runtime.RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling replacePersistentVolume.');
            }
            if (requestParameters.body === null || requestParameters.body === undefined) {
                throw new runtime.RequiredError('body', 'Required parameter requestParameters.body was null or undefined when calling replacePersistentVolume.');
            }
            const queryParameters = {};
            if (requestParameters.pretty !== undefined) {
                queryParameters['pretty'] = requestParameters.pretty;
            }
            if (requestParameters.dryRun !== undefined) {
                queryParameters['dryRun'] = requestParameters.dryRun;
            }
            if (requestParameters.fieldManager !== undefined) {
                queryParameters['fieldManager'] = requestParameters.fieldManager;
            }
            if (requestParameters.fieldValidation !== undefined) {
                queryParameters['fieldValidation'] = requestParameters.fieldValidation;
            }
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/api/v1/persistentvolumes/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: models_1.V1PersistentVolumeToJSON(requestParameters.body),
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.V1PersistentVolumeFromJSON(jsonValue));
        });
    }
    /**
     * replace the specified PersistentVolume
     */
    replacePersistentVolume(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.replacePersistentVolumeRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * replace status of the specified PersistentVolume
     */
    replacePersistentVolumeStatusRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.name === null || requestParameters.name === undefined) {
                throw new runtime.RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling replacePersistentVolumeStatus.');
            }
            if (requestParameters.body === null || requestParameters.body === undefined) {
                throw new runtime.RequiredError('body', 'Required parameter requestParameters.body was null or undefined when calling replacePersistentVolumeStatus.');
            }
            const queryParameters = {};
            if (requestParameters.pretty !== undefined) {
                queryParameters['pretty'] = requestParameters.pretty;
            }
            if (requestParameters.dryRun !== undefined) {
                queryParameters['dryRun'] = requestParameters.dryRun;
            }
            if (requestParameters.fieldManager !== undefined) {
                queryParameters['fieldManager'] = requestParameters.fieldManager;
            }
            if (requestParameters.fieldValidation !== undefined) {
                queryParameters['fieldValidation'] = requestParameters.fieldValidation;
            }
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/api/v1/persistentvolumes/{name}/status`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: models_1.V1PersistentVolumeToJSON(requestParameters.body),
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.V1PersistentVolumeFromJSON(jsonValue));
        });
    }
    /**
     * replace status of the specified PersistentVolume
     */
    replacePersistentVolumeStatus(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.replacePersistentVolumeStatusRaw(requestParameters);
            return yield response.value();
        });
    }
}
exports.CoreV1Api = CoreV1Api;
