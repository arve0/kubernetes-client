/**
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: release-1.24
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import { V1APIResourceList, V1CertificateSigningRequest, V1CertificateSigningRequestList, V1DeleteOptions, V1Status } from '../models';
export interface CertificatesV1ApiCreateCertificateSigningRequestRequest {
    body: V1CertificateSigningRequest;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
}
export interface CertificatesV1ApiDeleteCertificateSigningRequestRequest {
    name: string;
    pretty?: string;
    dryRun?: string;
    gracePeriodSeconds?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    body?: V1DeleteOptions;
}
export interface CertificatesV1ApiDeleteCollectionCertificateSigningRequestRequest {
    pretty?: string;
    _continue?: string;
    dryRun?: string;
    fieldSelector?: string;
    gracePeriodSeconds?: number;
    labelSelector?: string;
    limit?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    timeoutSeconds?: number;
    body?: V1DeleteOptions;
}
export interface CertificatesV1ApiListCertificateSigningRequestRequest {
    pretty?: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}
export interface CertificatesV1ApiPatchCertificateSigningRequestRequest {
    name: string;
    body: object;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
    force?: boolean;
}
export interface CertificatesV1ApiPatchCertificateSigningRequestApprovalRequest {
    name: string;
    body: object;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
    force?: boolean;
}
export interface CertificatesV1ApiPatchCertificateSigningRequestStatusRequest {
    name: string;
    body: object;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
    force?: boolean;
}
export interface CertificatesV1ApiReadCertificateSigningRequestRequest {
    name: string;
    pretty?: string;
}
export interface CertificatesV1ApiReadCertificateSigningRequestApprovalRequest {
    name: string;
    pretty?: string;
}
export interface CertificatesV1ApiReadCertificateSigningRequestStatusRequest {
    name: string;
    pretty?: string;
}
export interface CertificatesV1ApiReplaceCertificateSigningRequestRequest {
    name: string;
    body: V1CertificateSigningRequest;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
}
export interface CertificatesV1ApiReplaceCertificateSigningRequestApprovalRequest {
    name: string;
    body: V1CertificateSigningRequest;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
}
export interface CertificatesV1ApiReplaceCertificateSigningRequestStatusRequest {
    name: string;
    body: V1CertificateSigningRequest;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
}
/**
 *
 */
export declare class CertificatesV1Api extends runtime.BaseAPI {
    /**
     * create a CertificateSigningRequest
     */
    createCertificateSigningRequestRaw(requestParameters: CertificatesV1ApiCreateCertificateSigningRequestRequest): Promise<runtime.ApiResponse<V1CertificateSigningRequest>>;
    /**
     * create a CertificateSigningRequest
     */
    createCertificateSigningRequest(requestParameters: CertificatesV1ApiCreateCertificateSigningRequestRequest): Promise<V1CertificateSigningRequest>;
    /**
     * delete a CertificateSigningRequest
     */
    deleteCertificateSigningRequestRaw(requestParameters: CertificatesV1ApiDeleteCertificateSigningRequestRequest): Promise<runtime.ApiResponse<V1Status>>;
    /**
     * delete a CertificateSigningRequest
     */
    deleteCertificateSigningRequest(requestParameters: CertificatesV1ApiDeleteCertificateSigningRequestRequest): Promise<V1Status>;
    /**
     * delete collection of CertificateSigningRequest
     */
    deleteCollectionCertificateSigningRequestRaw(requestParameters: CertificatesV1ApiDeleteCollectionCertificateSigningRequestRequest): Promise<runtime.ApiResponse<V1Status>>;
    /**
     * delete collection of CertificateSigningRequest
     */
    deleteCollectionCertificateSigningRequest(requestParameters: CertificatesV1ApiDeleteCollectionCertificateSigningRequestRequest): Promise<V1Status>;
    /**
     * get available resources
     */
    getAPIResourcesRaw(): Promise<runtime.ApiResponse<V1APIResourceList>>;
    /**
     * get available resources
     */
    getAPIResources(): Promise<V1APIResourceList>;
    /**
     * list or watch objects of kind CertificateSigningRequest
     */
    listCertificateSigningRequestRaw(requestParameters: CertificatesV1ApiListCertificateSigningRequestRequest): Promise<runtime.ApiResponse<V1CertificateSigningRequestList>>;
    /**
     * list or watch objects of kind CertificateSigningRequest
     */
    listCertificateSigningRequest(requestParameters: CertificatesV1ApiListCertificateSigningRequestRequest): Promise<V1CertificateSigningRequestList>;
    /**
     * partially update the specified CertificateSigningRequest
     */
    patchCertificateSigningRequestRaw(requestParameters: CertificatesV1ApiPatchCertificateSigningRequestRequest): Promise<runtime.ApiResponse<V1CertificateSigningRequest>>;
    /**
     * partially update the specified CertificateSigningRequest
     */
    patchCertificateSigningRequest(requestParameters: CertificatesV1ApiPatchCertificateSigningRequestRequest): Promise<V1CertificateSigningRequest>;
    /**
     * partially update approval of the specified CertificateSigningRequest
     */
    patchCertificateSigningRequestApprovalRaw(requestParameters: CertificatesV1ApiPatchCertificateSigningRequestApprovalRequest): Promise<runtime.ApiResponse<V1CertificateSigningRequest>>;
    /**
     * partially update approval of the specified CertificateSigningRequest
     */
    patchCertificateSigningRequestApproval(requestParameters: CertificatesV1ApiPatchCertificateSigningRequestApprovalRequest): Promise<V1CertificateSigningRequest>;
    /**
     * partially update status of the specified CertificateSigningRequest
     */
    patchCertificateSigningRequestStatusRaw(requestParameters: CertificatesV1ApiPatchCertificateSigningRequestStatusRequest): Promise<runtime.ApiResponse<V1CertificateSigningRequest>>;
    /**
     * partially update status of the specified CertificateSigningRequest
     */
    patchCertificateSigningRequestStatus(requestParameters: CertificatesV1ApiPatchCertificateSigningRequestStatusRequest): Promise<V1CertificateSigningRequest>;
    /**
     * read the specified CertificateSigningRequest
     */
    readCertificateSigningRequestRaw(requestParameters: CertificatesV1ApiReadCertificateSigningRequestRequest): Promise<runtime.ApiResponse<V1CertificateSigningRequest>>;
    /**
     * read the specified CertificateSigningRequest
     */
    readCertificateSigningRequest(requestParameters: CertificatesV1ApiReadCertificateSigningRequestRequest): Promise<V1CertificateSigningRequest>;
    /**
     * read approval of the specified CertificateSigningRequest
     */
    readCertificateSigningRequestApprovalRaw(requestParameters: CertificatesV1ApiReadCertificateSigningRequestApprovalRequest): Promise<runtime.ApiResponse<V1CertificateSigningRequest>>;
    /**
     * read approval of the specified CertificateSigningRequest
     */
    readCertificateSigningRequestApproval(requestParameters: CertificatesV1ApiReadCertificateSigningRequestApprovalRequest): Promise<V1CertificateSigningRequest>;
    /**
     * read status of the specified CertificateSigningRequest
     */
    readCertificateSigningRequestStatusRaw(requestParameters: CertificatesV1ApiReadCertificateSigningRequestStatusRequest): Promise<runtime.ApiResponse<V1CertificateSigningRequest>>;
    /**
     * read status of the specified CertificateSigningRequest
     */
    readCertificateSigningRequestStatus(requestParameters: CertificatesV1ApiReadCertificateSigningRequestStatusRequest): Promise<V1CertificateSigningRequest>;
    /**
     * replace the specified CertificateSigningRequest
     */
    replaceCertificateSigningRequestRaw(requestParameters: CertificatesV1ApiReplaceCertificateSigningRequestRequest): Promise<runtime.ApiResponse<V1CertificateSigningRequest>>;
    /**
     * replace the specified CertificateSigningRequest
     */
    replaceCertificateSigningRequest(requestParameters: CertificatesV1ApiReplaceCertificateSigningRequestRequest): Promise<V1CertificateSigningRequest>;
    /**
     * replace approval of the specified CertificateSigningRequest
     */
    replaceCertificateSigningRequestApprovalRaw(requestParameters: CertificatesV1ApiReplaceCertificateSigningRequestApprovalRequest): Promise<runtime.ApiResponse<V1CertificateSigningRequest>>;
    /**
     * replace approval of the specified CertificateSigningRequest
     */
    replaceCertificateSigningRequestApproval(requestParameters: CertificatesV1ApiReplaceCertificateSigningRequestApprovalRequest): Promise<V1CertificateSigningRequest>;
    /**
     * replace status of the specified CertificateSigningRequest
     */
    replaceCertificateSigningRequestStatusRaw(requestParameters: CertificatesV1ApiReplaceCertificateSigningRequestStatusRequest): Promise<runtime.ApiResponse<V1CertificateSigningRequest>>;
    /**
     * replace status of the specified CertificateSigningRequest
     */
    replaceCertificateSigningRequestStatus(requestParameters: CertificatesV1ApiReplaceCertificateSigningRequestStatusRequest): Promise<V1CertificateSigningRequest>;
}
