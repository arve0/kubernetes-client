/**
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: release-1.24
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import { V1APIResourceList, V1CSIDriver, V1CSIDriverList, V1CSINode, V1CSINodeList, V1CSIStorageCapacity, V1CSIStorageCapacityList, V1DeleteOptions, V1Status, V1StorageClass, V1StorageClassList, V1VolumeAttachment, V1VolumeAttachmentList } from '../models';
export interface StorageV1ApiCreateCSIDriverRequest {
    body: V1CSIDriver;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
}
export interface StorageV1ApiCreateCSINodeRequest {
    body: V1CSINode;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
}
export interface StorageV1ApiCreateNamespacedCSIStorageCapacityRequest {
    namespace: string;
    body: V1CSIStorageCapacity;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
}
export interface StorageV1ApiCreateStorageClassRequest {
    body: V1StorageClass;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
}
export interface StorageV1ApiCreateVolumeAttachmentRequest {
    body: V1VolumeAttachment;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
}
export interface StorageV1ApiDeleteCSIDriverRequest {
    name: string;
    pretty?: string;
    dryRun?: string;
    gracePeriodSeconds?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    body?: V1DeleteOptions;
}
export interface StorageV1ApiDeleteCSINodeRequest {
    name: string;
    pretty?: string;
    dryRun?: string;
    gracePeriodSeconds?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    body?: V1DeleteOptions;
}
export interface StorageV1ApiDeleteCollectionCSIDriverRequest {
    pretty?: string;
    _continue?: string;
    dryRun?: string;
    fieldSelector?: string;
    gracePeriodSeconds?: number;
    labelSelector?: string;
    limit?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    timeoutSeconds?: number;
    body?: V1DeleteOptions;
}
export interface StorageV1ApiDeleteCollectionCSINodeRequest {
    pretty?: string;
    _continue?: string;
    dryRun?: string;
    fieldSelector?: string;
    gracePeriodSeconds?: number;
    labelSelector?: string;
    limit?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    timeoutSeconds?: number;
    body?: V1DeleteOptions;
}
export interface StorageV1ApiDeleteCollectionNamespacedCSIStorageCapacityRequest {
    namespace: string;
    pretty?: string;
    _continue?: string;
    dryRun?: string;
    fieldSelector?: string;
    gracePeriodSeconds?: number;
    labelSelector?: string;
    limit?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    timeoutSeconds?: number;
    body?: V1DeleteOptions;
}
export interface StorageV1ApiDeleteCollectionStorageClassRequest {
    pretty?: string;
    _continue?: string;
    dryRun?: string;
    fieldSelector?: string;
    gracePeriodSeconds?: number;
    labelSelector?: string;
    limit?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    timeoutSeconds?: number;
    body?: V1DeleteOptions;
}
export interface StorageV1ApiDeleteCollectionVolumeAttachmentRequest {
    pretty?: string;
    _continue?: string;
    dryRun?: string;
    fieldSelector?: string;
    gracePeriodSeconds?: number;
    labelSelector?: string;
    limit?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    timeoutSeconds?: number;
    body?: V1DeleteOptions;
}
export interface StorageV1ApiDeleteNamespacedCSIStorageCapacityRequest {
    name: string;
    namespace: string;
    pretty?: string;
    dryRun?: string;
    gracePeriodSeconds?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    body?: V1DeleteOptions;
}
export interface StorageV1ApiDeleteStorageClassRequest {
    name: string;
    pretty?: string;
    dryRun?: string;
    gracePeriodSeconds?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    body?: V1DeleteOptions;
}
export interface StorageV1ApiDeleteVolumeAttachmentRequest {
    name: string;
    pretty?: string;
    dryRun?: string;
    gracePeriodSeconds?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    body?: V1DeleteOptions;
}
export interface StorageV1ApiListCSIDriverRequest {
    pretty?: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}
export interface StorageV1ApiListCSINodeRequest {
    pretty?: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}
export interface StorageV1ApiListCSIStorageCapacityForAllNamespacesRequest {
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}
export interface StorageV1ApiListNamespacedCSIStorageCapacityRequest {
    namespace: string;
    pretty?: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}
export interface StorageV1ApiListStorageClassRequest {
    pretty?: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}
export interface StorageV1ApiListVolumeAttachmentRequest {
    pretty?: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}
export interface StorageV1ApiPatchCSIDriverRequest {
    name: string;
    body: object;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
    force?: boolean;
}
export interface StorageV1ApiPatchCSINodeRequest {
    name: string;
    body: object;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
    force?: boolean;
}
export interface StorageV1ApiPatchNamespacedCSIStorageCapacityRequest {
    name: string;
    namespace: string;
    body: object;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
    force?: boolean;
}
export interface StorageV1ApiPatchStorageClassRequest {
    name: string;
    body: object;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
    force?: boolean;
}
export interface StorageV1ApiPatchVolumeAttachmentRequest {
    name: string;
    body: object;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
    force?: boolean;
}
export interface StorageV1ApiPatchVolumeAttachmentStatusRequest {
    name: string;
    body: object;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
    force?: boolean;
}
export interface StorageV1ApiReadCSIDriverRequest {
    name: string;
    pretty?: string;
}
export interface StorageV1ApiReadCSINodeRequest {
    name: string;
    pretty?: string;
}
export interface StorageV1ApiReadNamespacedCSIStorageCapacityRequest {
    name: string;
    namespace: string;
    pretty?: string;
}
export interface StorageV1ApiReadStorageClassRequest {
    name: string;
    pretty?: string;
}
export interface StorageV1ApiReadVolumeAttachmentRequest {
    name: string;
    pretty?: string;
}
export interface StorageV1ApiReadVolumeAttachmentStatusRequest {
    name: string;
    pretty?: string;
}
export interface StorageV1ApiReplaceCSIDriverRequest {
    name: string;
    body: V1CSIDriver;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
}
export interface StorageV1ApiReplaceCSINodeRequest {
    name: string;
    body: V1CSINode;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
}
export interface StorageV1ApiReplaceNamespacedCSIStorageCapacityRequest {
    name: string;
    namespace: string;
    body: V1CSIStorageCapacity;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
}
export interface StorageV1ApiReplaceStorageClassRequest {
    name: string;
    body: V1StorageClass;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
}
export interface StorageV1ApiReplaceVolumeAttachmentRequest {
    name: string;
    body: V1VolumeAttachment;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
}
export interface StorageV1ApiReplaceVolumeAttachmentStatusRequest {
    name: string;
    body: V1VolumeAttachment;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
}
/**
 *
 */
export declare class StorageV1Api extends runtime.BaseAPI {
    /**
     * create a CSIDriver
     */
    createCSIDriverRaw(requestParameters: StorageV1ApiCreateCSIDriverRequest): Promise<runtime.ApiResponse<V1CSIDriver>>;
    /**
     * create a CSIDriver
     */
    createCSIDriver(requestParameters: StorageV1ApiCreateCSIDriverRequest): Promise<V1CSIDriver>;
    /**
     * create a CSINode
     */
    createCSINodeRaw(requestParameters: StorageV1ApiCreateCSINodeRequest): Promise<runtime.ApiResponse<V1CSINode>>;
    /**
     * create a CSINode
     */
    createCSINode(requestParameters: StorageV1ApiCreateCSINodeRequest): Promise<V1CSINode>;
    /**
     * create a CSIStorageCapacity
     */
    createNamespacedCSIStorageCapacityRaw(requestParameters: StorageV1ApiCreateNamespacedCSIStorageCapacityRequest): Promise<runtime.ApiResponse<V1CSIStorageCapacity>>;
    /**
     * create a CSIStorageCapacity
     */
    createNamespacedCSIStorageCapacity(requestParameters: StorageV1ApiCreateNamespacedCSIStorageCapacityRequest): Promise<V1CSIStorageCapacity>;
    /**
     * create a StorageClass
     */
    createStorageClassRaw(requestParameters: StorageV1ApiCreateStorageClassRequest): Promise<runtime.ApiResponse<V1StorageClass>>;
    /**
     * create a StorageClass
     */
    createStorageClass(requestParameters: StorageV1ApiCreateStorageClassRequest): Promise<V1StorageClass>;
    /**
     * create a VolumeAttachment
     */
    createVolumeAttachmentRaw(requestParameters: StorageV1ApiCreateVolumeAttachmentRequest): Promise<runtime.ApiResponse<V1VolumeAttachment>>;
    /**
     * create a VolumeAttachment
     */
    createVolumeAttachment(requestParameters: StorageV1ApiCreateVolumeAttachmentRequest): Promise<V1VolumeAttachment>;
    /**
     * delete a CSIDriver
     */
    deleteCSIDriverRaw(requestParameters: StorageV1ApiDeleteCSIDriverRequest): Promise<runtime.ApiResponse<V1CSIDriver>>;
    /**
     * delete a CSIDriver
     */
    deleteCSIDriver(requestParameters: StorageV1ApiDeleteCSIDriverRequest): Promise<V1CSIDriver>;
    /**
     * delete a CSINode
     */
    deleteCSINodeRaw(requestParameters: StorageV1ApiDeleteCSINodeRequest): Promise<runtime.ApiResponse<V1CSINode>>;
    /**
     * delete a CSINode
     */
    deleteCSINode(requestParameters: StorageV1ApiDeleteCSINodeRequest): Promise<V1CSINode>;
    /**
     * delete collection of CSIDriver
     */
    deleteCollectionCSIDriverRaw(requestParameters: StorageV1ApiDeleteCollectionCSIDriverRequest): Promise<runtime.ApiResponse<V1Status>>;
    /**
     * delete collection of CSIDriver
     */
    deleteCollectionCSIDriver(requestParameters: StorageV1ApiDeleteCollectionCSIDriverRequest): Promise<V1Status>;
    /**
     * delete collection of CSINode
     */
    deleteCollectionCSINodeRaw(requestParameters: StorageV1ApiDeleteCollectionCSINodeRequest): Promise<runtime.ApiResponse<V1Status>>;
    /**
     * delete collection of CSINode
     */
    deleteCollectionCSINode(requestParameters: StorageV1ApiDeleteCollectionCSINodeRequest): Promise<V1Status>;
    /**
     * delete collection of CSIStorageCapacity
     */
    deleteCollectionNamespacedCSIStorageCapacityRaw(requestParameters: StorageV1ApiDeleteCollectionNamespacedCSIStorageCapacityRequest): Promise<runtime.ApiResponse<V1Status>>;
    /**
     * delete collection of CSIStorageCapacity
     */
    deleteCollectionNamespacedCSIStorageCapacity(requestParameters: StorageV1ApiDeleteCollectionNamespacedCSIStorageCapacityRequest): Promise<V1Status>;
    /**
     * delete collection of StorageClass
     */
    deleteCollectionStorageClassRaw(requestParameters: StorageV1ApiDeleteCollectionStorageClassRequest): Promise<runtime.ApiResponse<V1Status>>;
    /**
     * delete collection of StorageClass
     */
    deleteCollectionStorageClass(requestParameters: StorageV1ApiDeleteCollectionStorageClassRequest): Promise<V1Status>;
    /**
     * delete collection of VolumeAttachment
     */
    deleteCollectionVolumeAttachmentRaw(requestParameters: StorageV1ApiDeleteCollectionVolumeAttachmentRequest): Promise<runtime.ApiResponse<V1Status>>;
    /**
     * delete collection of VolumeAttachment
     */
    deleteCollectionVolumeAttachment(requestParameters: StorageV1ApiDeleteCollectionVolumeAttachmentRequest): Promise<V1Status>;
    /**
     * delete a CSIStorageCapacity
     */
    deleteNamespacedCSIStorageCapacityRaw(requestParameters: StorageV1ApiDeleteNamespacedCSIStorageCapacityRequest): Promise<runtime.ApiResponse<V1Status>>;
    /**
     * delete a CSIStorageCapacity
     */
    deleteNamespacedCSIStorageCapacity(requestParameters: StorageV1ApiDeleteNamespacedCSIStorageCapacityRequest): Promise<V1Status>;
    /**
     * delete a StorageClass
     */
    deleteStorageClassRaw(requestParameters: StorageV1ApiDeleteStorageClassRequest): Promise<runtime.ApiResponse<V1StorageClass>>;
    /**
     * delete a StorageClass
     */
    deleteStorageClass(requestParameters: StorageV1ApiDeleteStorageClassRequest): Promise<V1StorageClass>;
    /**
     * delete a VolumeAttachment
     */
    deleteVolumeAttachmentRaw(requestParameters: StorageV1ApiDeleteVolumeAttachmentRequest): Promise<runtime.ApiResponse<V1VolumeAttachment>>;
    /**
     * delete a VolumeAttachment
     */
    deleteVolumeAttachment(requestParameters: StorageV1ApiDeleteVolumeAttachmentRequest): Promise<V1VolumeAttachment>;
    /**
     * get available resources
     */
    getAPIResourcesRaw(): Promise<runtime.ApiResponse<V1APIResourceList>>;
    /**
     * get available resources
     */
    getAPIResources(): Promise<V1APIResourceList>;
    /**
     * list or watch objects of kind CSIDriver
     */
    listCSIDriverRaw(requestParameters: StorageV1ApiListCSIDriverRequest): Promise<runtime.ApiResponse<V1CSIDriverList>>;
    /**
     * list or watch objects of kind CSIDriver
     */
    listCSIDriver(requestParameters: StorageV1ApiListCSIDriverRequest): Promise<V1CSIDriverList>;
    /**
     * list or watch objects of kind CSINode
     */
    listCSINodeRaw(requestParameters: StorageV1ApiListCSINodeRequest): Promise<runtime.ApiResponse<V1CSINodeList>>;
    /**
     * list or watch objects of kind CSINode
     */
    listCSINode(requestParameters: StorageV1ApiListCSINodeRequest): Promise<V1CSINodeList>;
    /**
     * list or watch objects of kind CSIStorageCapacity
     */
    listCSIStorageCapacityForAllNamespacesRaw(requestParameters: StorageV1ApiListCSIStorageCapacityForAllNamespacesRequest): Promise<runtime.ApiResponse<V1CSIStorageCapacityList>>;
    /**
     * list or watch objects of kind CSIStorageCapacity
     */
    listCSIStorageCapacityForAllNamespaces(requestParameters: StorageV1ApiListCSIStorageCapacityForAllNamespacesRequest): Promise<V1CSIStorageCapacityList>;
    /**
     * list or watch objects of kind CSIStorageCapacity
     */
    listNamespacedCSIStorageCapacityRaw(requestParameters: StorageV1ApiListNamespacedCSIStorageCapacityRequest): Promise<runtime.ApiResponse<V1CSIStorageCapacityList>>;
    /**
     * list or watch objects of kind CSIStorageCapacity
     */
    listNamespacedCSIStorageCapacity(requestParameters: StorageV1ApiListNamespacedCSIStorageCapacityRequest): Promise<V1CSIStorageCapacityList>;
    /**
     * list or watch objects of kind StorageClass
     */
    listStorageClassRaw(requestParameters: StorageV1ApiListStorageClassRequest): Promise<runtime.ApiResponse<V1StorageClassList>>;
    /**
     * list or watch objects of kind StorageClass
     */
    listStorageClass(requestParameters: StorageV1ApiListStorageClassRequest): Promise<V1StorageClassList>;
    /**
     * list or watch objects of kind VolumeAttachment
     */
    listVolumeAttachmentRaw(requestParameters: StorageV1ApiListVolumeAttachmentRequest): Promise<runtime.ApiResponse<V1VolumeAttachmentList>>;
    /**
     * list or watch objects of kind VolumeAttachment
     */
    listVolumeAttachment(requestParameters: StorageV1ApiListVolumeAttachmentRequest): Promise<V1VolumeAttachmentList>;
    /**
     * partially update the specified CSIDriver
     */
    patchCSIDriverRaw(requestParameters: StorageV1ApiPatchCSIDriverRequest): Promise<runtime.ApiResponse<V1CSIDriver>>;
    /**
     * partially update the specified CSIDriver
     */
    patchCSIDriver(requestParameters: StorageV1ApiPatchCSIDriverRequest): Promise<V1CSIDriver>;
    /**
     * partially update the specified CSINode
     */
    patchCSINodeRaw(requestParameters: StorageV1ApiPatchCSINodeRequest): Promise<runtime.ApiResponse<V1CSINode>>;
    /**
     * partially update the specified CSINode
     */
    patchCSINode(requestParameters: StorageV1ApiPatchCSINodeRequest): Promise<V1CSINode>;
    /**
     * partially update the specified CSIStorageCapacity
     */
    patchNamespacedCSIStorageCapacityRaw(requestParameters: StorageV1ApiPatchNamespacedCSIStorageCapacityRequest): Promise<runtime.ApiResponse<V1CSIStorageCapacity>>;
    /**
     * partially update the specified CSIStorageCapacity
     */
    patchNamespacedCSIStorageCapacity(requestParameters: StorageV1ApiPatchNamespacedCSIStorageCapacityRequest): Promise<V1CSIStorageCapacity>;
    /**
     * partially update the specified StorageClass
     */
    patchStorageClassRaw(requestParameters: StorageV1ApiPatchStorageClassRequest): Promise<runtime.ApiResponse<V1StorageClass>>;
    /**
     * partially update the specified StorageClass
     */
    patchStorageClass(requestParameters: StorageV1ApiPatchStorageClassRequest): Promise<V1StorageClass>;
    /**
     * partially update the specified VolumeAttachment
     */
    patchVolumeAttachmentRaw(requestParameters: StorageV1ApiPatchVolumeAttachmentRequest): Promise<runtime.ApiResponse<V1VolumeAttachment>>;
    /**
     * partially update the specified VolumeAttachment
     */
    patchVolumeAttachment(requestParameters: StorageV1ApiPatchVolumeAttachmentRequest): Promise<V1VolumeAttachment>;
    /**
     * partially update status of the specified VolumeAttachment
     */
    patchVolumeAttachmentStatusRaw(requestParameters: StorageV1ApiPatchVolumeAttachmentStatusRequest): Promise<runtime.ApiResponse<V1VolumeAttachment>>;
    /**
     * partially update status of the specified VolumeAttachment
     */
    patchVolumeAttachmentStatus(requestParameters: StorageV1ApiPatchVolumeAttachmentStatusRequest): Promise<V1VolumeAttachment>;
    /**
     * read the specified CSIDriver
     */
    readCSIDriverRaw(requestParameters: StorageV1ApiReadCSIDriverRequest): Promise<runtime.ApiResponse<V1CSIDriver>>;
    /**
     * read the specified CSIDriver
     */
    readCSIDriver(requestParameters: StorageV1ApiReadCSIDriverRequest): Promise<V1CSIDriver>;
    /**
     * read the specified CSINode
     */
    readCSINodeRaw(requestParameters: StorageV1ApiReadCSINodeRequest): Promise<runtime.ApiResponse<V1CSINode>>;
    /**
     * read the specified CSINode
     */
    readCSINode(requestParameters: StorageV1ApiReadCSINodeRequest): Promise<V1CSINode>;
    /**
     * read the specified CSIStorageCapacity
     */
    readNamespacedCSIStorageCapacityRaw(requestParameters: StorageV1ApiReadNamespacedCSIStorageCapacityRequest): Promise<runtime.ApiResponse<V1CSIStorageCapacity>>;
    /**
     * read the specified CSIStorageCapacity
     */
    readNamespacedCSIStorageCapacity(requestParameters: StorageV1ApiReadNamespacedCSIStorageCapacityRequest): Promise<V1CSIStorageCapacity>;
    /**
     * read the specified StorageClass
     */
    readStorageClassRaw(requestParameters: StorageV1ApiReadStorageClassRequest): Promise<runtime.ApiResponse<V1StorageClass>>;
    /**
     * read the specified StorageClass
     */
    readStorageClass(requestParameters: StorageV1ApiReadStorageClassRequest): Promise<V1StorageClass>;
    /**
     * read the specified VolumeAttachment
     */
    readVolumeAttachmentRaw(requestParameters: StorageV1ApiReadVolumeAttachmentRequest): Promise<runtime.ApiResponse<V1VolumeAttachment>>;
    /**
     * read the specified VolumeAttachment
     */
    readVolumeAttachment(requestParameters: StorageV1ApiReadVolumeAttachmentRequest): Promise<V1VolumeAttachment>;
    /**
     * read status of the specified VolumeAttachment
     */
    readVolumeAttachmentStatusRaw(requestParameters: StorageV1ApiReadVolumeAttachmentStatusRequest): Promise<runtime.ApiResponse<V1VolumeAttachment>>;
    /**
     * read status of the specified VolumeAttachment
     */
    readVolumeAttachmentStatus(requestParameters: StorageV1ApiReadVolumeAttachmentStatusRequest): Promise<V1VolumeAttachment>;
    /**
     * replace the specified CSIDriver
     */
    replaceCSIDriverRaw(requestParameters: StorageV1ApiReplaceCSIDriverRequest): Promise<runtime.ApiResponse<V1CSIDriver>>;
    /**
     * replace the specified CSIDriver
     */
    replaceCSIDriver(requestParameters: StorageV1ApiReplaceCSIDriverRequest): Promise<V1CSIDriver>;
    /**
     * replace the specified CSINode
     */
    replaceCSINodeRaw(requestParameters: StorageV1ApiReplaceCSINodeRequest): Promise<runtime.ApiResponse<V1CSINode>>;
    /**
     * replace the specified CSINode
     */
    replaceCSINode(requestParameters: StorageV1ApiReplaceCSINodeRequest): Promise<V1CSINode>;
    /**
     * replace the specified CSIStorageCapacity
     */
    replaceNamespacedCSIStorageCapacityRaw(requestParameters: StorageV1ApiReplaceNamespacedCSIStorageCapacityRequest): Promise<runtime.ApiResponse<V1CSIStorageCapacity>>;
    /**
     * replace the specified CSIStorageCapacity
     */
    replaceNamespacedCSIStorageCapacity(requestParameters: StorageV1ApiReplaceNamespacedCSIStorageCapacityRequest): Promise<V1CSIStorageCapacity>;
    /**
     * replace the specified StorageClass
     */
    replaceStorageClassRaw(requestParameters: StorageV1ApiReplaceStorageClassRequest): Promise<runtime.ApiResponse<V1StorageClass>>;
    /**
     * replace the specified StorageClass
     */
    replaceStorageClass(requestParameters: StorageV1ApiReplaceStorageClassRequest): Promise<V1StorageClass>;
    /**
     * replace the specified VolumeAttachment
     */
    replaceVolumeAttachmentRaw(requestParameters: StorageV1ApiReplaceVolumeAttachmentRequest): Promise<runtime.ApiResponse<V1VolumeAttachment>>;
    /**
     * replace the specified VolumeAttachment
     */
    replaceVolumeAttachment(requestParameters: StorageV1ApiReplaceVolumeAttachmentRequest): Promise<V1VolumeAttachment>;
    /**
     * replace status of the specified VolumeAttachment
     */
    replaceVolumeAttachmentStatusRaw(requestParameters: StorageV1ApiReplaceVolumeAttachmentStatusRequest): Promise<runtime.ApiResponse<V1VolumeAttachment>>;
    /**
     * replace status of the specified VolumeAttachment
     */
    replaceVolumeAttachmentStatus(requestParameters: StorageV1ApiReplaceVolumeAttachmentStatusRequest): Promise<V1VolumeAttachment>;
}
