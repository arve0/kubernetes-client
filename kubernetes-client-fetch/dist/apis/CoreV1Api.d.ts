/**
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: release-1.24
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import { AuthenticationV1TokenRequest, CoreV1Event, CoreV1EventList, V1APIResourceList, V1Binding, V1ComponentStatus, V1ComponentStatusList, V1ConfigMap, V1ConfigMapList, V1DeleteOptions, V1Endpoints, V1EndpointsList, V1Eviction, V1LimitRange, V1LimitRangeList, V1Namespace, V1NamespaceList, V1Node, V1NodeList, V1PersistentVolume, V1PersistentVolumeClaim, V1PersistentVolumeClaimList, V1PersistentVolumeList, V1Pod, V1PodList, V1PodTemplate, V1PodTemplateList, V1ReplicationController, V1ReplicationControllerList, V1ResourceQuota, V1ResourceQuotaList, V1Scale, V1Secret, V1SecretList, V1Service, V1ServiceAccount, V1ServiceAccountList, V1ServiceList, V1Status } from '../models';
export interface CoreV1ApiConnectDeleteNamespacedPodProxyRequest {
    name: string;
    namespace: string;
    path?: string;
}
export interface CoreV1ApiConnectDeleteNamespacedPodProxyWithPathRequest {
    name: string;
    namespace: string;
    path: string;
    path2?: string;
}
export interface CoreV1ApiConnectDeleteNamespacedServiceProxyRequest {
    name: string;
    namespace: string;
    path?: string;
}
export interface CoreV1ApiConnectDeleteNamespacedServiceProxyWithPathRequest {
    name: string;
    namespace: string;
    path: string;
    path2?: string;
}
export interface CoreV1ApiConnectDeleteNodeProxyRequest {
    name: string;
    path?: string;
}
export interface CoreV1ApiConnectDeleteNodeProxyWithPathRequest {
    name: string;
    path: string;
    path2?: string;
}
export interface CoreV1ApiConnectGetNamespacedPodAttachRequest {
    name: string;
    namespace: string;
    container?: string;
    stderr?: boolean;
    stdin?: boolean;
    stdout?: boolean;
    tty?: boolean;
}
export interface CoreV1ApiConnectGetNamespacedPodExecRequest {
    name: string;
    namespace: string;
    command?: string;
    container?: string;
    stderr?: boolean;
    stdin?: boolean;
    stdout?: boolean;
    tty?: boolean;
}
export interface CoreV1ApiConnectGetNamespacedPodPortforwardRequest {
    name: string;
    namespace: string;
    ports?: number;
}
export interface CoreV1ApiConnectGetNamespacedPodProxyRequest {
    name: string;
    namespace: string;
    path?: string;
}
export interface CoreV1ApiConnectGetNamespacedPodProxyWithPathRequest {
    name: string;
    namespace: string;
    path: string;
    path2?: string;
}
export interface CoreV1ApiConnectGetNamespacedServiceProxyRequest {
    name: string;
    namespace: string;
    path?: string;
}
export interface CoreV1ApiConnectGetNamespacedServiceProxyWithPathRequest {
    name: string;
    namespace: string;
    path: string;
    path2?: string;
}
export interface CoreV1ApiConnectGetNodeProxyRequest {
    name: string;
    path?: string;
}
export interface CoreV1ApiConnectGetNodeProxyWithPathRequest {
    name: string;
    path: string;
    path2?: string;
}
export interface CoreV1ApiConnectHeadNamespacedPodProxyRequest {
    name: string;
    namespace: string;
    path?: string;
}
export interface CoreV1ApiConnectHeadNamespacedPodProxyWithPathRequest {
    name: string;
    namespace: string;
    path: string;
    path2?: string;
}
export interface CoreV1ApiConnectHeadNamespacedServiceProxyRequest {
    name: string;
    namespace: string;
    path?: string;
}
export interface CoreV1ApiConnectHeadNamespacedServiceProxyWithPathRequest {
    name: string;
    namespace: string;
    path: string;
    path2?: string;
}
export interface CoreV1ApiConnectHeadNodeProxyRequest {
    name: string;
    path?: string;
}
export interface CoreV1ApiConnectHeadNodeProxyWithPathRequest {
    name: string;
    path: string;
    path2?: string;
}
export interface CoreV1ApiConnectOptionsNamespacedPodProxyRequest {
    name: string;
    namespace: string;
    path?: string;
}
export interface CoreV1ApiConnectOptionsNamespacedPodProxyWithPathRequest {
    name: string;
    namespace: string;
    path: string;
    path2?: string;
}
export interface CoreV1ApiConnectOptionsNamespacedServiceProxyRequest {
    name: string;
    namespace: string;
    path?: string;
}
export interface CoreV1ApiConnectOptionsNamespacedServiceProxyWithPathRequest {
    name: string;
    namespace: string;
    path: string;
    path2?: string;
}
export interface CoreV1ApiConnectOptionsNodeProxyRequest {
    name: string;
    path?: string;
}
export interface CoreV1ApiConnectOptionsNodeProxyWithPathRequest {
    name: string;
    path: string;
    path2?: string;
}
export interface CoreV1ApiConnectPatchNamespacedPodProxyRequest {
    name: string;
    namespace: string;
    path?: string;
}
export interface CoreV1ApiConnectPatchNamespacedPodProxyWithPathRequest {
    name: string;
    namespace: string;
    path: string;
    path2?: string;
}
export interface CoreV1ApiConnectPatchNamespacedServiceProxyRequest {
    name: string;
    namespace: string;
    path?: string;
}
export interface CoreV1ApiConnectPatchNamespacedServiceProxyWithPathRequest {
    name: string;
    namespace: string;
    path: string;
    path2?: string;
}
export interface CoreV1ApiConnectPatchNodeProxyRequest {
    name: string;
    path?: string;
}
export interface CoreV1ApiConnectPatchNodeProxyWithPathRequest {
    name: string;
    path: string;
    path2?: string;
}
export interface CoreV1ApiConnectPostNamespacedPodAttachRequest {
    name: string;
    namespace: string;
    container?: string;
    stderr?: boolean;
    stdin?: boolean;
    stdout?: boolean;
    tty?: boolean;
}
export interface CoreV1ApiConnectPostNamespacedPodExecRequest {
    name: string;
    namespace: string;
    command?: string;
    container?: string;
    stderr?: boolean;
    stdin?: boolean;
    stdout?: boolean;
    tty?: boolean;
}
export interface CoreV1ApiConnectPostNamespacedPodPortforwardRequest {
    name: string;
    namespace: string;
    ports?: number;
}
export interface CoreV1ApiConnectPostNamespacedPodProxyRequest {
    name: string;
    namespace: string;
    path?: string;
}
export interface CoreV1ApiConnectPostNamespacedPodProxyWithPathRequest {
    name: string;
    namespace: string;
    path: string;
    path2?: string;
}
export interface CoreV1ApiConnectPostNamespacedServiceProxyRequest {
    name: string;
    namespace: string;
    path?: string;
}
export interface CoreV1ApiConnectPostNamespacedServiceProxyWithPathRequest {
    name: string;
    namespace: string;
    path: string;
    path2?: string;
}
export interface CoreV1ApiConnectPostNodeProxyRequest {
    name: string;
    path?: string;
}
export interface CoreV1ApiConnectPostNodeProxyWithPathRequest {
    name: string;
    path: string;
    path2?: string;
}
export interface CoreV1ApiConnectPutNamespacedPodProxyRequest {
    name: string;
    namespace: string;
    path?: string;
}
export interface CoreV1ApiConnectPutNamespacedPodProxyWithPathRequest {
    name: string;
    namespace: string;
    path: string;
    path2?: string;
}
export interface CoreV1ApiConnectPutNamespacedServiceProxyRequest {
    name: string;
    namespace: string;
    path?: string;
}
export interface CoreV1ApiConnectPutNamespacedServiceProxyWithPathRequest {
    name: string;
    namespace: string;
    path: string;
    path2?: string;
}
export interface CoreV1ApiConnectPutNodeProxyRequest {
    name: string;
    path?: string;
}
export interface CoreV1ApiConnectPutNodeProxyWithPathRequest {
    name: string;
    path: string;
    path2?: string;
}
export interface CoreV1ApiCreateNamespaceRequest {
    body: V1Namespace;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
}
export interface CoreV1ApiCreateNamespacedBindingRequest {
    namespace: string;
    body: V1Binding;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
    pretty?: string;
}
export interface CoreV1ApiCreateNamespacedConfigMapRequest {
    namespace: string;
    body: V1ConfigMap;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
}
export interface CoreV1ApiCreateNamespacedEndpointsRequest {
    namespace: string;
    body: V1Endpoints;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
}
export interface CoreV1ApiCreateNamespacedEventRequest {
    namespace: string;
    body: CoreV1Event;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
}
export interface CoreV1ApiCreateNamespacedLimitRangeRequest {
    namespace: string;
    body: V1LimitRange;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
}
export interface CoreV1ApiCreateNamespacedPersistentVolumeClaimRequest {
    namespace: string;
    body: V1PersistentVolumeClaim;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
}
export interface CoreV1ApiCreateNamespacedPodRequest {
    namespace: string;
    body: V1Pod;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
}
export interface CoreV1ApiCreateNamespacedPodBindingRequest {
    name: string;
    namespace: string;
    body: V1Binding;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
    pretty?: string;
}
export interface CoreV1ApiCreateNamespacedPodEvictionRequest {
    name: string;
    namespace: string;
    body: V1Eviction;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
    pretty?: string;
}
export interface CoreV1ApiCreateNamespacedPodTemplateRequest {
    namespace: string;
    body: V1PodTemplate;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
}
export interface CoreV1ApiCreateNamespacedReplicationControllerRequest {
    namespace: string;
    body: V1ReplicationController;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
}
export interface CoreV1ApiCreateNamespacedResourceQuotaRequest {
    namespace: string;
    body: V1ResourceQuota;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
}
export interface CoreV1ApiCreateNamespacedSecretRequest {
    namespace: string;
    body: V1Secret;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
}
export interface CoreV1ApiCreateNamespacedServiceRequest {
    namespace: string;
    body: V1Service;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
}
export interface CoreV1ApiCreateNamespacedServiceAccountRequest {
    namespace: string;
    body: V1ServiceAccount;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
}
export interface CoreV1ApiCreateNamespacedServiceAccountTokenRequest {
    name: string;
    namespace: string;
    body: AuthenticationV1TokenRequest;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
    pretty?: string;
}
export interface CoreV1ApiCreateNodeRequest {
    body: V1Node;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
}
export interface CoreV1ApiCreatePersistentVolumeRequest {
    body: V1PersistentVolume;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
}
export interface CoreV1ApiDeleteCollectionNamespacedConfigMapRequest {
    namespace: string;
    pretty?: string;
    _continue?: string;
    dryRun?: string;
    fieldSelector?: string;
    gracePeriodSeconds?: number;
    labelSelector?: string;
    limit?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    timeoutSeconds?: number;
    body?: V1DeleteOptions;
}
export interface CoreV1ApiDeleteCollectionNamespacedEndpointsRequest {
    namespace: string;
    pretty?: string;
    _continue?: string;
    dryRun?: string;
    fieldSelector?: string;
    gracePeriodSeconds?: number;
    labelSelector?: string;
    limit?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    timeoutSeconds?: number;
    body?: V1DeleteOptions;
}
export interface CoreV1ApiDeleteCollectionNamespacedEventRequest {
    namespace: string;
    pretty?: string;
    _continue?: string;
    dryRun?: string;
    fieldSelector?: string;
    gracePeriodSeconds?: number;
    labelSelector?: string;
    limit?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    timeoutSeconds?: number;
    body?: V1DeleteOptions;
}
export interface CoreV1ApiDeleteCollectionNamespacedLimitRangeRequest {
    namespace: string;
    pretty?: string;
    _continue?: string;
    dryRun?: string;
    fieldSelector?: string;
    gracePeriodSeconds?: number;
    labelSelector?: string;
    limit?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    timeoutSeconds?: number;
    body?: V1DeleteOptions;
}
export interface CoreV1ApiDeleteCollectionNamespacedPersistentVolumeClaimRequest {
    namespace: string;
    pretty?: string;
    _continue?: string;
    dryRun?: string;
    fieldSelector?: string;
    gracePeriodSeconds?: number;
    labelSelector?: string;
    limit?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    timeoutSeconds?: number;
    body?: V1DeleteOptions;
}
export interface CoreV1ApiDeleteCollectionNamespacedPodRequest {
    namespace: string;
    pretty?: string;
    _continue?: string;
    dryRun?: string;
    fieldSelector?: string;
    gracePeriodSeconds?: number;
    labelSelector?: string;
    limit?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    timeoutSeconds?: number;
    body?: V1DeleteOptions;
}
export interface CoreV1ApiDeleteCollectionNamespacedPodTemplateRequest {
    namespace: string;
    pretty?: string;
    _continue?: string;
    dryRun?: string;
    fieldSelector?: string;
    gracePeriodSeconds?: number;
    labelSelector?: string;
    limit?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    timeoutSeconds?: number;
    body?: V1DeleteOptions;
}
export interface CoreV1ApiDeleteCollectionNamespacedReplicationControllerRequest {
    namespace: string;
    pretty?: string;
    _continue?: string;
    dryRun?: string;
    fieldSelector?: string;
    gracePeriodSeconds?: number;
    labelSelector?: string;
    limit?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    timeoutSeconds?: number;
    body?: V1DeleteOptions;
}
export interface CoreV1ApiDeleteCollectionNamespacedResourceQuotaRequest {
    namespace: string;
    pretty?: string;
    _continue?: string;
    dryRun?: string;
    fieldSelector?: string;
    gracePeriodSeconds?: number;
    labelSelector?: string;
    limit?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    timeoutSeconds?: number;
    body?: V1DeleteOptions;
}
export interface CoreV1ApiDeleteCollectionNamespacedSecretRequest {
    namespace: string;
    pretty?: string;
    _continue?: string;
    dryRun?: string;
    fieldSelector?: string;
    gracePeriodSeconds?: number;
    labelSelector?: string;
    limit?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    timeoutSeconds?: number;
    body?: V1DeleteOptions;
}
export interface CoreV1ApiDeleteCollectionNamespacedServiceRequest {
    namespace: string;
    pretty?: string;
    _continue?: string;
    dryRun?: string;
    fieldSelector?: string;
    gracePeriodSeconds?: number;
    labelSelector?: string;
    limit?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    timeoutSeconds?: number;
    body?: V1DeleteOptions;
}
export interface CoreV1ApiDeleteCollectionNamespacedServiceAccountRequest {
    namespace: string;
    pretty?: string;
    _continue?: string;
    dryRun?: string;
    fieldSelector?: string;
    gracePeriodSeconds?: number;
    labelSelector?: string;
    limit?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    timeoutSeconds?: number;
    body?: V1DeleteOptions;
}
export interface CoreV1ApiDeleteCollectionNodeRequest {
    pretty?: string;
    _continue?: string;
    dryRun?: string;
    fieldSelector?: string;
    gracePeriodSeconds?: number;
    labelSelector?: string;
    limit?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    timeoutSeconds?: number;
    body?: V1DeleteOptions;
}
export interface CoreV1ApiDeleteCollectionPersistentVolumeRequest {
    pretty?: string;
    _continue?: string;
    dryRun?: string;
    fieldSelector?: string;
    gracePeriodSeconds?: number;
    labelSelector?: string;
    limit?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    timeoutSeconds?: number;
    body?: V1DeleteOptions;
}
export interface CoreV1ApiDeleteNamespaceRequest {
    name: string;
    pretty?: string;
    dryRun?: string;
    gracePeriodSeconds?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    body?: V1DeleteOptions;
}
export interface CoreV1ApiDeleteNamespacedConfigMapRequest {
    name: string;
    namespace: string;
    pretty?: string;
    dryRun?: string;
    gracePeriodSeconds?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    body?: V1DeleteOptions;
}
export interface CoreV1ApiDeleteNamespacedEndpointsRequest {
    name: string;
    namespace: string;
    pretty?: string;
    dryRun?: string;
    gracePeriodSeconds?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    body?: V1DeleteOptions;
}
export interface CoreV1ApiDeleteNamespacedEventRequest {
    name: string;
    namespace: string;
    pretty?: string;
    dryRun?: string;
    gracePeriodSeconds?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    body?: V1DeleteOptions;
}
export interface CoreV1ApiDeleteNamespacedLimitRangeRequest {
    name: string;
    namespace: string;
    pretty?: string;
    dryRun?: string;
    gracePeriodSeconds?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    body?: V1DeleteOptions;
}
export interface CoreV1ApiDeleteNamespacedPersistentVolumeClaimRequest {
    name: string;
    namespace: string;
    pretty?: string;
    dryRun?: string;
    gracePeriodSeconds?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    body?: V1DeleteOptions;
}
export interface CoreV1ApiDeleteNamespacedPodRequest {
    name: string;
    namespace: string;
    pretty?: string;
    dryRun?: string;
    gracePeriodSeconds?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    body?: V1DeleteOptions;
}
export interface CoreV1ApiDeleteNamespacedPodTemplateRequest {
    name: string;
    namespace: string;
    pretty?: string;
    dryRun?: string;
    gracePeriodSeconds?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    body?: V1DeleteOptions;
}
export interface CoreV1ApiDeleteNamespacedReplicationControllerRequest {
    name: string;
    namespace: string;
    pretty?: string;
    dryRun?: string;
    gracePeriodSeconds?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    body?: V1DeleteOptions;
}
export interface CoreV1ApiDeleteNamespacedResourceQuotaRequest {
    name: string;
    namespace: string;
    pretty?: string;
    dryRun?: string;
    gracePeriodSeconds?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    body?: V1DeleteOptions;
}
export interface CoreV1ApiDeleteNamespacedSecretRequest {
    name: string;
    namespace: string;
    pretty?: string;
    dryRun?: string;
    gracePeriodSeconds?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    body?: V1DeleteOptions;
}
export interface CoreV1ApiDeleteNamespacedServiceRequest {
    name: string;
    namespace: string;
    pretty?: string;
    dryRun?: string;
    gracePeriodSeconds?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    body?: V1DeleteOptions;
}
export interface CoreV1ApiDeleteNamespacedServiceAccountRequest {
    name: string;
    namespace: string;
    pretty?: string;
    dryRun?: string;
    gracePeriodSeconds?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    body?: V1DeleteOptions;
}
export interface CoreV1ApiDeleteNodeRequest {
    name: string;
    pretty?: string;
    dryRun?: string;
    gracePeriodSeconds?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    body?: V1DeleteOptions;
}
export interface CoreV1ApiDeletePersistentVolumeRequest {
    name: string;
    pretty?: string;
    dryRun?: string;
    gracePeriodSeconds?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    body?: V1DeleteOptions;
}
export interface CoreV1ApiListComponentStatusRequest {
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}
export interface CoreV1ApiListConfigMapForAllNamespacesRequest {
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}
export interface CoreV1ApiListEndpointsForAllNamespacesRequest {
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}
export interface CoreV1ApiListEventForAllNamespacesRequest {
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}
export interface CoreV1ApiListLimitRangeForAllNamespacesRequest {
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}
export interface CoreV1ApiListNamespaceRequest {
    pretty?: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}
export interface CoreV1ApiListNamespacedConfigMapRequest {
    namespace: string;
    pretty?: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}
export interface CoreV1ApiListNamespacedEndpointsRequest {
    namespace: string;
    pretty?: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}
export interface CoreV1ApiListNamespacedEventRequest {
    namespace: string;
    pretty?: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}
export interface CoreV1ApiListNamespacedLimitRangeRequest {
    namespace: string;
    pretty?: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}
export interface CoreV1ApiListNamespacedPersistentVolumeClaimRequest {
    namespace: string;
    pretty?: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}
export interface CoreV1ApiListNamespacedPodRequest {
    namespace: string;
    pretty?: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}
export interface CoreV1ApiListNamespacedPodTemplateRequest {
    namespace: string;
    pretty?: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}
export interface CoreV1ApiListNamespacedReplicationControllerRequest {
    namespace: string;
    pretty?: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}
export interface CoreV1ApiListNamespacedResourceQuotaRequest {
    namespace: string;
    pretty?: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}
export interface CoreV1ApiListNamespacedSecretRequest {
    namespace: string;
    pretty?: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}
export interface CoreV1ApiListNamespacedServiceRequest {
    namespace: string;
    pretty?: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}
export interface CoreV1ApiListNamespacedServiceAccountRequest {
    namespace: string;
    pretty?: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}
export interface CoreV1ApiListNodeRequest {
    pretty?: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}
export interface CoreV1ApiListPersistentVolumeRequest {
    pretty?: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}
export interface CoreV1ApiListPersistentVolumeClaimForAllNamespacesRequest {
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}
export interface CoreV1ApiListPodForAllNamespacesRequest {
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}
export interface CoreV1ApiListPodTemplateForAllNamespacesRequest {
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}
export interface CoreV1ApiListReplicationControllerForAllNamespacesRequest {
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}
export interface CoreV1ApiListResourceQuotaForAllNamespacesRequest {
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}
export interface CoreV1ApiListSecretForAllNamespacesRequest {
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}
export interface CoreV1ApiListServiceAccountForAllNamespacesRequest {
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}
export interface CoreV1ApiListServiceForAllNamespacesRequest {
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}
export interface CoreV1ApiPatchNamespaceRequest {
    name: string;
    body: object;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
    force?: boolean;
}
export interface CoreV1ApiPatchNamespaceStatusRequest {
    name: string;
    body: object;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
    force?: boolean;
}
export interface CoreV1ApiPatchNamespacedConfigMapRequest {
    name: string;
    namespace: string;
    body: object;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
    force?: boolean;
}
export interface CoreV1ApiPatchNamespacedEndpointsRequest {
    name: string;
    namespace: string;
    body: object;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
    force?: boolean;
}
export interface CoreV1ApiPatchNamespacedEventRequest {
    name: string;
    namespace: string;
    body: object;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
    force?: boolean;
}
export interface CoreV1ApiPatchNamespacedLimitRangeRequest {
    name: string;
    namespace: string;
    body: object;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
    force?: boolean;
}
export interface CoreV1ApiPatchNamespacedPersistentVolumeClaimRequest {
    name: string;
    namespace: string;
    body: object;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
    force?: boolean;
}
export interface CoreV1ApiPatchNamespacedPersistentVolumeClaimStatusRequest {
    name: string;
    namespace: string;
    body: object;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
    force?: boolean;
}
export interface CoreV1ApiPatchNamespacedPodRequest {
    name: string;
    namespace: string;
    body: object;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
    force?: boolean;
}
export interface CoreV1ApiPatchNamespacedPodEphemeralcontainersRequest {
    name: string;
    namespace: string;
    body: object;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
    force?: boolean;
}
export interface CoreV1ApiPatchNamespacedPodStatusRequest {
    name: string;
    namespace: string;
    body: object;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
    force?: boolean;
}
export interface CoreV1ApiPatchNamespacedPodTemplateRequest {
    name: string;
    namespace: string;
    body: object;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
    force?: boolean;
}
export interface CoreV1ApiPatchNamespacedReplicationControllerRequest {
    name: string;
    namespace: string;
    body: object;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
    force?: boolean;
}
export interface CoreV1ApiPatchNamespacedReplicationControllerScaleRequest {
    name: string;
    namespace: string;
    body: object;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
    force?: boolean;
}
export interface CoreV1ApiPatchNamespacedReplicationControllerStatusRequest {
    name: string;
    namespace: string;
    body: object;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
    force?: boolean;
}
export interface CoreV1ApiPatchNamespacedResourceQuotaRequest {
    name: string;
    namespace: string;
    body: object;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
    force?: boolean;
}
export interface CoreV1ApiPatchNamespacedResourceQuotaStatusRequest {
    name: string;
    namespace: string;
    body: object;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
    force?: boolean;
}
export interface CoreV1ApiPatchNamespacedSecretRequest {
    name: string;
    namespace: string;
    body: object;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
    force?: boolean;
}
export interface CoreV1ApiPatchNamespacedServiceRequest {
    name: string;
    namespace: string;
    body: object;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
    force?: boolean;
}
export interface CoreV1ApiPatchNamespacedServiceAccountRequest {
    name: string;
    namespace: string;
    body: object;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
    force?: boolean;
}
export interface CoreV1ApiPatchNamespacedServiceStatusRequest {
    name: string;
    namespace: string;
    body: object;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
    force?: boolean;
}
export interface CoreV1ApiPatchNodeRequest {
    name: string;
    body: object;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
    force?: boolean;
}
export interface CoreV1ApiPatchNodeStatusRequest {
    name: string;
    body: object;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
    force?: boolean;
}
export interface CoreV1ApiPatchPersistentVolumeRequest {
    name: string;
    body: object;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
    force?: boolean;
}
export interface CoreV1ApiPatchPersistentVolumeStatusRequest {
    name: string;
    body: object;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
    force?: boolean;
}
export interface CoreV1ApiReadComponentStatusRequest {
    name: string;
    pretty?: string;
}
export interface CoreV1ApiReadNamespaceRequest {
    name: string;
    pretty?: string;
}
export interface CoreV1ApiReadNamespaceStatusRequest {
    name: string;
    pretty?: string;
}
export interface CoreV1ApiReadNamespacedConfigMapRequest {
    name: string;
    namespace: string;
    pretty?: string;
}
export interface CoreV1ApiReadNamespacedEndpointsRequest {
    name: string;
    namespace: string;
    pretty?: string;
}
export interface CoreV1ApiReadNamespacedEventRequest {
    name: string;
    namespace: string;
    pretty?: string;
}
export interface CoreV1ApiReadNamespacedLimitRangeRequest {
    name: string;
    namespace: string;
    pretty?: string;
}
export interface CoreV1ApiReadNamespacedPersistentVolumeClaimRequest {
    name: string;
    namespace: string;
    pretty?: string;
}
export interface CoreV1ApiReadNamespacedPersistentVolumeClaimStatusRequest {
    name: string;
    namespace: string;
    pretty?: string;
}
export interface CoreV1ApiReadNamespacedPodRequest {
    name: string;
    namespace: string;
    pretty?: string;
}
export interface CoreV1ApiReadNamespacedPodEphemeralcontainersRequest {
    name: string;
    namespace: string;
    pretty?: string;
}
export interface CoreV1ApiReadNamespacedPodLogRequest {
    name: string;
    namespace: string;
    container?: string;
    follow?: boolean;
    insecureSkipTLSVerifyBackend?: boolean;
    limitBytes?: number;
    pretty?: string;
    previous?: boolean;
    sinceSeconds?: number;
    tailLines?: number;
    timestamps?: boolean;
}
export interface CoreV1ApiReadNamespacedPodStatusRequest {
    name: string;
    namespace: string;
    pretty?: string;
}
export interface CoreV1ApiReadNamespacedPodTemplateRequest {
    name: string;
    namespace: string;
    pretty?: string;
}
export interface CoreV1ApiReadNamespacedReplicationControllerRequest {
    name: string;
    namespace: string;
    pretty?: string;
}
export interface CoreV1ApiReadNamespacedReplicationControllerScaleRequest {
    name: string;
    namespace: string;
    pretty?: string;
}
export interface CoreV1ApiReadNamespacedReplicationControllerStatusRequest {
    name: string;
    namespace: string;
    pretty?: string;
}
export interface CoreV1ApiReadNamespacedResourceQuotaRequest {
    name: string;
    namespace: string;
    pretty?: string;
}
export interface CoreV1ApiReadNamespacedResourceQuotaStatusRequest {
    name: string;
    namespace: string;
    pretty?: string;
}
export interface CoreV1ApiReadNamespacedSecretRequest {
    name: string;
    namespace: string;
    pretty?: string;
}
export interface CoreV1ApiReadNamespacedServiceRequest {
    name: string;
    namespace: string;
    pretty?: string;
}
export interface CoreV1ApiReadNamespacedServiceAccountRequest {
    name: string;
    namespace: string;
    pretty?: string;
}
export interface CoreV1ApiReadNamespacedServiceStatusRequest {
    name: string;
    namespace: string;
    pretty?: string;
}
export interface CoreV1ApiReadNodeRequest {
    name: string;
    pretty?: string;
}
export interface CoreV1ApiReadNodeStatusRequest {
    name: string;
    pretty?: string;
}
export interface CoreV1ApiReadPersistentVolumeRequest {
    name: string;
    pretty?: string;
}
export interface CoreV1ApiReadPersistentVolumeStatusRequest {
    name: string;
    pretty?: string;
}
export interface CoreV1ApiReplaceNamespaceRequest {
    name: string;
    body: V1Namespace;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
}
export interface CoreV1ApiReplaceNamespaceFinalizeRequest {
    name: string;
    body: V1Namespace;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
    pretty?: string;
}
export interface CoreV1ApiReplaceNamespaceStatusRequest {
    name: string;
    body: V1Namespace;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
}
export interface CoreV1ApiReplaceNamespacedConfigMapRequest {
    name: string;
    namespace: string;
    body: V1ConfigMap;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
}
export interface CoreV1ApiReplaceNamespacedEndpointsRequest {
    name: string;
    namespace: string;
    body: V1Endpoints;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
}
export interface CoreV1ApiReplaceNamespacedEventRequest {
    name: string;
    namespace: string;
    body: CoreV1Event;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
}
export interface CoreV1ApiReplaceNamespacedLimitRangeRequest {
    name: string;
    namespace: string;
    body: V1LimitRange;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
}
export interface CoreV1ApiReplaceNamespacedPersistentVolumeClaimRequest {
    name: string;
    namespace: string;
    body: V1PersistentVolumeClaim;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
}
export interface CoreV1ApiReplaceNamespacedPersistentVolumeClaimStatusRequest {
    name: string;
    namespace: string;
    body: V1PersistentVolumeClaim;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
}
export interface CoreV1ApiReplaceNamespacedPodRequest {
    name: string;
    namespace: string;
    body: V1Pod;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
}
export interface CoreV1ApiReplaceNamespacedPodEphemeralcontainersRequest {
    name: string;
    namespace: string;
    body: V1Pod;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
}
export interface CoreV1ApiReplaceNamespacedPodStatusRequest {
    name: string;
    namespace: string;
    body: V1Pod;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
}
export interface CoreV1ApiReplaceNamespacedPodTemplateRequest {
    name: string;
    namespace: string;
    body: V1PodTemplate;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
}
export interface CoreV1ApiReplaceNamespacedReplicationControllerRequest {
    name: string;
    namespace: string;
    body: V1ReplicationController;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
}
export interface CoreV1ApiReplaceNamespacedReplicationControllerScaleRequest {
    name: string;
    namespace: string;
    body: V1Scale;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
}
export interface CoreV1ApiReplaceNamespacedReplicationControllerStatusRequest {
    name: string;
    namespace: string;
    body: V1ReplicationController;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
}
export interface CoreV1ApiReplaceNamespacedResourceQuotaRequest {
    name: string;
    namespace: string;
    body: V1ResourceQuota;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
}
export interface CoreV1ApiReplaceNamespacedResourceQuotaStatusRequest {
    name: string;
    namespace: string;
    body: V1ResourceQuota;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
}
export interface CoreV1ApiReplaceNamespacedSecretRequest {
    name: string;
    namespace: string;
    body: V1Secret;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
}
export interface CoreV1ApiReplaceNamespacedServiceRequest {
    name: string;
    namespace: string;
    body: V1Service;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
}
export interface CoreV1ApiReplaceNamespacedServiceAccountRequest {
    name: string;
    namespace: string;
    body: V1ServiceAccount;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
}
export interface CoreV1ApiReplaceNamespacedServiceStatusRequest {
    name: string;
    namespace: string;
    body: V1Service;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
}
export interface CoreV1ApiReplaceNodeRequest {
    name: string;
    body: V1Node;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
}
export interface CoreV1ApiReplaceNodeStatusRequest {
    name: string;
    body: V1Node;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
}
export interface CoreV1ApiReplacePersistentVolumeRequest {
    name: string;
    body: V1PersistentVolume;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
}
export interface CoreV1ApiReplacePersistentVolumeStatusRequest {
    name: string;
    body: V1PersistentVolume;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
}
/**
 *
 */
export declare class CoreV1Api extends runtime.BaseAPI {
    /**
     * connect DELETE requests to proxy of Pod
     */
    connectDeleteNamespacedPodProxyRaw(requestParameters: CoreV1ApiConnectDeleteNamespacedPodProxyRequest): Promise<runtime.ApiResponse<string>>;
    /**
     * connect DELETE requests to proxy of Pod
     */
    connectDeleteNamespacedPodProxy(requestParameters: CoreV1ApiConnectDeleteNamespacedPodProxyRequest): Promise<string>;
    /**
     * connect DELETE requests to proxy of Pod
     */
    connectDeleteNamespacedPodProxyWithPathRaw(requestParameters: CoreV1ApiConnectDeleteNamespacedPodProxyWithPathRequest): Promise<runtime.ApiResponse<string>>;
    /**
     * connect DELETE requests to proxy of Pod
     */
    connectDeleteNamespacedPodProxyWithPath(requestParameters: CoreV1ApiConnectDeleteNamespacedPodProxyWithPathRequest): Promise<string>;
    /**
     * connect DELETE requests to proxy of Service
     */
    connectDeleteNamespacedServiceProxyRaw(requestParameters: CoreV1ApiConnectDeleteNamespacedServiceProxyRequest): Promise<runtime.ApiResponse<string>>;
    /**
     * connect DELETE requests to proxy of Service
     */
    connectDeleteNamespacedServiceProxy(requestParameters: CoreV1ApiConnectDeleteNamespacedServiceProxyRequest): Promise<string>;
    /**
     * connect DELETE requests to proxy of Service
     */
    connectDeleteNamespacedServiceProxyWithPathRaw(requestParameters: CoreV1ApiConnectDeleteNamespacedServiceProxyWithPathRequest): Promise<runtime.ApiResponse<string>>;
    /**
     * connect DELETE requests to proxy of Service
     */
    connectDeleteNamespacedServiceProxyWithPath(requestParameters: CoreV1ApiConnectDeleteNamespacedServiceProxyWithPathRequest): Promise<string>;
    /**
     * connect DELETE requests to proxy of Node
     */
    connectDeleteNodeProxyRaw(requestParameters: CoreV1ApiConnectDeleteNodeProxyRequest): Promise<runtime.ApiResponse<string>>;
    /**
     * connect DELETE requests to proxy of Node
     */
    connectDeleteNodeProxy(requestParameters: CoreV1ApiConnectDeleteNodeProxyRequest): Promise<string>;
    /**
     * connect DELETE requests to proxy of Node
     */
    connectDeleteNodeProxyWithPathRaw(requestParameters: CoreV1ApiConnectDeleteNodeProxyWithPathRequest): Promise<runtime.ApiResponse<string>>;
    /**
     * connect DELETE requests to proxy of Node
     */
    connectDeleteNodeProxyWithPath(requestParameters: CoreV1ApiConnectDeleteNodeProxyWithPathRequest): Promise<string>;
    /**
     * connect GET requests to attach of Pod
     */
    connectGetNamespacedPodAttachRaw(requestParameters: CoreV1ApiConnectGetNamespacedPodAttachRequest): Promise<runtime.ApiResponse<string>>;
    /**
     * connect GET requests to attach of Pod
     */
    connectGetNamespacedPodAttach(requestParameters: CoreV1ApiConnectGetNamespacedPodAttachRequest): Promise<string>;
    /**
     * connect GET requests to exec of Pod
     */
    connectGetNamespacedPodExecRaw(requestParameters: CoreV1ApiConnectGetNamespacedPodExecRequest): Promise<runtime.ApiResponse<string>>;
    /**
     * connect GET requests to exec of Pod
     */
    connectGetNamespacedPodExec(requestParameters: CoreV1ApiConnectGetNamespacedPodExecRequest): Promise<string>;
    /**
     * connect GET requests to portforward of Pod
     */
    connectGetNamespacedPodPortforwardRaw(requestParameters: CoreV1ApiConnectGetNamespacedPodPortforwardRequest): Promise<runtime.ApiResponse<string>>;
    /**
     * connect GET requests to portforward of Pod
     */
    connectGetNamespacedPodPortforward(requestParameters: CoreV1ApiConnectGetNamespacedPodPortforwardRequest): Promise<string>;
    /**
     * connect GET requests to proxy of Pod
     */
    connectGetNamespacedPodProxyRaw(requestParameters: CoreV1ApiConnectGetNamespacedPodProxyRequest): Promise<runtime.ApiResponse<string>>;
    /**
     * connect GET requests to proxy of Pod
     */
    connectGetNamespacedPodProxy(requestParameters: CoreV1ApiConnectGetNamespacedPodProxyRequest): Promise<string>;
    /**
     * connect GET requests to proxy of Pod
     */
    connectGetNamespacedPodProxyWithPathRaw(requestParameters: CoreV1ApiConnectGetNamespacedPodProxyWithPathRequest): Promise<runtime.ApiResponse<string>>;
    /**
     * connect GET requests to proxy of Pod
     */
    connectGetNamespacedPodProxyWithPath(requestParameters: CoreV1ApiConnectGetNamespacedPodProxyWithPathRequest): Promise<string>;
    /**
     * connect GET requests to proxy of Service
     */
    connectGetNamespacedServiceProxyRaw(requestParameters: CoreV1ApiConnectGetNamespacedServiceProxyRequest): Promise<runtime.ApiResponse<string>>;
    /**
     * connect GET requests to proxy of Service
     */
    connectGetNamespacedServiceProxy(requestParameters: CoreV1ApiConnectGetNamespacedServiceProxyRequest): Promise<string>;
    /**
     * connect GET requests to proxy of Service
     */
    connectGetNamespacedServiceProxyWithPathRaw(requestParameters: CoreV1ApiConnectGetNamespacedServiceProxyWithPathRequest): Promise<runtime.ApiResponse<string>>;
    /**
     * connect GET requests to proxy of Service
     */
    connectGetNamespacedServiceProxyWithPath(requestParameters: CoreV1ApiConnectGetNamespacedServiceProxyWithPathRequest): Promise<string>;
    /**
     * connect GET requests to proxy of Node
     */
    connectGetNodeProxyRaw(requestParameters: CoreV1ApiConnectGetNodeProxyRequest): Promise<runtime.ApiResponse<string>>;
    /**
     * connect GET requests to proxy of Node
     */
    connectGetNodeProxy(requestParameters: CoreV1ApiConnectGetNodeProxyRequest): Promise<string>;
    /**
     * connect GET requests to proxy of Node
     */
    connectGetNodeProxyWithPathRaw(requestParameters: CoreV1ApiConnectGetNodeProxyWithPathRequest): Promise<runtime.ApiResponse<string>>;
    /**
     * connect GET requests to proxy of Node
     */
    connectGetNodeProxyWithPath(requestParameters: CoreV1ApiConnectGetNodeProxyWithPathRequest): Promise<string>;
    /**
     * connect HEAD requests to proxy of Pod
     */
    connectHeadNamespacedPodProxyRaw(requestParameters: CoreV1ApiConnectHeadNamespacedPodProxyRequest): Promise<runtime.ApiResponse<string>>;
    /**
     * connect HEAD requests to proxy of Pod
     */
    connectHeadNamespacedPodProxy(requestParameters: CoreV1ApiConnectHeadNamespacedPodProxyRequest): Promise<string>;
    /**
     * connect HEAD requests to proxy of Pod
     */
    connectHeadNamespacedPodProxyWithPathRaw(requestParameters: CoreV1ApiConnectHeadNamespacedPodProxyWithPathRequest): Promise<runtime.ApiResponse<string>>;
    /**
     * connect HEAD requests to proxy of Pod
     */
    connectHeadNamespacedPodProxyWithPath(requestParameters: CoreV1ApiConnectHeadNamespacedPodProxyWithPathRequest): Promise<string>;
    /**
     * connect HEAD requests to proxy of Service
     */
    connectHeadNamespacedServiceProxyRaw(requestParameters: CoreV1ApiConnectHeadNamespacedServiceProxyRequest): Promise<runtime.ApiResponse<string>>;
    /**
     * connect HEAD requests to proxy of Service
     */
    connectHeadNamespacedServiceProxy(requestParameters: CoreV1ApiConnectHeadNamespacedServiceProxyRequest): Promise<string>;
    /**
     * connect HEAD requests to proxy of Service
     */
    connectHeadNamespacedServiceProxyWithPathRaw(requestParameters: CoreV1ApiConnectHeadNamespacedServiceProxyWithPathRequest): Promise<runtime.ApiResponse<string>>;
    /**
     * connect HEAD requests to proxy of Service
     */
    connectHeadNamespacedServiceProxyWithPath(requestParameters: CoreV1ApiConnectHeadNamespacedServiceProxyWithPathRequest): Promise<string>;
    /**
     * connect HEAD requests to proxy of Node
     */
    connectHeadNodeProxyRaw(requestParameters: CoreV1ApiConnectHeadNodeProxyRequest): Promise<runtime.ApiResponse<string>>;
    /**
     * connect HEAD requests to proxy of Node
     */
    connectHeadNodeProxy(requestParameters: CoreV1ApiConnectHeadNodeProxyRequest): Promise<string>;
    /**
     * connect HEAD requests to proxy of Node
     */
    connectHeadNodeProxyWithPathRaw(requestParameters: CoreV1ApiConnectHeadNodeProxyWithPathRequest): Promise<runtime.ApiResponse<string>>;
    /**
     * connect HEAD requests to proxy of Node
     */
    connectHeadNodeProxyWithPath(requestParameters: CoreV1ApiConnectHeadNodeProxyWithPathRequest): Promise<string>;
    /**
     * connect OPTIONS requests to proxy of Pod
     */
    connectOptionsNamespacedPodProxyRaw(requestParameters: CoreV1ApiConnectOptionsNamespacedPodProxyRequest): Promise<runtime.ApiResponse<string>>;
    /**
     * connect OPTIONS requests to proxy of Pod
     */
    connectOptionsNamespacedPodProxy(requestParameters: CoreV1ApiConnectOptionsNamespacedPodProxyRequest): Promise<string>;
    /**
     * connect OPTIONS requests to proxy of Pod
     */
    connectOptionsNamespacedPodProxyWithPathRaw(requestParameters: CoreV1ApiConnectOptionsNamespacedPodProxyWithPathRequest): Promise<runtime.ApiResponse<string>>;
    /**
     * connect OPTIONS requests to proxy of Pod
     */
    connectOptionsNamespacedPodProxyWithPath(requestParameters: CoreV1ApiConnectOptionsNamespacedPodProxyWithPathRequest): Promise<string>;
    /**
     * connect OPTIONS requests to proxy of Service
     */
    connectOptionsNamespacedServiceProxyRaw(requestParameters: CoreV1ApiConnectOptionsNamespacedServiceProxyRequest): Promise<runtime.ApiResponse<string>>;
    /**
     * connect OPTIONS requests to proxy of Service
     */
    connectOptionsNamespacedServiceProxy(requestParameters: CoreV1ApiConnectOptionsNamespacedServiceProxyRequest): Promise<string>;
    /**
     * connect OPTIONS requests to proxy of Service
     */
    connectOptionsNamespacedServiceProxyWithPathRaw(requestParameters: CoreV1ApiConnectOptionsNamespacedServiceProxyWithPathRequest): Promise<runtime.ApiResponse<string>>;
    /**
     * connect OPTIONS requests to proxy of Service
     */
    connectOptionsNamespacedServiceProxyWithPath(requestParameters: CoreV1ApiConnectOptionsNamespacedServiceProxyWithPathRequest): Promise<string>;
    /**
     * connect OPTIONS requests to proxy of Node
     */
    connectOptionsNodeProxyRaw(requestParameters: CoreV1ApiConnectOptionsNodeProxyRequest): Promise<runtime.ApiResponse<string>>;
    /**
     * connect OPTIONS requests to proxy of Node
     */
    connectOptionsNodeProxy(requestParameters: CoreV1ApiConnectOptionsNodeProxyRequest): Promise<string>;
    /**
     * connect OPTIONS requests to proxy of Node
     */
    connectOptionsNodeProxyWithPathRaw(requestParameters: CoreV1ApiConnectOptionsNodeProxyWithPathRequest): Promise<runtime.ApiResponse<string>>;
    /**
     * connect OPTIONS requests to proxy of Node
     */
    connectOptionsNodeProxyWithPath(requestParameters: CoreV1ApiConnectOptionsNodeProxyWithPathRequest): Promise<string>;
    /**
     * connect PATCH requests to proxy of Pod
     */
    connectPatchNamespacedPodProxyRaw(requestParameters: CoreV1ApiConnectPatchNamespacedPodProxyRequest): Promise<runtime.ApiResponse<string>>;
    /**
     * connect PATCH requests to proxy of Pod
     */
    connectPatchNamespacedPodProxy(requestParameters: CoreV1ApiConnectPatchNamespacedPodProxyRequest): Promise<string>;
    /**
     * connect PATCH requests to proxy of Pod
     */
    connectPatchNamespacedPodProxyWithPathRaw(requestParameters: CoreV1ApiConnectPatchNamespacedPodProxyWithPathRequest): Promise<runtime.ApiResponse<string>>;
    /**
     * connect PATCH requests to proxy of Pod
     */
    connectPatchNamespacedPodProxyWithPath(requestParameters: CoreV1ApiConnectPatchNamespacedPodProxyWithPathRequest): Promise<string>;
    /**
     * connect PATCH requests to proxy of Service
     */
    connectPatchNamespacedServiceProxyRaw(requestParameters: CoreV1ApiConnectPatchNamespacedServiceProxyRequest): Promise<runtime.ApiResponse<string>>;
    /**
     * connect PATCH requests to proxy of Service
     */
    connectPatchNamespacedServiceProxy(requestParameters: CoreV1ApiConnectPatchNamespacedServiceProxyRequest): Promise<string>;
    /**
     * connect PATCH requests to proxy of Service
     */
    connectPatchNamespacedServiceProxyWithPathRaw(requestParameters: CoreV1ApiConnectPatchNamespacedServiceProxyWithPathRequest): Promise<runtime.ApiResponse<string>>;
    /**
     * connect PATCH requests to proxy of Service
     */
    connectPatchNamespacedServiceProxyWithPath(requestParameters: CoreV1ApiConnectPatchNamespacedServiceProxyWithPathRequest): Promise<string>;
    /**
     * connect PATCH requests to proxy of Node
     */
    connectPatchNodeProxyRaw(requestParameters: CoreV1ApiConnectPatchNodeProxyRequest): Promise<runtime.ApiResponse<string>>;
    /**
     * connect PATCH requests to proxy of Node
     */
    connectPatchNodeProxy(requestParameters: CoreV1ApiConnectPatchNodeProxyRequest): Promise<string>;
    /**
     * connect PATCH requests to proxy of Node
     */
    connectPatchNodeProxyWithPathRaw(requestParameters: CoreV1ApiConnectPatchNodeProxyWithPathRequest): Promise<runtime.ApiResponse<string>>;
    /**
     * connect PATCH requests to proxy of Node
     */
    connectPatchNodeProxyWithPath(requestParameters: CoreV1ApiConnectPatchNodeProxyWithPathRequest): Promise<string>;
    /**
     * connect POST requests to attach of Pod
     */
    connectPostNamespacedPodAttachRaw(requestParameters: CoreV1ApiConnectPostNamespacedPodAttachRequest): Promise<runtime.ApiResponse<string>>;
    /**
     * connect POST requests to attach of Pod
     */
    connectPostNamespacedPodAttach(requestParameters: CoreV1ApiConnectPostNamespacedPodAttachRequest): Promise<string>;
    /**
     * connect POST requests to exec of Pod
     */
    connectPostNamespacedPodExecRaw(requestParameters: CoreV1ApiConnectPostNamespacedPodExecRequest): Promise<runtime.ApiResponse<string>>;
    /**
     * connect POST requests to exec of Pod
     */
    connectPostNamespacedPodExec(requestParameters: CoreV1ApiConnectPostNamespacedPodExecRequest): Promise<string>;
    /**
     * connect POST requests to portforward of Pod
     */
    connectPostNamespacedPodPortforwardRaw(requestParameters: CoreV1ApiConnectPostNamespacedPodPortforwardRequest): Promise<runtime.ApiResponse<string>>;
    /**
     * connect POST requests to portforward of Pod
     */
    connectPostNamespacedPodPortforward(requestParameters: CoreV1ApiConnectPostNamespacedPodPortforwardRequest): Promise<string>;
    /**
     * connect POST requests to proxy of Pod
     */
    connectPostNamespacedPodProxyRaw(requestParameters: CoreV1ApiConnectPostNamespacedPodProxyRequest): Promise<runtime.ApiResponse<string>>;
    /**
     * connect POST requests to proxy of Pod
     */
    connectPostNamespacedPodProxy(requestParameters: CoreV1ApiConnectPostNamespacedPodProxyRequest): Promise<string>;
    /**
     * connect POST requests to proxy of Pod
     */
    connectPostNamespacedPodProxyWithPathRaw(requestParameters: CoreV1ApiConnectPostNamespacedPodProxyWithPathRequest): Promise<runtime.ApiResponse<string>>;
    /**
     * connect POST requests to proxy of Pod
     */
    connectPostNamespacedPodProxyWithPath(requestParameters: CoreV1ApiConnectPostNamespacedPodProxyWithPathRequest): Promise<string>;
    /**
     * connect POST requests to proxy of Service
     */
    connectPostNamespacedServiceProxyRaw(requestParameters: CoreV1ApiConnectPostNamespacedServiceProxyRequest): Promise<runtime.ApiResponse<string>>;
    /**
     * connect POST requests to proxy of Service
     */
    connectPostNamespacedServiceProxy(requestParameters: CoreV1ApiConnectPostNamespacedServiceProxyRequest): Promise<string>;
    /**
     * connect POST requests to proxy of Service
     */
    connectPostNamespacedServiceProxyWithPathRaw(requestParameters: CoreV1ApiConnectPostNamespacedServiceProxyWithPathRequest): Promise<runtime.ApiResponse<string>>;
    /**
     * connect POST requests to proxy of Service
     */
    connectPostNamespacedServiceProxyWithPath(requestParameters: CoreV1ApiConnectPostNamespacedServiceProxyWithPathRequest): Promise<string>;
    /**
     * connect POST requests to proxy of Node
     */
    connectPostNodeProxyRaw(requestParameters: CoreV1ApiConnectPostNodeProxyRequest): Promise<runtime.ApiResponse<string>>;
    /**
     * connect POST requests to proxy of Node
     */
    connectPostNodeProxy(requestParameters: CoreV1ApiConnectPostNodeProxyRequest): Promise<string>;
    /**
     * connect POST requests to proxy of Node
     */
    connectPostNodeProxyWithPathRaw(requestParameters: CoreV1ApiConnectPostNodeProxyWithPathRequest): Promise<runtime.ApiResponse<string>>;
    /**
     * connect POST requests to proxy of Node
     */
    connectPostNodeProxyWithPath(requestParameters: CoreV1ApiConnectPostNodeProxyWithPathRequest): Promise<string>;
    /**
     * connect PUT requests to proxy of Pod
     */
    connectPutNamespacedPodProxyRaw(requestParameters: CoreV1ApiConnectPutNamespacedPodProxyRequest): Promise<runtime.ApiResponse<string>>;
    /**
     * connect PUT requests to proxy of Pod
     */
    connectPutNamespacedPodProxy(requestParameters: CoreV1ApiConnectPutNamespacedPodProxyRequest): Promise<string>;
    /**
     * connect PUT requests to proxy of Pod
     */
    connectPutNamespacedPodProxyWithPathRaw(requestParameters: CoreV1ApiConnectPutNamespacedPodProxyWithPathRequest): Promise<runtime.ApiResponse<string>>;
    /**
     * connect PUT requests to proxy of Pod
     */
    connectPutNamespacedPodProxyWithPath(requestParameters: CoreV1ApiConnectPutNamespacedPodProxyWithPathRequest): Promise<string>;
    /**
     * connect PUT requests to proxy of Service
     */
    connectPutNamespacedServiceProxyRaw(requestParameters: CoreV1ApiConnectPutNamespacedServiceProxyRequest): Promise<runtime.ApiResponse<string>>;
    /**
     * connect PUT requests to proxy of Service
     */
    connectPutNamespacedServiceProxy(requestParameters: CoreV1ApiConnectPutNamespacedServiceProxyRequest): Promise<string>;
    /**
     * connect PUT requests to proxy of Service
     */
    connectPutNamespacedServiceProxyWithPathRaw(requestParameters: CoreV1ApiConnectPutNamespacedServiceProxyWithPathRequest): Promise<runtime.ApiResponse<string>>;
    /**
     * connect PUT requests to proxy of Service
     */
    connectPutNamespacedServiceProxyWithPath(requestParameters: CoreV1ApiConnectPutNamespacedServiceProxyWithPathRequest): Promise<string>;
    /**
     * connect PUT requests to proxy of Node
     */
    connectPutNodeProxyRaw(requestParameters: CoreV1ApiConnectPutNodeProxyRequest): Promise<runtime.ApiResponse<string>>;
    /**
     * connect PUT requests to proxy of Node
     */
    connectPutNodeProxy(requestParameters: CoreV1ApiConnectPutNodeProxyRequest): Promise<string>;
    /**
     * connect PUT requests to proxy of Node
     */
    connectPutNodeProxyWithPathRaw(requestParameters: CoreV1ApiConnectPutNodeProxyWithPathRequest): Promise<runtime.ApiResponse<string>>;
    /**
     * connect PUT requests to proxy of Node
     */
    connectPutNodeProxyWithPath(requestParameters: CoreV1ApiConnectPutNodeProxyWithPathRequest): Promise<string>;
    /**
     * create a Namespace
     */
    createNamespaceRaw(requestParameters: CoreV1ApiCreateNamespaceRequest): Promise<runtime.ApiResponse<V1Namespace>>;
    /**
     * create a Namespace
     */
    createNamespace(requestParameters: CoreV1ApiCreateNamespaceRequest): Promise<V1Namespace>;
    /**
     * create a Binding
     */
    createNamespacedBindingRaw(requestParameters: CoreV1ApiCreateNamespacedBindingRequest): Promise<runtime.ApiResponse<V1Binding>>;
    /**
     * create a Binding
     */
    createNamespacedBinding(requestParameters: CoreV1ApiCreateNamespacedBindingRequest): Promise<V1Binding>;
    /**
     * create a ConfigMap
     */
    createNamespacedConfigMapRaw(requestParameters: CoreV1ApiCreateNamespacedConfigMapRequest): Promise<runtime.ApiResponse<V1ConfigMap>>;
    /**
     * create a ConfigMap
     */
    createNamespacedConfigMap(requestParameters: CoreV1ApiCreateNamespacedConfigMapRequest): Promise<V1ConfigMap>;
    /**
     * create Endpoints
     */
    createNamespacedEndpointsRaw(requestParameters: CoreV1ApiCreateNamespacedEndpointsRequest): Promise<runtime.ApiResponse<V1Endpoints>>;
    /**
     * create Endpoints
     */
    createNamespacedEndpoints(requestParameters: CoreV1ApiCreateNamespacedEndpointsRequest): Promise<V1Endpoints>;
    /**
     * create an Event
     */
    createNamespacedEventRaw(requestParameters: CoreV1ApiCreateNamespacedEventRequest): Promise<runtime.ApiResponse<CoreV1Event>>;
    /**
     * create an Event
     */
    createNamespacedEvent(requestParameters: CoreV1ApiCreateNamespacedEventRequest): Promise<CoreV1Event>;
    /**
     * create a LimitRange
     */
    createNamespacedLimitRangeRaw(requestParameters: CoreV1ApiCreateNamespacedLimitRangeRequest): Promise<runtime.ApiResponse<V1LimitRange>>;
    /**
     * create a LimitRange
     */
    createNamespacedLimitRange(requestParameters: CoreV1ApiCreateNamespacedLimitRangeRequest): Promise<V1LimitRange>;
    /**
     * create a PersistentVolumeClaim
     */
    createNamespacedPersistentVolumeClaimRaw(requestParameters: CoreV1ApiCreateNamespacedPersistentVolumeClaimRequest): Promise<runtime.ApiResponse<V1PersistentVolumeClaim>>;
    /**
     * create a PersistentVolumeClaim
     */
    createNamespacedPersistentVolumeClaim(requestParameters: CoreV1ApiCreateNamespacedPersistentVolumeClaimRequest): Promise<V1PersistentVolumeClaim>;
    /**
     * create a Pod
     */
    createNamespacedPodRaw(requestParameters: CoreV1ApiCreateNamespacedPodRequest): Promise<runtime.ApiResponse<V1Pod>>;
    /**
     * create a Pod
     */
    createNamespacedPod(requestParameters: CoreV1ApiCreateNamespacedPodRequest): Promise<V1Pod>;
    /**
     * create binding of a Pod
     */
    createNamespacedPodBindingRaw(requestParameters: CoreV1ApiCreateNamespacedPodBindingRequest): Promise<runtime.ApiResponse<V1Binding>>;
    /**
     * create binding of a Pod
     */
    createNamespacedPodBinding(requestParameters: CoreV1ApiCreateNamespacedPodBindingRequest): Promise<V1Binding>;
    /**
     * create eviction of a Pod
     */
    createNamespacedPodEvictionRaw(requestParameters: CoreV1ApiCreateNamespacedPodEvictionRequest): Promise<runtime.ApiResponse<V1Eviction>>;
    /**
     * create eviction of a Pod
     */
    createNamespacedPodEviction(requestParameters: CoreV1ApiCreateNamespacedPodEvictionRequest): Promise<V1Eviction>;
    /**
     * create a PodTemplate
     */
    createNamespacedPodTemplateRaw(requestParameters: CoreV1ApiCreateNamespacedPodTemplateRequest): Promise<runtime.ApiResponse<V1PodTemplate>>;
    /**
     * create a PodTemplate
     */
    createNamespacedPodTemplate(requestParameters: CoreV1ApiCreateNamespacedPodTemplateRequest): Promise<V1PodTemplate>;
    /**
     * create a ReplicationController
     */
    createNamespacedReplicationControllerRaw(requestParameters: CoreV1ApiCreateNamespacedReplicationControllerRequest): Promise<runtime.ApiResponse<V1ReplicationController>>;
    /**
     * create a ReplicationController
     */
    createNamespacedReplicationController(requestParameters: CoreV1ApiCreateNamespacedReplicationControllerRequest): Promise<V1ReplicationController>;
    /**
     * create a ResourceQuota
     */
    createNamespacedResourceQuotaRaw(requestParameters: CoreV1ApiCreateNamespacedResourceQuotaRequest): Promise<runtime.ApiResponse<V1ResourceQuota>>;
    /**
     * create a ResourceQuota
     */
    createNamespacedResourceQuota(requestParameters: CoreV1ApiCreateNamespacedResourceQuotaRequest): Promise<V1ResourceQuota>;
    /**
     * create a Secret
     */
    createNamespacedSecretRaw(requestParameters: CoreV1ApiCreateNamespacedSecretRequest): Promise<runtime.ApiResponse<V1Secret>>;
    /**
     * create a Secret
     */
    createNamespacedSecret(requestParameters: CoreV1ApiCreateNamespacedSecretRequest): Promise<V1Secret>;
    /**
     * create a Service
     */
    createNamespacedServiceRaw(requestParameters: CoreV1ApiCreateNamespacedServiceRequest): Promise<runtime.ApiResponse<V1Service>>;
    /**
     * create a Service
     */
    createNamespacedService(requestParameters: CoreV1ApiCreateNamespacedServiceRequest): Promise<V1Service>;
    /**
     * create a ServiceAccount
     */
    createNamespacedServiceAccountRaw(requestParameters: CoreV1ApiCreateNamespacedServiceAccountRequest): Promise<runtime.ApiResponse<V1ServiceAccount>>;
    /**
     * create a ServiceAccount
     */
    createNamespacedServiceAccount(requestParameters: CoreV1ApiCreateNamespacedServiceAccountRequest): Promise<V1ServiceAccount>;
    /**
     * create token of a ServiceAccount
     */
    createNamespacedServiceAccountTokenRaw(requestParameters: CoreV1ApiCreateNamespacedServiceAccountTokenRequest): Promise<runtime.ApiResponse<AuthenticationV1TokenRequest>>;
    /**
     * create token of a ServiceAccount
     */
    createNamespacedServiceAccountToken(requestParameters: CoreV1ApiCreateNamespacedServiceAccountTokenRequest): Promise<AuthenticationV1TokenRequest>;
    /**
     * create a Node
     */
    createNodeRaw(requestParameters: CoreV1ApiCreateNodeRequest): Promise<runtime.ApiResponse<V1Node>>;
    /**
     * create a Node
     */
    createNode(requestParameters: CoreV1ApiCreateNodeRequest): Promise<V1Node>;
    /**
     * create a PersistentVolume
     */
    createPersistentVolumeRaw(requestParameters: CoreV1ApiCreatePersistentVolumeRequest): Promise<runtime.ApiResponse<V1PersistentVolume>>;
    /**
     * create a PersistentVolume
     */
    createPersistentVolume(requestParameters: CoreV1ApiCreatePersistentVolumeRequest): Promise<V1PersistentVolume>;
    /**
     * delete collection of ConfigMap
     */
    deleteCollectionNamespacedConfigMapRaw(requestParameters: CoreV1ApiDeleteCollectionNamespacedConfigMapRequest): Promise<runtime.ApiResponse<V1Status>>;
    /**
     * delete collection of ConfigMap
     */
    deleteCollectionNamespacedConfigMap(requestParameters: CoreV1ApiDeleteCollectionNamespacedConfigMapRequest): Promise<V1Status>;
    /**
     * delete collection of Endpoints
     */
    deleteCollectionNamespacedEndpointsRaw(requestParameters: CoreV1ApiDeleteCollectionNamespacedEndpointsRequest): Promise<runtime.ApiResponse<V1Status>>;
    /**
     * delete collection of Endpoints
     */
    deleteCollectionNamespacedEndpoints(requestParameters: CoreV1ApiDeleteCollectionNamespacedEndpointsRequest): Promise<V1Status>;
    /**
     * delete collection of Event
     */
    deleteCollectionNamespacedEventRaw(requestParameters: CoreV1ApiDeleteCollectionNamespacedEventRequest): Promise<runtime.ApiResponse<V1Status>>;
    /**
     * delete collection of Event
     */
    deleteCollectionNamespacedEvent(requestParameters: CoreV1ApiDeleteCollectionNamespacedEventRequest): Promise<V1Status>;
    /**
     * delete collection of LimitRange
     */
    deleteCollectionNamespacedLimitRangeRaw(requestParameters: CoreV1ApiDeleteCollectionNamespacedLimitRangeRequest): Promise<runtime.ApiResponse<V1Status>>;
    /**
     * delete collection of LimitRange
     */
    deleteCollectionNamespacedLimitRange(requestParameters: CoreV1ApiDeleteCollectionNamespacedLimitRangeRequest): Promise<V1Status>;
    /**
     * delete collection of PersistentVolumeClaim
     */
    deleteCollectionNamespacedPersistentVolumeClaimRaw(requestParameters: CoreV1ApiDeleteCollectionNamespacedPersistentVolumeClaimRequest): Promise<runtime.ApiResponse<V1Status>>;
    /**
     * delete collection of PersistentVolumeClaim
     */
    deleteCollectionNamespacedPersistentVolumeClaim(requestParameters: CoreV1ApiDeleteCollectionNamespacedPersistentVolumeClaimRequest): Promise<V1Status>;
    /**
     * delete collection of Pod
     */
    deleteCollectionNamespacedPodRaw(requestParameters: CoreV1ApiDeleteCollectionNamespacedPodRequest): Promise<runtime.ApiResponse<V1Status>>;
    /**
     * delete collection of Pod
     */
    deleteCollectionNamespacedPod(requestParameters: CoreV1ApiDeleteCollectionNamespacedPodRequest): Promise<V1Status>;
    /**
     * delete collection of PodTemplate
     */
    deleteCollectionNamespacedPodTemplateRaw(requestParameters: CoreV1ApiDeleteCollectionNamespacedPodTemplateRequest): Promise<runtime.ApiResponse<V1Status>>;
    /**
     * delete collection of PodTemplate
     */
    deleteCollectionNamespacedPodTemplate(requestParameters: CoreV1ApiDeleteCollectionNamespacedPodTemplateRequest): Promise<V1Status>;
    /**
     * delete collection of ReplicationController
     */
    deleteCollectionNamespacedReplicationControllerRaw(requestParameters: CoreV1ApiDeleteCollectionNamespacedReplicationControllerRequest): Promise<runtime.ApiResponse<V1Status>>;
    /**
     * delete collection of ReplicationController
     */
    deleteCollectionNamespacedReplicationController(requestParameters: CoreV1ApiDeleteCollectionNamespacedReplicationControllerRequest): Promise<V1Status>;
    /**
     * delete collection of ResourceQuota
     */
    deleteCollectionNamespacedResourceQuotaRaw(requestParameters: CoreV1ApiDeleteCollectionNamespacedResourceQuotaRequest): Promise<runtime.ApiResponse<V1Status>>;
    /**
     * delete collection of ResourceQuota
     */
    deleteCollectionNamespacedResourceQuota(requestParameters: CoreV1ApiDeleteCollectionNamespacedResourceQuotaRequest): Promise<V1Status>;
    /**
     * delete collection of Secret
     */
    deleteCollectionNamespacedSecretRaw(requestParameters: CoreV1ApiDeleteCollectionNamespacedSecretRequest): Promise<runtime.ApiResponse<V1Status>>;
    /**
     * delete collection of Secret
     */
    deleteCollectionNamespacedSecret(requestParameters: CoreV1ApiDeleteCollectionNamespacedSecretRequest): Promise<V1Status>;
    /**
     * delete collection of Service
     */
    deleteCollectionNamespacedServiceRaw(requestParameters: CoreV1ApiDeleteCollectionNamespacedServiceRequest): Promise<runtime.ApiResponse<V1Status>>;
    /**
     * delete collection of Service
     */
    deleteCollectionNamespacedService(requestParameters: CoreV1ApiDeleteCollectionNamespacedServiceRequest): Promise<V1Status>;
    /**
     * delete collection of ServiceAccount
     */
    deleteCollectionNamespacedServiceAccountRaw(requestParameters: CoreV1ApiDeleteCollectionNamespacedServiceAccountRequest): Promise<runtime.ApiResponse<V1Status>>;
    /**
     * delete collection of ServiceAccount
     */
    deleteCollectionNamespacedServiceAccount(requestParameters: CoreV1ApiDeleteCollectionNamespacedServiceAccountRequest): Promise<V1Status>;
    /**
     * delete collection of Node
     */
    deleteCollectionNodeRaw(requestParameters: CoreV1ApiDeleteCollectionNodeRequest): Promise<runtime.ApiResponse<V1Status>>;
    /**
     * delete collection of Node
     */
    deleteCollectionNode(requestParameters: CoreV1ApiDeleteCollectionNodeRequest): Promise<V1Status>;
    /**
     * delete collection of PersistentVolume
     */
    deleteCollectionPersistentVolumeRaw(requestParameters: CoreV1ApiDeleteCollectionPersistentVolumeRequest): Promise<runtime.ApiResponse<V1Status>>;
    /**
     * delete collection of PersistentVolume
     */
    deleteCollectionPersistentVolume(requestParameters: CoreV1ApiDeleteCollectionPersistentVolumeRequest): Promise<V1Status>;
    /**
     * delete a Namespace
     */
    deleteNamespaceRaw(requestParameters: CoreV1ApiDeleteNamespaceRequest): Promise<runtime.ApiResponse<V1Status>>;
    /**
     * delete a Namespace
     */
    deleteNamespace(requestParameters: CoreV1ApiDeleteNamespaceRequest): Promise<V1Status>;
    /**
     * delete a ConfigMap
     */
    deleteNamespacedConfigMapRaw(requestParameters: CoreV1ApiDeleteNamespacedConfigMapRequest): Promise<runtime.ApiResponse<V1Status>>;
    /**
     * delete a ConfigMap
     */
    deleteNamespacedConfigMap(requestParameters: CoreV1ApiDeleteNamespacedConfigMapRequest): Promise<V1Status>;
    /**
     * delete Endpoints
     */
    deleteNamespacedEndpointsRaw(requestParameters: CoreV1ApiDeleteNamespacedEndpointsRequest): Promise<runtime.ApiResponse<V1Status>>;
    /**
     * delete Endpoints
     */
    deleteNamespacedEndpoints(requestParameters: CoreV1ApiDeleteNamespacedEndpointsRequest): Promise<V1Status>;
    /**
     * delete an Event
     */
    deleteNamespacedEventRaw(requestParameters: CoreV1ApiDeleteNamespacedEventRequest): Promise<runtime.ApiResponse<V1Status>>;
    /**
     * delete an Event
     */
    deleteNamespacedEvent(requestParameters: CoreV1ApiDeleteNamespacedEventRequest): Promise<V1Status>;
    /**
     * delete a LimitRange
     */
    deleteNamespacedLimitRangeRaw(requestParameters: CoreV1ApiDeleteNamespacedLimitRangeRequest): Promise<runtime.ApiResponse<V1Status>>;
    /**
     * delete a LimitRange
     */
    deleteNamespacedLimitRange(requestParameters: CoreV1ApiDeleteNamespacedLimitRangeRequest): Promise<V1Status>;
    /**
     * delete a PersistentVolumeClaim
     */
    deleteNamespacedPersistentVolumeClaimRaw(requestParameters: CoreV1ApiDeleteNamespacedPersistentVolumeClaimRequest): Promise<runtime.ApiResponse<V1PersistentVolumeClaim>>;
    /**
     * delete a PersistentVolumeClaim
     */
    deleteNamespacedPersistentVolumeClaim(requestParameters: CoreV1ApiDeleteNamespacedPersistentVolumeClaimRequest): Promise<V1PersistentVolumeClaim>;
    /**
     * delete a Pod
     */
    deleteNamespacedPodRaw(requestParameters: CoreV1ApiDeleteNamespacedPodRequest): Promise<runtime.ApiResponse<V1Pod>>;
    /**
     * delete a Pod
     */
    deleteNamespacedPod(requestParameters: CoreV1ApiDeleteNamespacedPodRequest): Promise<V1Pod>;
    /**
     * delete a PodTemplate
     */
    deleteNamespacedPodTemplateRaw(requestParameters: CoreV1ApiDeleteNamespacedPodTemplateRequest): Promise<runtime.ApiResponse<V1PodTemplate>>;
    /**
     * delete a PodTemplate
     */
    deleteNamespacedPodTemplate(requestParameters: CoreV1ApiDeleteNamespacedPodTemplateRequest): Promise<V1PodTemplate>;
    /**
     * delete a ReplicationController
     */
    deleteNamespacedReplicationControllerRaw(requestParameters: CoreV1ApiDeleteNamespacedReplicationControllerRequest): Promise<runtime.ApiResponse<V1Status>>;
    /**
     * delete a ReplicationController
     */
    deleteNamespacedReplicationController(requestParameters: CoreV1ApiDeleteNamespacedReplicationControllerRequest): Promise<V1Status>;
    /**
     * delete a ResourceQuota
     */
    deleteNamespacedResourceQuotaRaw(requestParameters: CoreV1ApiDeleteNamespacedResourceQuotaRequest): Promise<runtime.ApiResponse<V1ResourceQuota>>;
    /**
     * delete a ResourceQuota
     */
    deleteNamespacedResourceQuota(requestParameters: CoreV1ApiDeleteNamespacedResourceQuotaRequest): Promise<V1ResourceQuota>;
    /**
     * delete a Secret
     */
    deleteNamespacedSecretRaw(requestParameters: CoreV1ApiDeleteNamespacedSecretRequest): Promise<runtime.ApiResponse<V1Status>>;
    /**
     * delete a Secret
     */
    deleteNamespacedSecret(requestParameters: CoreV1ApiDeleteNamespacedSecretRequest): Promise<V1Status>;
    /**
     * delete a Service
     */
    deleteNamespacedServiceRaw(requestParameters: CoreV1ApiDeleteNamespacedServiceRequest): Promise<runtime.ApiResponse<V1Service>>;
    /**
     * delete a Service
     */
    deleteNamespacedService(requestParameters: CoreV1ApiDeleteNamespacedServiceRequest): Promise<V1Service>;
    /**
     * delete a ServiceAccount
     */
    deleteNamespacedServiceAccountRaw(requestParameters: CoreV1ApiDeleteNamespacedServiceAccountRequest): Promise<runtime.ApiResponse<V1ServiceAccount>>;
    /**
     * delete a ServiceAccount
     */
    deleteNamespacedServiceAccount(requestParameters: CoreV1ApiDeleteNamespacedServiceAccountRequest): Promise<V1ServiceAccount>;
    /**
     * delete a Node
     */
    deleteNodeRaw(requestParameters: CoreV1ApiDeleteNodeRequest): Promise<runtime.ApiResponse<V1Status>>;
    /**
     * delete a Node
     */
    deleteNode(requestParameters: CoreV1ApiDeleteNodeRequest): Promise<V1Status>;
    /**
     * delete a PersistentVolume
     */
    deletePersistentVolumeRaw(requestParameters: CoreV1ApiDeletePersistentVolumeRequest): Promise<runtime.ApiResponse<V1PersistentVolume>>;
    /**
     * delete a PersistentVolume
     */
    deletePersistentVolume(requestParameters: CoreV1ApiDeletePersistentVolumeRequest): Promise<V1PersistentVolume>;
    /**
     * get available resources
     */
    getAPIResourcesRaw(): Promise<runtime.ApiResponse<V1APIResourceList>>;
    /**
     * get available resources
     */
    getAPIResources(): Promise<V1APIResourceList>;
    /**
     * list objects of kind ComponentStatus
     */
    listComponentStatusRaw(requestParameters: CoreV1ApiListComponentStatusRequest): Promise<runtime.ApiResponse<V1ComponentStatusList>>;
    /**
     * list objects of kind ComponentStatus
     */
    listComponentStatus(requestParameters: CoreV1ApiListComponentStatusRequest): Promise<V1ComponentStatusList>;
    /**
     * list or watch objects of kind ConfigMap
     */
    listConfigMapForAllNamespacesRaw(requestParameters: CoreV1ApiListConfigMapForAllNamespacesRequest): Promise<runtime.ApiResponse<V1ConfigMapList>>;
    /**
     * list or watch objects of kind ConfigMap
     */
    listConfigMapForAllNamespaces(requestParameters: CoreV1ApiListConfigMapForAllNamespacesRequest): Promise<V1ConfigMapList>;
    /**
     * list or watch objects of kind Endpoints
     */
    listEndpointsForAllNamespacesRaw(requestParameters: CoreV1ApiListEndpointsForAllNamespacesRequest): Promise<runtime.ApiResponse<V1EndpointsList>>;
    /**
     * list or watch objects of kind Endpoints
     */
    listEndpointsForAllNamespaces(requestParameters: CoreV1ApiListEndpointsForAllNamespacesRequest): Promise<V1EndpointsList>;
    /**
     * list or watch objects of kind Event
     */
    listEventForAllNamespacesRaw(requestParameters: CoreV1ApiListEventForAllNamespacesRequest): Promise<runtime.ApiResponse<CoreV1EventList>>;
    /**
     * list or watch objects of kind Event
     */
    listEventForAllNamespaces(requestParameters: CoreV1ApiListEventForAllNamespacesRequest): Promise<CoreV1EventList>;
    /**
     * list or watch objects of kind LimitRange
     */
    listLimitRangeForAllNamespacesRaw(requestParameters: CoreV1ApiListLimitRangeForAllNamespacesRequest): Promise<runtime.ApiResponse<V1LimitRangeList>>;
    /**
     * list or watch objects of kind LimitRange
     */
    listLimitRangeForAllNamespaces(requestParameters: CoreV1ApiListLimitRangeForAllNamespacesRequest): Promise<V1LimitRangeList>;
    /**
     * list or watch objects of kind Namespace
     */
    listNamespaceRaw(requestParameters: CoreV1ApiListNamespaceRequest): Promise<runtime.ApiResponse<V1NamespaceList>>;
    /**
     * list or watch objects of kind Namespace
     */
    listNamespace(requestParameters: CoreV1ApiListNamespaceRequest): Promise<V1NamespaceList>;
    /**
     * list or watch objects of kind ConfigMap
     */
    listNamespacedConfigMapRaw(requestParameters: CoreV1ApiListNamespacedConfigMapRequest): Promise<runtime.ApiResponse<V1ConfigMapList>>;
    /**
     * list or watch objects of kind ConfigMap
     */
    listNamespacedConfigMap(requestParameters: CoreV1ApiListNamespacedConfigMapRequest): Promise<V1ConfigMapList>;
    /**
     * list or watch objects of kind Endpoints
     */
    listNamespacedEndpointsRaw(requestParameters: CoreV1ApiListNamespacedEndpointsRequest): Promise<runtime.ApiResponse<V1EndpointsList>>;
    /**
     * list or watch objects of kind Endpoints
     */
    listNamespacedEndpoints(requestParameters: CoreV1ApiListNamespacedEndpointsRequest): Promise<V1EndpointsList>;
    /**
     * list or watch objects of kind Event
     */
    listNamespacedEventRaw(requestParameters: CoreV1ApiListNamespacedEventRequest): Promise<runtime.ApiResponse<CoreV1EventList>>;
    /**
     * list or watch objects of kind Event
     */
    listNamespacedEvent(requestParameters: CoreV1ApiListNamespacedEventRequest): Promise<CoreV1EventList>;
    /**
     * list or watch objects of kind LimitRange
     */
    listNamespacedLimitRangeRaw(requestParameters: CoreV1ApiListNamespacedLimitRangeRequest): Promise<runtime.ApiResponse<V1LimitRangeList>>;
    /**
     * list or watch objects of kind LimitRange
     */
    listNamespacedLimitRange(requestParameters: CoreV1ApiListNamespacedLimitRangeRequest): Promise<V1LimitRangeList>;
    /**
     * list or watch objects of kind PersistentVolumeClaim
     */
    listNamespacedPersistentVolumeClaimRaw(requestParameters: CoreV1ApiListNamespacedPersistentVolumeClaimRequest): Promise<runtime.ApiResponse<V1PersistentVolumeClaimList>>;
    /**
     * list or watch objects of kind PersistentVolumeClaim
     */
    listNamespacedPersistentVolumeClaim(requestParameters: CoreV1ApiListNamespacedPersistentVolumeClaimRequest): Promise<V1PersistentVolumeClaimList>;
    /**
     * list or watch objects of kind Pod
     */
    listNamespacedPodRaw(requestParameters: CoreV1ApiListNamespacedPodRequest): Promise<runtime.ApiResponse<V1PodList>>;
    /**
     * list or watch objects of kind Pod
     */
    listNamespacedPod(requestParameters: CoreV1ApiListNamespacedPodRequest): Promise<V1PodList>;
    /**
     * list or watch objects of kind PodTemplate
     */
    listNamespacedPodTemplateRaw(requestParameters: CoreV1ApiListNamespacedPodTemplateRequest): Promise<runtime.ApiResponse<V1PodTemplateList>>;
    /**
     * list or watch objects of kind PodTemplate
     */
    listNamespacedPodTemplate(requestParameters: CoreV1ApiListNamespacedPodTemplateRequest): Promise<V1PodTemplateList>;
    /**
     * list or watch objects of kind ReplicationController
     */
    listNamespacedReplicationControllerRaw(requestParameters: CoreV1ApiListNamespacedReplicationControllerRequest): Promise<runtime.ApiResponse<V1ReplicationControllerList>>;
    /**
     * list or watch objects of kind ReplicationController
     */
    listNamespacedReplicationController(requestParameters: CoreV1ApiListNamespacedReplicationControllerRequest): Promise<V1ReplicationControllerList>;
    /**
     * list or watch objects of kind ResourceQuota
     */
    listNamespacedResourceQuotaRaw(requestParameters: CoreV1ApiListNamespacedResourceQuotaRequest): Promise<runtime.ApiResponse<V1ResourceQuotaList>>;
    /**
     * list or watch objects of kind ResourceQuota
     */
    listNamespacedResourceQuota(requestParameters: CoreV1ApiListNamespacedResourceQuotaRequest): Promise<V1ResourceQuotaList>;
    /**
     * list or watch objects of kind Secret
     */
    listNamespacedSecretRaw(requestParameters: CoreV1ApiListNamespacedSecretRequest): Promise<runtime.ApiResponse<V1SecretList>>;
    /**
     * list or watch objects of kind Secret
     */
    listNamespacedSecret(requestParameters: CoreV1ApiListNamespacedSecretRequest): Promise<V1SecretList>;
    /**
     * list or watch objects of kind Service
     */
    listNamespacedServiceRaw(requestParameters: CoreV1ApiListNamespacedServiceRequest): Promise<runtime.ApiResponse<V1ServiceList>>;
    /**
     * list or watch objects of kind Service
     */
    listNamespacedService(requestParameters: CoreV1ApiListNamespacedServiceRequest): Promise<V1ServiceList>;
    /**
     * list or watch objects of kind ServiceAccount
     */
    listNamespacedServiceAccountRaw(requestParameters: CoreV1ApiListNamespacedServiceAccountRequest): Promise<runtime.ApiResponse<V1ServiceAccountList>>;
    /**
     * list or watch objects of kind ServiceAccount
     */
    listNamespacedServiceAccount(requestParameters: CoreV1ApiListNamespacedServiceAccountRequest): Promise<V1ServiceAccountList>;
    /**
     * list or watch objects of kind Node
     */
    listNodeRaw(requestParameters: CoreV1ApiListNodeRequest): Promise<runtime.ApiResponse<V1NodeList>>;
    /**
     * list or watch objects of kind Node
     */
    listNode(requestParameters: CoreV1ApiListNodeRequest): Promise<V1NodeList>;
    /**
     * list or watch objects of kind PersistentVolume
     */
    listPersistentVolumeRaw(requestParameters: CoreV1ApiListPersistentVolumeRequest): Promise<runtime.ApiResponse<V1PersistentVolumeList>>;
    /**
     * list or watch objects of kind PersistentVolume
     */
    listPersistentVolume(requestParameters: CoreV1ApiListPersistentVolumeRequest): Promise<V1PersistentVolumeList>;
    /**
     * list or watch objects of kind PersistentVolumeClaim
     */
    listPersistentVolumeClaimForAllNamespacesRaw(requestParameters: CoreV1ApiListPersistentVolumeClaimForAllNamespacesRequest): Promise<runtime.ApiResponse<V1PersistentVolumeClaimList>>;
    /**
     * list or watch objects of kind PersistentVolumeClaim
     */
    listPersistentVolumeClaimForAllNamespaces(requestParameters: CoreV1ApiListPersistentVolumeClaimForAllNamespacesRequest): Promise<V1PersistentVolumeClaimList>;
    /**
     * list or watch objects of kind Pod
     */
    listPodForAllNamespacesRaw(requestParameters: CoreV1ApiListPodForAllNamespacesRequest): Promise<runtime.ApiResponse<V1PodList>>;
    /**
     * list or watch objects of kind Pod
     */
    listPodForAllNamespaces(requestParameters: CoreV1ApiListPodForAllNamespacesRequest): Promise<V1PodList>;
    /**
     * list or watch objects of kind PodTemplate
     */
    listPodTemplateForAllNamespacesRaw(requestParameters: CoreV1ApiListPodTemplateForAllNamespacesRequest): Promise<runtime.ApiResponse<V1PodTemplateList>>;
    /**
     * list or watch objects of kind PodTemplate
     */
    listPodTemplateForAllNamespaces(requestParameters: CoreV1ApiListPodTemplateForAllNamespacesRequest): Promise<V1PodTemplateList>;
    /**
     * list or watch objects of kind ReplicationController
     */
    listReplicationControllerForAllNamespacesRaw(requestParameters: CoreV1ApiListReplicationControllerForAllNamespacesRequest): Promise<runtime.ApiResponse<V1ReplicationControllerList>>;
    /**
     * list or watch objects of kind ReplicationController
     */
    listReplicationControllerForAllNamespaces(requestParameters: CoreV1ApiListReplicationControllerForAllNamespacesRequest): Promise<V1ReplicationControllerList>;
    /**
     * list or watch objects of kind ResourceQuota
     */
    listResourceQuotaForAllNamespacesRaw(requestParameters: CoreV1ApiListResourceQuotaForAllNamespacesRequest): Promise<runtime.ApiResponse<V1ResourceQuotaList>>;
    /**
     * list or watch objects of kind ResourceQuota
     */
    listResourceQuotaForAllNamespaces(requestParameters: CoreV1ApiListResourceQuotaForAllNamespacesRequest): Promise<V1ResourceQuotaList>;
    /**
     * list or watch objects of kind Secret
     */
    listSecretForAllNamespacesRaw(requestParameters: CoreV1ApiListSecretForAllNamespacesRequest): Promise<runtime.ApiResponse<V1SecretList>>;
    /**
     * list or watch objects of kind Secret
     */
    listSecretForAllNamespaces(requestParameters: CoreV1ApiListSecretForAllNamespacesRequest): Promise<V1SecretList>;
    /**
     * list or watch objects of kind ServiceAccount
     */
    listServiceAccountForAllNamespacesRaw(requestParameters: CoreV1ApiListServiceAccountForAllNamespacesRequest): Promise<runtime.ApiResponse<V1ServiceAccountList>>;
    /**
     * list or watch objects of kind ServiceAccount
     */
    listServiceAccountForAllNamespaces(requestParameters: CoreV1ApiListServiceAccountForAllNamespacesRequest): Promise<V1ServiceAccountList>;
    /**
     * list or watch objects of kind Service
     */
    listServiceForAllNamespacesRaw(requestParameters: CoreV1ApiListServiceForAllNamespacesRequest): Promise<runtime.ApiResponse<V1ServiceList>>;
    /**
     * list or watch objects of kind Service
     */
    listServiceForAllNamespaces(requestParameters: CoreV1ApiListServiceForAllNamespacesRequest): Promise<V1ServiceList>;
    /**
     * partially update the specified Namespace
     */
    patchNamespaceRaw(requestParameters: CoreV1ApiPatchNamespaceRequest): Promise<runtime.ApiResponse<V1Namespace>>;
    /**
     * partially update the specified Namespace
     */
    patchNamespace(requestParameters: CoreV1ApiPatchNamespaceRequest): Promise<V1Namespace>;
    /**
     * partially update status of the specified Namespace
     */
    patchNamespaceStatusRaw(requestParameters: CoreV1ApiPatchNamespaceStatusRequest): Promise<runtime.ApiResponse<V1Namespace>>;
    /**
     * partially update status of the specified Namespace
     */
    patchNamespaceStatus(requestParameters: CoreV1ApiPatchNamespaceStatusRequest): Promise<V1Namespace>;
    /**
     * partially update the specified ConfigMap
     */
    patchNamespacedConfigMapRaw(requestParameters: CoreV1ApiPatchNamespacedConfigMapRequest): Promise<runtime.ApiResponse<V1ConfigMap>>;
    /**
     * partially update the specified ConfigMap
     */
    patchNamespacedConfigMap(requestParameters: CoreV1ApiPatchNamespacedConfigMapRequest): Promise<V1ConfigMap>;
    /**
     * partially update the specified Endpoints
     */
    patchNamespacedEndpointsRaw(requestParameters: CoreV1ApiPatchNamespacedEndpointsRequest): Promise<runtime.ApiResponse<V1Endpoints>>;
    /**
     * partially update the specified Endpoints
     */
    patchNamespacedEndpoints(requestParameters: CoreV1ApiPatchNamespacedEndpointsRequest): Promise<V1Endpoints>;
    /**
     * partially update the specified Event
     */
    patchNamespacedEventRaw(requestParameters: CoreV1ApiPatchNamespacedEventRequest): Promise<runtime.ApiResponse<CoreV1Event>>;
    /**
     * partially update the specified Event
     */
    patchNamespacedEvent(requestParameters: CoreV1ApiPatchNamespacedEventRequest): Promise<CoreV1Event>;
    /**
     * partially update the specified LimitRange
     */
    patchNamespacedLimitRangeRaw(requestParameters: CoreV1ApiPatchNamespacedLimitRangeRequest): Promise<runtime.ApiResponse<V1LimitRange>>;
    /**
     * partially update the specified LimitRange
     */
    patchNamespacedLimitRange(requestParameters: CoreV1ApiPatchNamespacedLimitRangeRequest): Promise<V1LimitRange>;
    /**
     * partially update the specified PersistentVolumeClaim
     */
    patchNamespacedPersistentVolumeClaimRaw(requestParameters: CoreV1ApiPatchNamespacedPersistentVolumeClaimRequest): Promise<runtime.ApiResponse<V1PersistentVolumeClaim>>;
    /**
     * partially update the specified PersistentVolumeClaim
     */
    patchNamespacedPersistentVolumeClaim(requestParameters: CoreV1ApiPatchNamespacedPersistentVolumeClaimRequest): Promise<V1PersistentVolumeClaim>;
    /**
     * partially update status of the specified PersistentVolumeClaim
     */
    patchNamespacedPersistentVolumeClaimStatusRaw(requestParameters: CoreV1ApiPatchNamespacedPersistentVolumeClaimStatusRequest): Promise<runtime.ApiResponse<V1PersistentVolumeClaim>>;
    /**
     * partially update status of the specified PersistentVolumeClaim
     */
    patchNamespacedPersistentVolumeClaimStatus(requestParameters: CoreV1ApiPatchNamespacedPersistentVolumeClaimStatusRequest): Promise<V1PersistentVolumeClaim>;
    /**
     * partially update the specified Pod
     */
    patchNamespacedPodRaw(requestParameters: CoreV1ApiPatchNamespacedPodRequest): Promise<runtime.ApiResponse<V1Pod>>;
    /**
     * partially update the specified Pod
     */
    patchNamespacedPod(requestParameters: CoreV1ApiPatchNamespacedPodRequest): Promise<V1Pod>;
    /**
     * partially update ephemeralcontainers of the specified Pod
     */
    patchNamespacedPodEphemeralcontainersRaw(requestParameters: CoreV1ApiPatchNamespacedPodEphemeralcontainersRequest): Promise<runtime.ApiResponse<V1Pod>>;
    /**
     * partially update ephemeralcontainers of the specified Pod
     */
    patchNamespacedPodEphemeralcontainers(requestParameters: CoreV1ApiPatchNamespacedPodEphemeralcontainersRequest): Promise<V1Pod>;
    /**
     * partially update status of the specified Pod
     */
    patchNamespacedPodStatusRaw(requestParameters: CoreV1ApiPatchNamespacedPodStatusRequest): Promise<runtime.ApiResponse<V1Pod>>;
    /**
     * partially update status of the specified Pod
     */
    patchNamespacedPodStatus(requestParameters: CoreV1ApiPatchNamespacedPodStatusRequest): Promise<V1Pod>;
    /**
     * partially update the specified PodTemplate
     */
    patchNamespacedPodTemplateRaw(requestParameters: CoreV1ApiPatchNamespacedPodTemplateRequest): Promise<runtime.ApiResponse<V1PodTemplate>>;
    /**
     * partially update the specified PodTemplate
     */
    patchNamespacedPodTemplate(requestParameters: CoreV1ApiPatchNamespacedPodTemplateRequest): Promise<V1PodTemplate>;
    /**
     * partially update the specified ReplicationController
     */
    patchNamespacedReplicationControllerRaw(requestParameters: CoreV1ApiPatchNamespacedReplicationControllerRequest): Promise<runtime.ApiResponse<V1ReplicationController>>;
    /**
     * partially update the specified ReplicationController
     */
    patchNamespacedReplicationController(requestParameters: CoreV1ApiPatchNamespacedReplicationControllerRequest): Promise<V1ReplicationController>;
    /**
     * partially update scale of the specified ReplicationController
     */
    patchNamespacedReplicationControllerScaleRaw(requestParameters: CoreV1ApiPatchNamespacedReplicationControllerScaleRequest): Promise<runtime.ApiResponse<V1Scale>>;
    /**
     * partially update scale of the specified ReplicationController
     */
    patchNamespacedReplicationControllerScale(requestParameters: CoreV1ApiPatchNamespacedReplicationControllerScaleRequest): Promise<V1Scale>;
    /**
     * partially update status of the specified ReplicationController
     */
    patchNamespacedReplicationControllerStatusRaw(requestParameters: CoreV1ApiPatchNamespacedReplicationControllerStatusRequest): Promise<runtime.ApiResponse<V1ReplicationController>>;
    /**
     * partially update status of the specified ReplicationController
     */
    patchNamespacedReplicationControllerStatus(requestParameters: CoreV1ApiPatchNamespacedReplicationControllerStatusRequest): Promise<V1ReplicationController>;
    /**
     * partially update the specified ResourceQuota
     */
    patchNamespacedResourceQuotaRaw(requestParameters: CoreV1ApiPatchNamespacedResourceQuotaRequest): Promise<runtime.ApiResponse<V1ResourceQuota>>;
    /**
     * partially update the specified ResourceQuota
     */
    patchNamespacedResourceQuota(requestParameters: CoreV1ApiPatchNamespacedResourceQuotaRequest): Promise<V1ResourceQuota>;
    /**
     * partially update status of the specified ResourceQuota
     */
    patchNamespacedResourceQuotaStatusRaw(requestParameters: CoreV1ApiPatchNamespacedResourceQuotaStatusRequest): Promise<runtime.ApiResponse<V1ResourceQuota>>;
    /**
     * partially update status of the specified ResourceQuota
     */
    patchNamespacedResourceQuotaStatus(requestParameters: CoreV1ApiPatchNamespacedResourceQuotaStatusRequest): Promise<V1ResourceQuota>;
    /**
     * partially update the specified Secret
     */
    patchNamespacedSecretRaw(requestParameters: CoreV1ApiPatchNamespacedSecretRequest): Promise<runtime.ApiResponse<V1Secret>>;
    /**
     * partially update the specified Secret
     */
    patchNamespacedSecret(requestParameters: CoreV1ApiPatchNamespacedSecretRequest): Promise<V1Secret>;
    /**
     * partially update the specified Service
     */
    patchNamespacedServiceRaw(requestParameters: CoreV1ApiPatchNamespacedServiceRequest): Promise<runtime.ApiResponse<V1Service>>;
    /**
     * partially update the specified Service
     */
    patchNamespacedService(requestParameters: CoreV1ApiPatchNamespacedServiceRequest): Promise<V1Service>;
    /**
     * partially update the specified ServiceAccount
     */
    patchNamespacedServiceAccountRaw(requestParameters: CoreV1ApiPatchNamespacedServiceAccountRequest): Promise<runtime.ApiResponse<V1ServiceAccount>>;
    /**
     * partially update the specified ServiceAccount
     */
    patchNamespacedServiceAccount(requestParameters: CoreV1ApiPatchNamespacedServiceAccountRequest): Promise<V1ServiceAccount>;
    /**
     * partially update status of the specified Service
     */
    patchNamespacedServiceStatusRaw(requestParameters: CoreV1ApiPatchNamespacedServiceStatusRequest): Promise<runtime.ApiResponse<V1Service>>;
    /**
     * partially update status of the specified Service
     */
    patchNamespacedServiceStatus(requestParameters: CoreV1ApiPatchNamespacedServiceStatusRequest): Promise<V1Service>;
    /**
     * partially update the specified Node
     */
    patchNodeRaw(requestParameters: CoreV1ApiPatchNodeRequest): Promise<runtime.ApiResponse<V1Node>>;
    /**
     * partially update the specified Node
     */
    patchNode(requestParameters: CoreV1ApiPatchNodeRequest): Promise<V1Node>;
    /**
     * partially update status of the specified Node
     */
    patchNodeStatusRaw(requestParameters: CoreV1ApiPatchNodeStatusRequest): Promise<runtime.ApiResponse<V1Node>>;
    /**
     * partially update status of the specified Node
     */
    patchNodeStatus(requestParameters: CoreV1ApiPatchNodeStatusRequest): Promise<V1Node>;
    /**
     * partially update the specified PersistentVolume
     */
    patchPersistentVolumeRaw(requestParameters: CoreV1ApiPatchPersistentVolumeRequest): Promise<runtime.ApiResponse<V1PersistentVolume>>;
    /**
     * partially update the specified PersistentVolume
     */
    patchPersistentVolume(requestParameters: CoreV1ApiPatchPersistentVolumeRequest): Promise<V1PersistentVolume>;
    /**
     * partially update status of the specified PersistentVolume
     */
    patchPersistentVolumeStatusRaw(requestParameters: CoreV1ApiPatchPersistentVolumeStatusRequest): Promise<runtime.ApiResponse<V1PersistentVolume>>;
    /**
     * partially update status of the specified PersistentVolume
     */
    patchPersistentVolumeStatus(requestParameters: CoreV1ApiPatchPersistentVolumeStatusRequest): Promise<V1PersistentVolume>;
    /**
     * read the specified ComponentStatus
     */
    readComponentStatusRaw(requestParameters: CoreV1ApiReadComponentStatusRequest): Promise<runtime.ApiResponse<V1ComponentStatus>>;
    /**
     * read the specified ComponentStatus
     */
    readComponentStatus(requestParameters: CoreV1ApiReadComponentStatusRequest): Promise<V1ComponentStatus>;
    /**
     * read the specified Namespace
     */
    readNamespaceRaw(requestParameters: CoreV1ApiReadNamespaceRequest): Promise<runtime.ApiResponse<V1Namespace>>;
    /**
     * read the specified Namespace
     */
    readNamespace(requestParameters: CoreV1ApiReadNamespaceRequest): Promise<V1Namespace>;
    /**
     * read status of the specified Namespace
     */
    readNamespaceStatusRaw(requestParameters: CoreV1ApiReadNamespaceStatusRequest): Promise<runtime.ApiResponse<V1Namespace>>;
    /**
     * read status of the specified Namespace
     */
    readNamespaceStatus(requestParameters: CoreV1ApiReadNamespaceStatusRequest): Promise<V1Namespace>;
    /**
     * read the specified ConfigMap
     */
    readNamespacedConfigMapRaw(requestParameters: CoreV1ApiReadNamespacedConfigMapRequest): Promise<runtime.ApiResponse<V1ConfigMap>>;
    /**
     * read the specified ConfigMap
     */
    readNamespacedConfigMap(requestParameters: CoreV1ApiReadNamespacedConfigMapRequest): Promise<V1ConfigMap>;
    /**
     * read the specified Endpoints
     */
    readNamespacedEndpointsRaw(requestParameters: CoreV1ApiReadNamespacedEndpointsRequest): Promise<runtime.ApiResponse<V1Endpoints>>;
    /**
     * read the specified Endpoints
     */
    readNamespacedEndpoints(requestParameters: CoreV1ApiReadNamespacedEndpointsRequest): Promise<V1Endpoints>;
    /**
     * read the specified Event
     */
    readNamespacedEventRaw(requestParameters: CoreV1ApiReadNamespacedEventRequest): Promise<runtime.ApiResponse<CoreV1Event>>;
    /**
     * read the specified Event
     */
    readNamespacedEvent(requestParameters: CoreV1ApiReadNamespacedEventRequest): Promise<CoreV1Event>;
    /**
     * read the specified LimitRange
     */
    readNamespacedLimitRangeRaw(requestParameters: CoreV1ApiReadNamespacedLimitRangeRequest): Promise<runtime.ApiResponse<V1LimitRange>>;
    /**
     * read the specified LimitRange
     */
    readNamespacedLimitRange(requestParameters: CoreV1ApiReadNamespacedLimitRangeRequest): Promise<V1LimitRange>;
    /**
     * read the specified PersistentVolumeClaim
     */
    readNamespacedPersistentVolumeClaimRaw(requestParameters: CoreV1ApiReadNamespacedPersistentVolumeClaimRequest): Promise<runtime.ApiResponse<V1PersistentVolumeClaim>>;
    /**
     * read the specified PersistentVolumeClaim
     */
    readNamespacedPersistentVolumeClaim(requestParameters: CoreV1ApiReadNamespacedPersistentVolumeClaimRequest): Promise<V1PersistentVolumeClaim>;
    /**
     * read status of the specified PersistentVolumeClaim
     */
    readNamespacedPersistentVolumeClaimStatusRaw(requestParameters: CoreV1ApiReadNamespacedPersistentVolumeClaimStatusRequest): Promise<runtime.ApiResponse<V1PersistentVolumeClaim>>;
    /**
     * read status of the specified PersistentVolumeClaim
     */
    readNamespacedPersistentVolumeClaimStatus(requestParameters: CoreV1ApiReadNamespacedPersistentVolumeClaimStatusRequest): Promise<V1PersistentVolumeClaim>;
    /**
     * read the specified Pod
     */
    readNamespacedPodRaw(requestParameters: CoreV1ApiReadNamespacedPodRequest): Promise<runtime.ApiResponse<V1Pod>>;
    /**
     * read the specified Pod
     */
    readNamespacedPod(requestParameters: CoreV1ApiReadNamespacedPodRequest): Promise<V1Pod>;
    /**
     * read ephemeralcontainers of the specified Pod
     */
    readNamespacedPodEphemeralcontainersRaw(requestParameters: CoreV1ApiReadNamespacedPodEphemeralcontainersRequest): Promise<runtime.ApiResponse<V1Pod>>;
    /**
     * read ephemeralcontainers of the specified Pod
     */
    readNamespacedPodEphemeralcontainers(requestParameters: CoreV1ApiReadNamespacedPodEphemeralcontainersRequest): Promise<V1Pod>;
    /**
     * read log of the specified Pod
     */
    readNamespacedPodLogRaw(requestParameters: CoreV1ApiReadNamespacedPodLogRequest): Promise<runtime.ApiResponse<string>>;
    /**
     * read log of the specified Pod
     */
    readNamespacedPodLog(requestParameters: CoreV1ApiReadNamespacedPodLogRequest): Promise<string>;
    /**
     * read status of the specified Pod
     */
    readNamespacedPodStatusRaw(requestParameters: CoreV1ApiReadNamespacedPodStatusRequest): Promise<runtime.ApiResponse<V1Pod>>;
    /**
     * read status of the specified Pod
     */
    readNamespacedPodStatus(requestParameters: CoreV1ApiReadNamespacedPodStatusRequest): Promise<V1Pod>;
    /**
     * read the specified PodTemplate
     */
    readNamespacedPodTemplateRaw(requestParameters: CoreV1ApiReadNamespacedPodTemplateRequest): Promise<runtime.ApiResponse<V1PodTemplate>>;
    /**
     * read the specified PodTemplate
     */
    readNamespacedPodTemplate(requestParameters: CoreV1ApiReadNamespacedPodTemplateRequest): Promise<V1PodTemplate>;
    /**
     * read the specified ReplicationController
     */
    readNamespacedReplicationControllerRaw(requestParameters: CoreV1ApiReadNamespacedReplicationControllerRequest): Promise<runtime.ApiResponse<V1ReplicationController>>;
    /**
     * read the specified ReplicationController
     */
    readNamespacedReplicationController(requestParameters: CoreV1ApiReadNamespacedReplicationControllerRequest): Promise<V1ReplicationController>;
    /**
     * read scale of the specified ReplicationController
     */
    readNamespacedReplicationControllerScaleRaw(requestParameters: CoreV1ApiReadNamespacedReplicationControllerScaleRequest): Promise<runtime.ApiResponse<V1Scale>>;
    /**
     * read scale of the specified ReplicationController
     */
    readNamespacedReplicationControllerScale(requestParameters: CoreV1ApiReadNamespacedReplicationControllerScaleRequest): Promise<V1Scale>;
    /**
     * read status of the specified ReplicationController
     */
    readNamespacedReplicationControllerStatusRaw(requestParameters: CoreV1ApiReadNamespacedReplicationControllerStatusRequest): Promise<runtime.ApiResponse<V1ReplicationController>>;
    /**
     * read status of the specified ReplicationController
     */
    readNamespacedReplicationControllerStatus(requestParameters: CoreV1ApiReadNamespacedReplicationControllerStatusRequest): Promise<V1ReplicationController>;
    /**
     * read the specified ResourceQuota
     */
    readNamespacedResourceQuotaRaw(requestParameters: CoreV1ApiReadNamespacedResourceQuotaRequest): Promise<runtime.ApiResponse<V1ResourceQuota>>;
    /**
     * read the specified ResourceQuota
     */
    readNamespacedResourceQuota(requestParameters: CoreV1ApiReadNamespacedResourceQuotaRequest): Promise<V1ResourceQuota>;
    /**
     * read status of the specified ResourceQuota
     */
    readNamespacedResourceQuotaStatusRaw(requestParameters: CoreV1ApiReadNamespacedResourceQuotaStatusRequest): Promise<runtime.ApiResponse<V1ResourceQuota>>;
    /**
     * read status of the specified ResourceQuota
     */
    readNamespacedResourceQuotaStatus(requestParameters: CoreV1ApiReadNamespacedResourceQuotaStatusRequest): Promise<V1ResourceQuota>;
    /**
     * read the specified Secret
     */
    readNamespacedSecretRaw(requestParameters: CoreV1ApiReadNamespacedSecretRequest): Promise<runtime.ApiResponse<V1Secret>>;
    /**
     * read the specified Secret
     */
    readNamespacedSecret(requestParameters: CoreV1ApiReadNamespacedSecretRequest): Promise<V1Secret>;
    /**
     * read the specified Service
     */
    readNamespacedServiceRaw(requestParameters: CoreV1ApiReadNamespacedServiceRequest): Promise<runtime.ApiResponse<V1Service>>;
    /**
     * read the specified Service
     */
    readNamespacedService(requestParameters: CoreV1ApiReadNamespacedServiceRequest): Promise<V1Service>;
    /**
     * read the specified ServiceAccount
     */
    readNamespacedServiceAccountRaw(requestParameters: CoreV1ApiReadNamespacedServiceAccountRequest): Promise<runtime.ApiResponse<V1ServiceAccount>>;
    /**
     * read the specified ServiceAccount
     */
    readNamespacedServiceAccount(requestParameters: CoreV1ApiReadNamespacedServiceAccountRequest): Promise<V1ServiceAccount>;
    /**
     * read status of the specified Service
     */
    readNamespacedServiceStatusRaw(requestParameters: CoreV1ApiReadNamespacedServiceStatusRequest): Promise<runtime.ApiResponse<V1Service>>;
    /**
     * read status of the specified Service
     */
    readNamespacedServiceStatus(requestParameters: CoreV1ApiReadNamespacedServiceStatusRequest): Promise<V1Service>;
    /**
     * read the specified Node
     */
    readNodeRaw(requestParameters: CoreV1ApiReadNodeRequest): Promise<runtime.ApiResponse<V1Node>>;
    /**
     * read the specified Node
     */
    readNode(requestParameters: CoreV1ApiReadNodeRequest): Promise<V1Node>;
    /**
     * read status of the specified Node
     */
    readNodeStatusRaw(requestParameters: CoreV1ApiReadNodeStatusRequest): Promise<runtime.ApiResponse<V1Node>>;
    /**
     * read status of the specified Node
     */
    readNodeStatus(requestParameters: CoreV1ApiReadNodeStatusRequest): Promise<V1Node>;
    /**
     * read the specified PersistentVolume
     */
    readPersistentVolumeRaw(requestParameters: CoreV1ApiReadPersistentVolumeRequest): Promise<runtime.ApiResponse<V1PersistentVolume>>;
    /**
     * read the specified PersistentVolume
     */
    readPersistentVolume(requestParameters: CoreV1ApiReadPersistentVolumeRequest): Promise<V1PersistentVolume>;
    /**
     * read status of the specified PersistentVolume
     */
    readPersistentVolumeStatusRaw(requestParameters: CoreV1ApiReadPersistentVolumeStatusRequest): Promise<runtime.ApiResponse<V1PersistentVolume>>;
    /**
     * read status of the specified PersistentVolume
     */
    readPersistentVolumeStatus(requestParameters: CoreV1ApiReadPersistentVolumeStatusRequest): Promise<V1PersistentVolume>;
    /**
     * replace the specified Namespace
     */
    replaceNamespaceRaw(requestParameters: CoreV1ApiReplaceNamespaceRequest): Promise<runtime.ApiResponse<V1Namespace>>;
    /**
     * replace the specified Namespace
     */
    replaceNamespace(requestParameters: CoreV1ApiReplaceNamespaceRequest): Promise<V1Namespace>;
    /**
     * replace finalize of the specified Namespace
     */
    replaceNamespaceFinalizeRaw(requestParameters: CoreV1ApiReplaceNamespaceFinalizeRequest): Promise<runtime.ApiResponse<V1Namespace>>;
    /**
     * replace finalize of the specified Namespace
     */
    replaceNamespaceFinalize(requestParameters: CoreV1ApiReplaceNamespaceFinalizeRequest): Promise<V1Namespace>;
    /**
     * replace status of the specified Namespace
     */
    replaceNamespaceStatusRaw(requestParameters: CoreV1ApiReplaceNamespaceStatusRequest): Promise<runtime.ApiResponse<V1Namespace>>;
    /**
     * replace status of the specified Namespace
     */
    replaceNamespaceStatus(requestParameters: CoreV1ApiReplaceNamespaceStatusRequest): Promise<V1Namespace>;
    /**
     * replace the specified ConfigMap
     */
    replaceNamespacedConfigMapRaw(requestParameters: CoreV1ApiReplaceNamespacedConfigMapRequest): Promise<runtime.ApiResponse<V1ConfigMap>>;
    /**
     * replace the specified ConfigMap
     */
    replaceNamespacedConfigMap(requestParameters: CoreV1ApiReplaceNamespacedConfigMapRequest): Promise<V1ConfigMap>;
    /**
     * replace the specified Endpoints
     */
    replaceNamespacedEndpointsRaw(requestParameters: CoreV1ApiReplaceNamespacedEndpointsRequest): Promise<runtime.ApiResponse<V1Endpoints>>;
    /**
     * replace the specified Endpoints
     */
    replaceNamespacedEndpoints(requestParameters: CoreV1ApiReplaceNamespacedEndpointsRequest): Promise<V1Endpoints>;
    /**
     * replace the specified Event
     */
    replaceNamespacedEventRaw(requestParameters: CoreV1ApiReplaceNamespacedEventRequest): Promise<runtime.ApiResponse<CoreV1Event>>;
    /**
     * replace the specified Event
     */
    replaceNamespacedEvent(requestParameters: CoreV1ApiReplaceNamespacedEventRequest): Promise<CoreV1Event>;
    /**
     * replace the specified LimitRange
     */
    replaceNamespacedLimitRangeRaw(requestParameters: CoreV1ApiReplaceNamespacedLimitRangeRequest): Promise<runtime.ApiResponse<V1LimitRange>>;
    /**
     * replace the specified LimitRange
     */
    replaceNamespacedLimitRange(requestParameters: CoreV1ApiReplaceNamespacedLimitRangeRequest): Promise<V1LimitRange>;
    /**
     * replace the specified PersistentVolumeClaim
     */
    replaceNamespacedPersistentVolumeClaimRaw(requestParameters: CoreV1ApiReplaceNamespacedPersistentVolumeClaimRequest): Promise<runtime.ApiResponse<V1PersistentVolumeClaim>>;
    /**
     * replace the specified PersistentVolumeClaim
     */
    replaceNamespacedPersistentVolumeClaim(requestParameters: CoreV1ApiReplaceNamespacedPersistentVolumeClaimRequest): Promise<V1PersistentVolumeClaim>;
    /**
     * replace status of the specified PersistentVolumeClaim
     */
    replaceNamespacedPersistentVolumeClaimStatusRaw(requestParameters: CoreV1ApiReplaceNamespacedPersistentVolumeClaimStatusRequest): Promise<runtime.ApiResponse<V1PersistentVolumeClaim>>;
    /**
     * replace status of the specified PersistentVolumeClaim
     */
    replaceNamespacedPersistentVolumeClaimStatus(requestParameters: CoreV1ApiReplaceNamespacedPersistentVolumeClaimStatusRequest): Promise<V1PersistentVolumeClaim>;
    /**
     * replace the specified Pod
     */
    replaceNamespacedPodRaw(requestParameters: CoreV1ApiReplaceNamespacedPodRequest): Promise<runtime.ApiResponse<V1Pod>>;
    /**
     * replace the specified Pod
     */
    replaceNamespacedPod(requestParameters: CoreV1ApiReplaceNamespacedPodRequest): Promise<V1Pod>;
    /**
     * replace ephemeralcontainers of the specified Pod
     */
    replaceNamespacedPodEphemeralcontainersRaw(requestParameters: CoreV1ApiReplaceNamespacedPodEphemeralcontainersRequest): Promise<runtime.ApiResponse<V1Pod>>;
    /**
     * replace ephemeralcontainers of the specified Pod
     */
    replaceNamespacedPodEphemeralcontainers(requestParameters: CoreV1ApiReplaceNamespacedPodEphemeralcontainersRequest): Promise<V1Pod>;
    /**
     * replace status of the specified Pod
     */
    replaceNamespacedPodStatusRaw(requestParameters: CoreV1ApiReplaceNamespacedPodStatusRequest): Promise<runtime.ApiResponse<V1Pod>>;
    /**
     * replace status of the specified Pod
     */
    replaceNamespacedPodStatus(requestParameters: CoreV1ApiReplaceNamespacedPodStatusRequest): Promise<V1Pod>;
    /**
     * replace the specified PodTemplate
     */
    replaceNamespacedPodTemplateRaw(requestParameters: CoreV1ApiReplaceNamespacedPodTemplateRequest): Promise<runtime.ApiResponse<V1PodTemplate>>;
    /**
     * replace the specified PodTemplate
     */
    replaceNamespacedPodTemplate(requestParameters: CoreV1ApiReplaceNamespacedPodTemplateRequest): Promise<V1PodTemplate>;
    /**
     * replace the specified ReplicationController
     */
    replaceNamespacedReplicationControllerRaw(requestParameters: CoreV1ApiReplaceNamespacedReplicationControllerRequest): Promise<runtime.ApiResponse<V1ReplicationController>>;
    /**
     * replace the specified ReplicationController
     */
    replaceNamespacedReplicationController(requestParameters: CoreV1ApiReplaceNamespacedReplicationControllerRequest): Promise<V1ReplicationController>;
    /**
     * replace scale of the specified ReplicationController
     */
    replaceNamespacedReplicationControllerScaleRaw(requestParameters: CoreV1ApiReplaceNamespacedReplicationControllerScaleRequest): Promise<runtime.ApiResponse<V1Scale>>;
    /**
     * replace scale of the specified ReplicationController
     */
    replaceNamespacedReplicationControllerScale(requestParameters: CoreV1ApiReplaceNamespacedReplicationControllerScaleRequest): Promise<V1Scale>;
    /**
     * replace status of the specified ReplicationController
     */
    replaceNamespacedReplicationControllerStatusRaw(requestParameters: CoreV1ApiReplaceNamespacedReplicationControllerStatusRequest): Promise<runtime.ApiResponse<V1ReplicationController>>;
    /**
     * replace status of the specified ReplicationController
     */
    replaceNamespacedReplicationControllerStatus(requestParameters: CoreV1ApiReplaceNamespacedReplicationControllerStatusRequest): Promise<V1ReplicationController>;
    /**
     * replace the specified ResourceQuota
     */
    replaceNamespacedResourceQuotaRaw(requestParameters: CoreV1ApiReplaceNamespacedResourceQuotaRequest): Promise<runtime.ApiResponse<V1ResourceQuota>>;
    /**
     * replace the specified ResourceQuota
     */
    replaceNamespacedResourceQuota(requestParameters: CoreV1ApiReplaceNamespacedResourceQuotaRequest): Promise<V1ResourceQuota>;
    /**
     * replace status of the specified ResourceQuota
     */
    replaceNamespacedResourceQuotaStatusRaw(requestParameters: CoreV1ApiReplaceNamespacedResourceQuotaStatusRequest): Promise<runtime.ApiResponse<V1ResourceQuota>>;
    /**
     * replace status of the specified ResourceQuota
     */
    replaceNamespacedResourceQuotaStatus(requestParameters: CoreV1ApiReplaceNamespacedResourceQuotaStatusRequest): Promise<V1ResourceQuota>;
    /**
     * replace the specified Secret
     */
    replaceNamespacedSecretRaw(requestParameters: CoreV1ApiReplaceNamespacedSecretRequest): Promise<runtime.ApiResponse<V1Secret>>;
    /**
     * replace the specified Secret
     */
    replaceNamespacedSecret(requestParameters: CoreV1ApiReplaceNamespacedSecretRequest): Promise<V1Secret>;
    /**
     * replace the specified Service
     */
    replaceNamespacedServiceRaw(requestParameters: CoreV1ApiReplaceNamespacedServiceRequest): Promise<runtime.ApiResponse<V1Service>>;
    /**
     * replace the specified Service
     */
    replaceNamespacedService(requestParameters: CoreV1ApiReplaceNamespacedServiceRequest): Promise<V1Service>;
    /**
     * replace the specified ServiceAccount
     */
    replaceNamespacedServiceAccountRaw(requestParameters: CoreV1ApiReplaceNamespacedServiceAccountRequest): Promise<runtime.ApiResponse<V1ServiceAccount>>;
    /**
     * replace the specified ServiceAccount
     */
    replaceNamespacedServiceAccount(requestParameters: CoreV1ApiReplaceNamespacedServiceAccountRequest): Promise<V1ServiceAccount>;
    /**
     * replace status of the specified Service
     */
    replaceNamespacedServiceStatusRaw(requestParameters: CoreV1ApiReplaceNamespacedServiceStatusRequest): Promise<runtime.ApiResponse<V1Service>>;
    /**
     * replace status of the specified Service
     */
    replaceNamespacedServiceStatus(requestParameters: CoreV1ApiReplaceNamespacedServiceStatusRequest): Promise<V1Service>;
    /**
     * replace the specified Node
     */
    replaceNodeRaw(requestParameters: CoreV1ApiReplaceNodeRequest): Promise<runtime.ApiResponse<V1Node>>;
    /**
     * replace the specified Node
     */
    replaceNode(requestParameters: CoreV1ApiReplaceNodeRequest): Promise<V1Node>;
    /**
     * replace status of the specified Node
     */
    replaceNodeStatusRaw(requestParameters: CoreV1ApiReplaceNodeStatusRequest): Promise<runtime.ApiResponse<V1Node>>;
    /**
     * replace status of the specified Node
     */
    replaceNodeStatus(requestParameters: CoreV1ApiReplaceNodeStatusRequest): Promise<V1Node>;
    /**
     * replace the specified PersistentVolume
     */
    replacePersistentVolumeRaw(requestParameters: CoreV1ApiReplacePersistentVolumeRequest): Promise<runtime.ApiResponse<V1PersistentVolume>>;
    /**
     * replace the specified PersistentVolume
     */
    replacePersistentVolume(requestParameters: CoreV1ApiReplacePersistentVolumeRequest): Promise<V1PersistentVolume>;
    /**
     * replace status of the specified PersistentVolume
     */
    replacePersistentVolumeStatusRaw(requestParameters: CoreV1ApiReplacePersistentVolumeStatusRequest): Promise<runtime.ApiResponse<V1PersistentVolume>>;
    /**
     * replace status of the specified PersistentVolume
     */
    replacePersistentVolumeStatus(requestParameters: CoreV1ApiReplacePersistentVolumeStatusRequest): Promise<V1PersistentVolume>;
}
