"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: release-1.24
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AppsV1Api = void 0;
const runtime = require("../runtime");
const models_1 = require("../models");
/**
 *
 */
class AppsV1Api extends runtime.BaseAPI {
    /**
     * create a ControllerRevision
     */
    createNamespacedControllerRevisionRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                throw new runtime.RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling createNamespacedControllerRevision.');
            }
            if (requestParameters.body === null || requestParameters.body === undefined) {
                throw new runtime.RequiredError('body', 'Required parameter requestParameters.body was null or undefined when calling createNamespacedControllerRevision.');
            }
            const queryParameters = {};
            if (requestParameters.pretty !== undefined) {
                queryParameters['pretty'] = requestParameters.pretty;
            }
            if (requestParameters.dryRun !== undefined) {
                queryParameters['dryRun'] = requestParameters.dryRun;
            }
            if (requestParameters.fieldManager !== undefined) {
                queryParameters['fieldManager'] = requestParameters.fieldManager;
            }
            if (requestParameters.fieldValidation !== undefined) {
                queryParameters['fieldValidation'] = requestParameters.fieldValidation;
            }
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/apis/apps/v1/namespaces/{namespace}/controllerrevisions`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: models_1.V1ControllerRevisionToJSON(requestParameters.body),
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.V1ControllerRevisionFromJSON(jsonValue));
        });
    }
    /**
     * create a ControllerRevision
     */
    createNamespacedControllerRevision(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.createNamespacedControllerRevisionRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * create a DaemonSet
     */
    createNamespacedDaemonSetRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                throw new runtime.RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling createNamespacedDaemonSet.');
            }
            if (requestParameters.body === null || requestParameters.body === undefined) {
                throw new runtime.RequiredError('body', 'Required parameter requestParameters.body was null or undefined when calling createNamespacedDaemonSet.');
            }
            const queryParameters = {};
            if (requestParameters.pretty !== undefined) {
                queryParameters['pretty'] = requestParameters.pretty;
            }
            if (requestParameters.dryRun !== undefined) {
                queryParameters['dryRun'] = requestParameters.dryRun;
            }
            if (requestParameters.fieldManager !== undefined) {
                queryParameters['fieldManager'] = requestParameters.fieldManager;
            }
            if (requestParameters.fieldValidation !== undefined) {
                queryParameters['fieldValidation'] = requestParameters.fieldValidation;
            }
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/apis/apps/v1/namespaces/{namespace}/daemonsets`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: models_1.V1DaemonSetToJSON(requestParameters.body),
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.V1DaemonSetFromJSON(jsonValue));
        });
    }
    /**
     * create a DaemonSet
     */
    createNamespacedDaemonSet(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.createNamespacedDaemonSetRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * create a Deployment
     */
    createNamespacedDeploymentRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                throw new runtime.RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling createNamespacedDeployment.');
            }
            if (requestParameters.body === null || requestParameters.body === undefined) {
                throw new runtime.RequiredError('body', 'Required parameter requestParameters.body was null or undefined when calling createNamespacedDeployment.');
            }
            const queryParameters = {};
            if (requestParameters.pretty !== undefined) {
                queryParameters['pretty'] = requestParameters.pretty;
            }
            if (requestParameters.dryRun !== undefined) {
                queryParameters['dryRun'] = requestParameters.dryRun;
            }
            if (requestParameters.fieldManager !== undefined) {
                queryParameters['fieldManager'] = requestParameters.fieldManager;
            }
            if (requestParameters.fieldValidation !== undefined) {
                queryParameters['fieldValidation'] = requestParameters.fieldValidation;
            }
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/apis/apps/v1/namespaces/{namespace}/deployments`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: models_1.V1DeploymentToJSON(requestParameters.body),
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.V1DeploymentFromJSON(jsonValue));
        });
    }
    /**
     * create a Deployment
     */
    createNamespacedDeployment(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.createNamespacedDeploymentRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * create a ReplicaSet
     */
    createNamespacedReplicaSetRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                throw new runtime.RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling createNamespacedReplicaSet.');
            }
            if (requestParameters.body === null || requestParameters.body === undefined) {
                throw new runtime.RequiredError('body', 'Required parameter requestParameters.body was null or undefined when calling createNamespacedReplicaSet.');
            }
            const queryParameters = {};
            if (requestParameters.pretty !== undefined) {
                queryParameters['pretty'] = requestParameters.pretty;
            }
            if (requestParameters.dryRun !== undefined) {
                queryParameters['dryRun'] = requestParameters.dryRun;
            }
            if (requestParameters.fieldManager !== undefined) {
                queryParameters['fieldManager'] = requestParameters.fieldManager;
            }
            if (requestParameters.fieldValidation !== undefined) {
                queryParameters['fieldValidation'] = requestParameters.fieldValidation;
            }
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/apis/apps/v1/namespaces/{namespace}/replicasets`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: models_1.V1ReplicaSetToJSON(requestParameters.body),
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.V1ReplicaSetFromJSON(jsonValue));
        });
    }
    /**
     * create a ReplicaSet
     */
    createNamespacedReplicaSet(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.createNamespacedReplicaSetRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * create a StatefulSet
     */
    createNamespacedStatefulSetRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                throw new runtime.RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling createNamespacedStatefulSet.');
            }
            if (requestParameters.body === null || requestParameters.body === undefined) {
                throw new runtime.RequiredError('body', 'Required parameter requestParameters.body was null or undefined when calling createNamespacedStatefulSet.');
            }
            const queryParameters = {};
            if (requestParameters.pretty !== undefined) {
                queryParameters['pretty'] = requestParameters.pretty;
            }
            if (requestParameters.dryRun !== undefined) {
                queryParameters['dryRun'] = requestParameters.dryRun;
            }
            if (requestParameters.fieldManager !== undefined) {
                queryParameters['fieldManager'] = requestParameters.fieldManager;
            }
            if (requestParameters.fieldValidation !== undefined) {
                queryParameters['fieldValidation'] = requestParameters.fieldValidation;
            }
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/apis/apps/v1/namespaces/{namespace}/statefulsets`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: models_1.V1StatefulSetToJSON(requestParameters.body),
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.V1StatefulSetFromJSON(jsonValue));
        });
    }
    /**
     * create a StatefulSet
     */
    createNamespacedStatefulSet(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.createNamespacedStatefulSetRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * delete collection of ControllerRevision
     */
    deleteCollectionNamespacedControllerRevisionRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                throw new runtime.RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling deleteCollectionNamespacedControllerRevision.');
            }
            const queryParameters = {};
            if (requestParameters.pretty !== undefined) {
                queryParameters['pretty'] = requestParameters.pretty;
            }
            if (requestParameters._continue !== undefined) {
                queryParameters['continue'] = requestParameters._continue;
            }
            if (requestParameters.dryRun !== undefined) {
                queryParameters['dryRun'] = requestParameters.dryRun;
            }
            if (requestParameters.fieldSelector !== undefined) {
                queryParameters['fieldSelector'] = requestParameters.fieldSelector;
            }
            if (requestParameters.gracePeriodSeconds !== undefined) {
                queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
            }
            if (requestParameters.labelSelector !== undefined) {
                queryParameters['labelSelector'] = requestParameters.labelSelector;
            }
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.orphanDependents !== undefined) {
                queryParameters['orphanDependents'] = requestParameters.orphanDependents;
            }
            if (requestParameters.propagationPolicy !== undefined) {
                queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
            }
            if (requestParameters.resourceVersion !== undefined) {
                queryParameters['resourceVersion'] = requestParameters.resourceVersion;
            }
            if (requestParameters.resourceVersionMatch !== undefined) {
                queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
            }
            if (requestParameters.timeoutSeconds !== undefined) {
                queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
            }
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/apis/apps/v1/namespaces/{namespace}/controllerrevisions`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
                body: models_1.V1DeleteOptionsToJSON(requestParameters.body),
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.V1StatusFromJSON(jsonValue));
        });
    }
    /**
     * delete collection of ControllerRevision
     */
    deleteCollectionNamespacedControllerRevision(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteCollectionNamespacedControllerRevisionRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * delete collection of DaemonSet
     */
    deleteCollectionNamespacedDaemonSetRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                throw new runtime.RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling deleteCollectionNamespacedDaemonSet.');
            }
            const queryParameters = {};
            if (requestParameters.pretty !== undefined) {
                queryParameters['pretty'] = requestParameters.pretty;
            }
            if (requestParameters._continue !== undefined) {
                queryParameters['continue'] = requestParameters._continue;
            }
            if (requestParameters.dryRun !== undefined) {
                queryParameters['dryRun'] = requestParameters.dryRun;
            }
            if (requestParameters.fieldSelector !== undefined) {
                queryParameters['fieldSelector'] = requestParameters.fieldSelector;
            }
            if (requestParameters.gracePeriodSeconds !== undefined) {
                queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
            }
            if (requestParameters.labelSelector !== undefined) {
                queryParameters['labelSelector'] = requestParameters.labelSelector;
            }
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.orphanDependents !== undefined) {
                queryParameters['orphanDependents'] = requestParameters.orphanDependents;
            }
            if (requestParameters.propagationPolicy !== undefined) {
                queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
            }
            if (requestParameters.resourceVersion !== undefined) {
                queryParameters['resourceVersion'] = requestParameters.resourceVersion;
            }
            if (requestParameters.resourceVersionMatch !== undefined) {
                queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
            }
            if (requestParameters.timeoutSeconds !== undefined) {
                queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
            }
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/apis/apps/v1/namespaces/{namespace}/daemonsets`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
                body: models_1.V1DeleteOptionsToJSON(requestParameters.body),
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.V1StatusFromJSON(jsonValue));
        });
    }
    /**
     * delete collection of DaemonSet
     */
    deleteCollectionNamespacedDaemonSet(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteCollectionNamespacedDaemonSetRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * delete collection of Deployment
     */
    deleteCollectionNamespacedDeploymentRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                throw new runtime.RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling deleteCollectionNamespacedDeployment.');
            }
            const queryParameters = {};
            if (requestParameters.pretty !== undefined) {
                queryParameters['pretty'] = requestParameters.pretty;
            }
            if (requestParameters._continue !== undefined) {
                queryParameters['continue'] = requestParameters._continue;
            }
            if (requestParameters.dryRun !== undefined) {
                queryParameters['dryRun'] = requestParameters.dryRun;
            }
            if (requestParameters.fieldSelector !== undefined) {
                queryParameters['fieldSelector'] = requestParameters.fieldSelector;
            }
            if (requestParameters.gracePeriodSeconds !== undefined) {
                queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
            }
            if (requestParameters.labelSelector !== undefined) {
                queryParameters['labelSelector'] = requestParameters.labelSelector;
            }
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.orphanDependents !== undefined) {
                queryParameters['orphanDependents'] = requestParameters.orphanDependents;
            }
            if (requestParameters.propagationPolicy !== undefined) {
                queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
            }
            if (requestParameters.resourceVersion !== undefined) {
                queryParameters['resourceVersion'] = requestParameters.resourceVersion;
            }
            if (requestParameters.resourceVersionMatch !== undefined) {
                queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
            }
            if (requestParameters.timeoutSeconds !== undefined) {
                queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
            }
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/apis/apps/v1/namespaces/{namespace}/deployments`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
                body: models_1.V1DeleteOptionsToJSON(requestParameters.body),
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.V1StatusFromJSON(jsonValue));
        });
    }
    /**
     * delete collection of Deployment
     */
    deleteCollectionNamespacedDeployment(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteCollectionNamespacedDeploymentRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * delete collection of ReplicaSet
     */
    deleteCollectionNamespacedReplicaSetRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                throw new runtime.RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling deleteCollectionNamespacedReplicaSet.');
            }
            const queryParameters = {};
            if (requestParameters.pretty !== undefined) {
                queryParameters['pretty'] = requestParameters.pretty;
            }
            if (requestParameters._continue !== undefined) {
                queryParameters['continue'] = requestParameters._continue;
            }
            if (requestParameters.dryRun !== undefined) {
                queryParameters['dryRun'] = requestParameters.dryRun;
            }
            if (requestParameters.fieldSelector !== undefined) {
                queryParameters['fieldSelector'] = requestParameters.fieldSelector;
            }
            if (requestParameters.gracePeriodSeconds !== undefined) {
                queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
            }
            if (requestParameters.labelSelector !== undefined) {
                queryParameters['labelSelector'] = requestParameters.labelSelector;
            }
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.orphanDependents !== undefined) {
                queryParameters['orphanDependents'] = requestParameters.orphanDependents;
            }
            if (requestParameters.propagationPolicy !== undefined) {
                queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
            }
            if (requestParameters.resourceVersion !== undefined) {
                queryParameters['resourceVersion'] = requestParameters.resourceVersion;
            }
            if (requestParameters.resourceVersionMatch !== undefined) {
                queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
            }
            if (requestParameters.timeoutSeconds !== undefined) {
                queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
            }
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/apis/apps/v1/namespaces/{namespace}/replicasets`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
                body: models_1.V1DeleteOptionsToJSON(requestParameters.body),
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.V1StatusFromJSON(jsonValue));
        });
    }
    /**
     * delete collection of ReplicaSet
     */
    deleteCollectionNamespacedReplicaSet(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteCollectionNamespacedReplicaSetRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * delete collection of StatefulSet
     */
    deleteCollectionNamespacedStatefulSetRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                throw new runtime.RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling deleteCollectionNamespacedStatefulSet.');
            }
            const queryParameters = {};
            if (requestParameters.pretty !== undefined) {
                queryParameters['pretty'] = requestParameters.pretty;
            }
            if (requestParameters._continue !== undefined) {
                queryParameters['continue'] = requestParameters._continue;
            }
            if (requestParameters.dryRun !== undefined) {
                queryParameters['dryRun'] = requestParameters.dryRun;
            }
            if (requestParameters.fieldSelector !== undefined) {
                queryParameters['fieldSelector'] = requestParameters.fieldSelector;
            }
            if (requestParameters.gracePeriodSeconds !== undefined) {
                queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
            }
            if (requestParameters.labelSelector !== undefined) {
                queryParameters['labelSelector'] = requestParameters.labelSelector;
            }
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.orphanDependents !== undefined) {
                queryParameters['orphanDependents'] = requestParameters.orphanDependents;
            }
            if (requestParameters.propagationPolicy !== undefined) {
                queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
            }
            if (requestParameters.resourceVersion !== undefined) {
                queryParameters['resourceVersion'] = requestParameters.resourceVersion;
            }
            if (requestParameters.resourceVersionMatch !== undefined) {
                queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
            }
            if (requestParameters.timeoutSeconds !== undefined) {
                queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
            }
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/apis/apps/v1/namespaces/{namespace}/statefulsets`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
                body: models_1.V1DeleteOptionsToJSON(requestParameters.body),
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.V1StatusFromJSON(jsonValue));
        });
    }
    /**
     * delete collection of StatefulSet
     */
    deleteCollectionNamespacedStatefulSet(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteCollectionNamespacedStatefulSetRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * delete a ControllerRevision
     */
    deleteNamespacedControllerRevisionRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.name === null || requestParameters.name === undefined) {
                throw new runtime.RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling deleteNamespacedControllerRevision.');
            }
            if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                throw new runtime.RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling deleteNamespacedControllerRevision.');
            }
            const queryParameters = {};
            if (requestParameters.pretty !== undefined) {
                queryParameters['pretty'] = requestParameters.pretty;
            }
            if (requestParameters.dryRun !== undefined) {
                queryParameters['dryRun'] = requestParameters.dryRun;
            }
            if (requestParameters.gracePeriodSeconds !== undefined) {
                queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
            }
            if (requestParameters.orphanDependents !== undefined) {
                queryParameters['orphanDependents'] = requestParameters.orphanDependents;
            }
            if (requestParameters.propagationPolicy !== undefined) {
                queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
            }
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/apis/apps/v1/namespaces/{namespace}/controllerrevisions/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
                body: models_1.V1DeleteOptionsToJSON(requestParameters.body),
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.V1StatusFromJSON(jsonValue));
        });
    }
    /**
     * delete a ControllerRevision
     */
    deleteNamespacedControllerRevision(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteNamespacedControllerRevisionRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * delete a DaemonSet
     */
    deleteNamespacedDaemonSetRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.name === null || requestParameters.name === undefined) {
                throw new runtime.RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling deleteNamespacedDaemonSet.');
            }
            if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                throw new runtime.RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling deleteNamespacedDaemonSet.');
            }
            const queryParameters = {};
            if (requestParameters.pretty !== undefined) {
                queryParameters['pretty'] = requestParameters.pretty;
            }
            if (requestParameters.dryRun !== undefined) {
                queryParameters['dryRun'] = requestParameters.dryRun;
            }
            if (requestParameters.gracePeriodSeconds !== undefined) {
                queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
            }
            if (requestParameters.orphanDependents !== undefined) {
                queryParameters['orphanDependents'] = requestParameters.orphanDependents;
            }
            if (requestParameters.propagationPolicy !== undefined) {
                queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
            }
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/apis/apps/v1/namespaces/{namespace}/daemonsets/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
                body: models_1.V1DeleteOptionsToJSON(requestParameters.body),
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.V1StatusFromJSON(jsonValue));
        });
    }
    /**
     * delete a DaemonSet
     */
    deleteNamespacedDaemonSet(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteNamespacedDaemonSetRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * delete a Deployment
     */
    deleteNamespacedDeploymentRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.name === null || requestParameters.name === undefined) {
                throw new runtime.RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling deleteNamespacedDeployment.');
            }
            if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                throw new runtime.RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling deleteNamespacedDeployment.');
            }
            const queryParameters = {};
            if (requestParameters.pretty !== undefined) {
                queryParameters['pretty'] = requestParameters.pretty;
            }
            if (requestParameters.dryRun !== undefined) {
                queryParameters['dryRun'] = requestParameters.dryRun;
            }
            if (requestParameters.gracePeriodSeconds !== undefined) {
                queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
            }
            if (requestParameters.orphanDependents !== undefined) {
                queryParameters['orphanDependents'] = requestParameters.orphanDependents;
            }
            if (requestParameters.propagationPolicy !== undefined) {
                queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
            }
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/apis/apps/v1/namespaces/{namespace}/deployments/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
                body: models_1.V1DeleteOptionsToJSON(requestParameters.body),
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.V1StatusFromJSON(jsonValue));
        });
    }
    /**
     * delete a Deployment
     */
    deleteNamespacedDeployment(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteNamespacedDeploymentRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * delete a ReplicaSet
     */
    deleteNamespacedReplicaSetRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.name === null || requestParameters.name === undefined) {
                throw new runtime.RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling deleteNamespacedReplicaSet.');
            }
            if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                throw new runtime.RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling deleteNamespacedReplicaSet.');
            }
            const queryParameters = {};
            if (requestParameters.pretty !== undefined) {
                queryParameters['pretty'] = requestParameters.pretty;
            }
            if (requestParameters.dryRun !== undefined) {
                queryParameters['dryRun'] = requestParameters.dryRun;
            }
            if (requestParameters.gracePeriodSeconds !== undefined) {
                queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
            }
            if (requestParameters.orphanDependents !== undefined) {
                queryParameters['orphanDependents'] = requestParameters.orphanDependents;
            }
            if (requestParameters.propagationPolicy !== undefined) {
                queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
            }
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/apis/apps/v1/namespaces/{namespace}/replicasets/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
                body: models_1.V1DeleteOptionsToJSON(requestParameters.body),
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.V1StatusFromJSON(jsonValue));
        });
    }
    /**
     * delete a ReplicaSet
     */
    deleteNamespacedReplicaSet(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteNamespacedReplicaSetRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * delete a StatefulSet
     */
    deleteNamespacedStatefulSetRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.name === null || requestParameters.name === undefined) {
                throw new runtime.RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling deleteNamespacedStatefulSet.');
            }
            if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                throw new runtime.RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling deleteNamespacedStatefulSet.');
            }
            const queryParameters = {};
            if (requestParameters.pretty !== undefined) {
                queryParameters['pretty'] = requestParameters.pretty;
            }
            if (requestParameters.dryRun !== undefined) {
                queryParameters['dryRun'] = requestParameters.dryRun;
            }
            if (requestParameters.gracePeriodSeconds !== undefined) {
                queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
            }
            if (requestParameters.orphanDependents !== undefined) {
                queryParameters['orphanDependents'] = requestParameters.orphanDependents;
            }
            if (requestParameters.propagationPolicy !== undefined) {
                queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
            }
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/apis/apps/v1/namespaces/{namespace}/statefulsets/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
                body: models_1.V1DeleteOptionsToJSON(requestParameters.body),
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.V1StatusFromJSON(jsonValue));
        });
    }
    /**
     * delete a StatefulSet
     */
    deleteNamespacedStatefulSet(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteNamespacedStatefulSetRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * get available resources
     */
    getAPIResourcesRaw() {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/apis/apps/v1/`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.V1APIResourceListFromJSON(jsonValue));
        });
    }
    /**
     * get available resources
     */
    getAPIResources() {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getAPIResourcesRaw();
            return yield response.value();
        });
    }
    /**
     * list or watch objects of kind ControllerRevision
     */
    listControllerRevisionForAllNamespacesRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.allowWatchBookmarks !== undefined) {
                queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
            }
            if (requestParameters._continue !== undefined) {
                queryParameters['continue'] = requestParameters._continue;
            }
            if (requestParameters.fieldSelector !== undefined) {
                queryParameters['fieldSelector'] = requestParameters.fieldSelector;
            }
            if (requestParameters.labelSelector !== undefined) {
                queryParameters['labelSelector'] = requestParameters.labelSelector;
            }
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.pretty !== undefined) {
                queryParameters['pretty'] = requestParameters.pretty;
            }
            if (requestParameters.resourceVersion !== undefined) {
                queryParameters['resourceVersion'] = requestParameters.resourceVersion;
            }
            if (requestParameters.resourceVersionMatch !== undefined) {
                queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
            }
            if (requestParameters.timeoutSeconds !== undefined) {
                queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
            }
            if (requestParameters.watch !== undefined) {
                queryParameters['watch'] = requestParameters.watch;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/apis/apps/v1/controllerrevisions`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.V1ControllerRevisionListFromJSON(jsonValue));
        });
    }
    /**
     * list or watch objects of kind ControllerRevision
     */
    listControllerRevisionForAllNamespaces(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.listControllerRevisionForAllNamespacesRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * list or watch objects of kind DaemonSet
     */
    listDaemonSetForAllNamespacesRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.allowWatchBookmarks !== undefined) {
                queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
            }
            if (requestParameters._continue !== undefined) {
                queryParameters['continue'] = requestParameters._continue;
            }
            if (requestParameters.fieldSelector !== undefined) {
                queryParameters['fieldSelector'] = requestParameters.fieldSelector;
            }
            if (requestParameters.labelSelector !== undefined) {
                queryParameters['labelSelector'] = requestParameters.labelSelector;
            }
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.pretty !== undefined) {
                queryParameters['pretty'] = requestParameters.pretty;
            }
            if (requestParameters.resourceVersion !== undefined) {
                queryParameters['resourceVersion'] = requestParameters.resourceVersion;
            }
            if (requestParameters.resourceVersionMatch !== undefined) {
                queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
            }
            if (requestParameters.timeoutSeconds !== undefined) {
                queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
            }
            if (requestParameters.watch !== undefined) {
                queryParameters['watch'] = requestParameters.watch;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/apis/apps/v1/daemonsets`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.V1DaemonSetListFromJSON(jsonValue));
        });
    }
    /**
     * list or watch objects of kind DaemonSet
     */
    listDaemonSetForAllNamespaces(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.listDaemonSetForAllNamespacesRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * list or watch objects of kind Deployment
     */
    listDeploymentForAllNamespacesRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.allowWatchBookmarks !== undefined) {
                queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
            }
            if (requestParameters._continue !== undefined) {
                queryParameters['continue'] = requestParameters._continue;
            }
            if (requestParameters.fieldSelector !== undefined) {
                queryParameters['fieldSelector'] = requestParameters.fieldSelector;
            }
            if (requestParameters.labelSelector !== undefined) {
                queryParameters['labelSelector'] = requestParameters.labelSelector;
            }
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.pretty !== undefined) {
                queryParameters['pretty'] = requestParameters.pretty;
            }
            if (requestParameters.resourceVersion !== undefined) {
                queryParameters['resourceVersion'] = requestParameters.resourceVersion;
            }
            if (requestParameters.resourceVersionMatch !== undefined) {
                queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
            }
            if (requestParameters.timeoutSeconds !== undefined) {
                queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
            }
            if (requestParameters.watch !== undefined) {
                queryParameters['watch'] = requestParameters.watch;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/apis/apps/v1/deployments`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.V1DeploymentListFromJSON(jsonValue));
        });
    }
    /**
     * list or watch objects of kind Deployment
     */
    listDeploymentForAllNamespaces(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.listDeploymentForAllNamespacesRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * list or watch objects of kind ControllerRevision
     */
    listNamespacedControllerRevisionRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                throw new runtime.RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling listNamespacedControllerRevision.');
            }
            const queryParameters = {};
            if (requestParameters.pretty !== undefined) {
                queryParameters['pretty'] = requestParameters.pretty;
            }
            if (requestParameters.allowWatchBookmarks !== undefined) {
                queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
            }
            if (requestParameters._continue !== undefined) {
                queryParameters['continue'] = requestParameters._continue;
            }
            if (requestParameters.fieldSelector !== undefined) {
                queryParameters['fieldSelector'] = requestParameters.fieldSelector;
            }
            if (requestParameters.labelSelector !== undefined) {
                queryParameters['labelSelector'] = requestParameters.labelSelector;
            }
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.resourceVersion !== undefined) {
                queryParameters['resourceVersion'] = requestParameters.resourceVersion;
            }
            if (requestParameters.resourceVersionMatch !== undefined) {
                queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
            }
            if (requestParameters.timeoutSeconds !== undefined) {
                queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
            }
            if (requestParameters.watch !== undefined) {
                queryParameters['watch'] = requestParameters.watch;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/apis/apps/v1/namespaces/{namespace}/controllerrevisions`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.V1ControllerRevisionListFromJSON(jsonValue));
        });
    }
    /**
     * list or watch objects of kind ControllerRevision
     */
    listNamespacedControllerRevision(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.listNamespacedControllerRevisionRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * list or watch objects of kind DaemonSet
     */
    listNamespacedDaemonSetRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                throw new runtime.RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling listNamespacedDaemonSet.');
            }
            const queryParameters = {};
            if (requestParameters.pretty !== undefined) {
                queryParameters['pretty'] = requestParameters.pretty;
            }
            if (requestParameters.allowWatchBookmarks !== undefined) {
                queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
            }
            if (requestParameters._continue !== undefined) {
                queryParameters['continue'] = requestParameters._continue;
            }
            if (requestParameters.fieldSelector !== undefined) {
                queryParameters['fieldSelector'] = requestParameters.fieldSelector;
            }
            if (requestParameters.labelSelector !== undefined) {
                queryParameters['labelSelector'] = requestParameters.labelSelector;
            }
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.resourceVersion !== undefined) {
                queryParameters['resourceVersion'] = requestParameters.resourceVersion;
            }
            if (requestParameters.resourceVersionMatch !== undefined) {
                queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
            }
            if (requestParameters.timeoutSeconds !== undefined) {
                queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
            }
            if (requestParameters.watch !== undefined) {
                queryParameters['watch'] = requestParameters.watch;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/apis/apps/v1/namespaces/{namespace}/daemonsets`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.V1DaemonSetListFromJSON(jsonValue));
        });
    }
    /**
     * list or watch objects of kind DaemonSet
     */
    listNamespacedDaemonSet(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.listNamespacedDaemonSetRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * list or watch objects of kind Deployment
     */
    listNamespacedDeploymentRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                throw new runtime.RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling listNamespacedDeployment.');
            }
            const queryParameters = {};
            if (requestParameters.pretty !== undefined) {
                queryParameters['pretty'] = requestParameters.pretty;
            }
            if (requestParameters.allowWatchBookmarks !== undefined) {
                queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
            }
            if (requestParameters._continue !== undefined) {
                queryParameters['continue'] = requestParameters._continue;
            }
            if (requestParameters.fieldSelector !== undefined) {
                queryParameters['fieldSelector'] = requestParameters.fieldSelector;
            }
            if (requestParameters.labelSelector !== undefined) {
                queryParameters['labelSelector'] = requestParameters.labelSelector;
            }
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.resourceVersion !== undefined) {
                queryParameters['resourceVersion'] = requestParameters.resourceVersion;
            }
            if (requestParameters.resourceVersionMatch !== undefined) {
                queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
            }
            if (requestParameters.timeoutSeconds !== undefined) {
                queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
            }
            if (requestParameters.watch !== undefined) {
                queryParameters['watch'] = requestParameters.watch;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/apis/apps/v1/namespaces/{namespace}/deployments`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.V1DeploymentListFromJSON(jsonValue));
        });
    }
    /**
     * list or watch objects of kind Deployment
     */
    listNamespacedDeployment(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.listNamespacedDeploymentRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * list or watch objects of kind ReplicaSet
     */
    listNamespacedReplicaSetRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                throw new runtime.RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling listNamespacedReplicaSet.');
            }
            const queryParameters = {};
            if (requestParameters.pretty !== undefined) {
                queryParameters['pretty'] = requestParameters.pretty;
            }
            if (requestParameters.allowWatchBookmarks !== undefined) {
                queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
            }
            if (requestParameters._continue !== undefined) {
                queryParameters['continue'] = requestParameters._continue;
            }
            if (requestParameters.fieldSelector !== undefined) {
                queryParameters['fieldSelector'] = requestParameters.fieldSelector;
            }
            if (requestParameters.labelSelector !== undefined) {
                queryParameters['labelSelector'] = requestParameters.labelSelector;
            }
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.resourceVersion !== undefined) {
                queryParameters['resourceVersion'] = requestParameters.resourceVersion;
            }
            if (requestParameters.resourceVersionMatch !== undefined) {
                queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
            }
            if (requestParameters.timeoutSeconds !== undefined) {
                queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
            }
            if (requestParameters.watch !== undefined) {
                queryParameters['watch'] = requestParameters.watch;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/apis/apps/v1/namespaces/{namespace}/replicasets`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.V1ReplicaSetListFromJSON(jsonValue));
        });
    }
    /**
     * list or watch objects of kind ReplicaSet
     */
    listNamespacedReplicaSet(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.listNamespacedReplicaSetRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * list or watch objects of kind StatefulSet
     */
    listNamespacedStatefulSetRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                throw new runtime.RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling listNamespacedStatefulSet.');
            }
            const queryParameters = {};
            if (requestParameters.pretty !== undefined) {
                queryParameters['pretty'] = requestParameters.pretty;
            }
            if (requestParameters.allowWatchBookmarks !== undefined) {
                queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
            }
            if (requestParameters._continue !== undefined) {
                queryParameters['continue'] = requestParameters._continue;
            }
            if (requestParameters.fieldSelector !== undefined) {
                queryParameters['fieldSelector'] = requestParameters.fieldSelector;
            }
            if (requestParameters.labelSelector !== undefined) {
                queryParameters['labelSelector'] = requestParameters.labelSelector;
            }
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.resourceVersion !== undefined) {
                queryParameters['resourceVersion'] = requestParameters.resourceVersion;
            }
            if (requestParameters.resourceVersionMatch !== undefined) {
                queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
            }
            if (requestParameters.timeoutSeconds !== undefined) {
                queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
            }
            if (requestParameters.watch !== undefined) {
                queryParameters['watch'] = requestParameters.watch;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/apis/apps/v1/namespaces/{namespace}/statefulsets`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.V1StatefulSetListFromJSON(jsonValue));
        });
    }
    /**
     * list or watch objects of kind StatefulSet
     */
    listNamespacedStatefulSet(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.listNamespacedStatefulSetRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * list or watch objects of kind ReplicaSet
     */
    listReplicaSetForAllNamespacesRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.allowWatchBookmarks !== undefined) {
                queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
            }
            if (requestParameters._continue !== undefined) {
                queryParameters['continue'] = requestParameters._continue;
            }
            if (requestParameters.fieldSelector !== undefined) {
                queryParameters['fieldSelector'] = requestParameters.fieldSelector;
            }
            if (requestParameters.labelSelector !== undefined) {
                queryParameters['labelSelector'] = requestParameters.labelSelector;
            }
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.pretty !== undefined) {
                queryParameters['pretty'] = requestParameters.pretty;
            }
            if (requestParameters.resourceVersion !== undefined) {
                queryParameters['resourceVersion'] = requestParameters.resourceVersion;
            }
            if (requestParameters.resourceVersionMatch !== undefined) {
                queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
            }
            if (requestParameters.timeoutSeconds !== undefined) {
                queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
            }
            if (requestParameters.watch !== undefined) {
                queryParameters['watch'] = requestParameters.watch;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/apis/apps/v1/replicasets`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.V1ReplicaSetListFromJSON(jsonValue));
        });
    }
    /**
     * list or watch objects of kind ReplicaSet
     */
    listReplicaSetForAllNamespaces(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.listReplicaSetForAllNamespacesRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * list or watch objects of kind StatefulSet
     */
    listStatefulSetForAllNamespacesRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.allowWatchBookmarks !== undefined) {
                queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
            }
            if (requestParameters._continue !== undefined) {
                queryParameters['continue'] = requestParameters._continue;
            }
            if (requestParameters.fieldSelector !== undefined) {
                queryParameters['fieldSelector'] = requestParameters.fieldSelector;
            }
            if (requestParameters.labelSelector !== undefined) {
                queryParameters['labelSelector'] = requestParameters.labelSelector;
            }
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.pretty !== undefined) {
                queryParameters['pretty'] = requestParameters.pretty;
            }
            if (requestParameters.resourceVersion !== undefined) {
                queryParameters['resourceVersion'] = requestParameters.resourceVersion;
            }
            if (requestParameters.resourceVersionMatch !== undefined) {
                queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
            }
            if (requestParameters.timeoutSeconds !== undefined) {
                queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
            }
            if (requestParameters.watch !== undefined) {
                queryParameters['watch'] = requestParameters.watch;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/apis/apps/v1/statefulsets`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.V1StatefulSetListFromJSON(jsonValue));
        });
    }
    /**
     * list or watch objects of kind StatefulSet
     */
    listStatefulSetForAllNamespaces(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.listStatefulSetForAllNamespacesRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * partially update the specified ControllerRevision
     */
    patchNamespacedControllerRevisionRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.name === null || requestParameters.name === undefined) {
                throw new runtime.RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling patchNamespacedControllerRevision.');
            }
            if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                throw new runtime.RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling patchNamespacedControllerRevision.');
            }
            if (requestParameters.body === null || requestParameters.body === undefined) {
                throw new runtime.RequiredError('body', 'Required parameter requestParameters.body was null or undefined when calling patchNamespacedControllerRevision.');
            }
            const queryParameters = {};
            if (requestParameters.pretty !== undefined) {
                queryParameters['pretty'] = requestParameters.pretty;
            }
            if (requestParameters.dryRun !== undefined) {
                queryParameters['dryRun'] = requestParameters.dryRun;
            }
            if (requestParameters.fieldManager !== undefined) {
                queryParameters['fieldManager'] = requestParameters.fieldManager;
            }
            if (requestParameters.fieldValidation !== undefined) {
                queryParameters['fieldValidation'] = requestParameters.fieldValidation;
            }
            if (requestParameters.force !== undefined) {
                queryParameters['force'] = requestParameters.force;
            }
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json-patch+json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/apis/apps/v1/namespaces/{namespace}/controllerrevisions/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
                method: 'PATCH',
                headers: headerParameters,
                query: queryParameters,
                body: requestParameters.body,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.V1ControllerRevisionFromJSON(jsonValue));
        });
    }
    /**
     * partially update the specified ControllerRevision
     */
    patchNamespacedControllerRevision(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.patchNamespacedControllerRevisionRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * partially update the specified DaemonSet
     */
    patchNamespacedDaemonSetRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.name === null || requestParameters.name === undefined) {
                throw new runtime.RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling patchNamespacedDaemonSet.');
            }
            if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                throw new runtime.RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling patchNamespacedDaemonSet.');
            }
            if (requestParameters.body === null || requestParameters.body === undefined) {
                throw new runtime.RequiredError('body', 'Required parameter requestParameters.body was null or undefined when calling patchNamespacedDaemonSet.');
            }
            const queryParameters = {};
            if (requestParameters.pretty !== undefined) {
                queryParameters['pretty'] = requestParameters.pretty;
            }
            if (requestParameters.dryRun !== undefined) {
                queryParameters['dryRun'] = requestParameters.dryRun;
            }
            if (requestParameters.fieldManager !== undefined) {
                queryParameters['fieldManager'] = requestParameters.fieldManager;
            }
            if (requestParameters.fieldValidation !== undefined) {
                queryParameters['fieldValidation'] = requestParameters.fieldValidation;
            }
            if (requestParameters.force !== undefined) {
                queryParameters['force'] = requestParameters.force;
            }
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json-patch+json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/apis/apps/v1/namespaces/{namespace}/daemonsets/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
                method: 'PATCH',
                headers: headerParameters,
                query: queryParameters,
                body: requestParameters.body,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.V1DaemonSetFromJSON(jsonValue));
        });
    }
    /**
     * partially update the specified DaemonSet
     */
    patchNamespacedDaemonSet(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.patchNamespacedDaemonSetRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * partially update status of the specified DaemonSet
     */
    patchNamespacedDaemonSetStatusRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.name === null || requestParameters.name === undefined) {
                throw new runtime.RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling patchNamespacedDaemonSetStatus.');
            }
            if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                throw new runtime.RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling patchNamespacedDaemonSetStatus.');
            }
            if (requestParameters.body === null || requestParameters.body === undefined) {
                throw new runtime.RequiredError('body', 'Required parameter requestParameters.body was null or undefined when calling patchNamespacedDaemonSetStatus.');
            }
            const queryParameters = {};
            if (requestParameters.pretty !== undefined) {
                queryParameters['pretty'] = requestParameters.pretty;
            }
            if (requestParameters.dryRun !== undefined) {
                queryParameters['dryRun'] = requestParameters.dryRun;
            }
            if (requestParameters.fieldManager !== undefined) {
                queryParameters['fieldManager'] = requestParameters.fieldManager;
            }
            if (requestParameters.fieldValidation !== undefined) {
                queryParameters['fieldValidation'] = requestParameters.fieldValidation;
            }
            if (requestParameters.force !== undefined) {
                queryParameters['force'] = requestParameters.force;
            }
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json-patch+json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/apis/apps/v1/namespaces/{namespace}/daemonsets/{name}/status`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
                method: 'PATCH',
                headers: headerParameters,
                query: queryParameters,
                body: requestParameters.body,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.V1DaemonSetFromJSON(jsonValue));
        });
    }
    /**
     * partially update status of the specified DaemonSet
     */
    patchNamespacedDaemonSetStatus(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.patchNamespacedDaemonSetStatusRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * partially update the specified Deployment
     */
    patchNamespacedDeploymentRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.name === null || requestParameters.name === undefined) {
                throw new runtime.RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling patchNamespacedDeployment.');
            }
            if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                throw new runtime.RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling patchNamespacedDeployment.');
            }
            if (requestParameters.body === null || requestParameters.body === undefined) {
                throw new runtime.RequiredError('body', 'Required parameter requestParameters.body was null or undefined when calling patchNamespacedDeployment.');
            }
            const queryParameters = {};
            if (requestParameters.pretty !== undefined) {
                queryParameters['pretty'] = requestParameters.pretty;
            }
            if (requestParameters.dryRun !== undefined) {
                queryParameters['dryRun'] = requestParameters.dryRun;
            }
            if (requestParameters.fieldManager !== undefined) {
                queryParameters['fieldManager'] = requestParameters.fieldManager;
            }
            if (requestParameters.fieldValidation !== undefined) {
                queryParameters['fieldValidation'] = requestParameters.fieldValidation;
            }
            if (requestParameters.force !== undefined) {
                queryParameters['force'] = requestParameters.force;
            }
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json-patch+json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/apis/apps/v1/namespaces/{namespace}/deployments/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
                method: 'PATCH',
                headers: headerParameters,
                query: queryParameters,
                body: requestParameters.body,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.V1DeploymentFromJSON(jsonValue));
        });
    }
    /**
     * partially update the specified Deployment
     */
    patchNamespacedDeployment(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.patchNamespacedDeploymentRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * partially update scale of the specified Deployment
     */
    patchNamespacedDeploymentScaleRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.name === null || requestParameters.name === undefined) {
                throw new runtime.RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling patchNamespacedDeploymentScale.');
            }
            if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                throw new runtime.RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling patchNamespacedDeploymentScale.');
            }
            if (requestParameters.body === null || requestParameters.body === undefined) {
                throw new runtime.RequiredError('body', 'Required parameter requestParameters.body was null or undefined when calling patchNamespacedDeploymentScale.');
            }
            const queryParameters = {};
            if (requestParameters.pretty !== undefined) {
                queryParameters['pretty'] = requestParameters.pretty;
            }
            if (requestParameters.dryRun !== undefined) {
                queryParameters['dryRun'] = requestParameters.dryRun;
            }
            if (requestParameters.fieldManager !== undefined) {
                queryParameters['fieldManager'] = requestParameters.fieldManager;
            }
            if (requestParameters.fieldValidation !== undefined) {
                queryParameters['fieldValidation'] = requestParameters.fieldValidation;
            }
            if (requestParameters.force !== undefined) {
                queryParameters['force'] = requestParameters.force;
            }
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json-patch+json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/apis/apps/v1/namespaces/{namespace}/deployments/{name}/scale`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
                method: 'PATCH',
                headers: headerParameters,
                query: queryParameters,
                body: requestParameters.body,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.V1ScaleFromJSON(jsonValue));
        });
    }
    /**
     * partially update scale of the specified Deployment
     */
    patchNamespacedDeploymentScale(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.patchNamespacedDeploymentScaleRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * partially update status of the specified Deployment
     */
    patchNamespacedDeploymentStatusRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.name === null || requestParameters.name === undefined) {
                throw new runtime.RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling patchNamespacedDeploymentStatus.');
            }
            if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                throw new runtime.RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling patchNamespacedDeploymentStatus.');
            }
            if (requestParameters.body === null || requestParameters.body === undefined) {
                throw new runtime.RequiredError('body', 'Required parameter requestParameters.body was null or undefined when calling patchNamespacedDeploymentStatus.');
            }
            const queryParameters = {};
            if (requestParameters.pretty !== undefined) {
                queryParameters['pretty'] = requestParameters.pretty;
            }
            if (requestParameters.dryRun !== undefined) {
                queryParameters['dryRun'] = requestParameters.dryRun;
            }
            if (requestParameters.fieldManager !== undefined) {
                queryParameters['fieldManager'] = requestParameters.fieldManager;
            }
            if (requestParameters.fieldValidation !== undefined) {
                queryParameters['fieldValidation'] = requestParameters.fieldValidation;
            }
            if (requestParameters.force !== undefined) {
                queryParameters['force'] = requestParameters.force;
            }
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json-patch+json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/apis/apps/v1/namespaces/{namespace}/deployments/{name}/status`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
                method: 'PATCH',
                headers: headerParameters,
                query: queryParameters,
                body: requestParameters.body,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.V1DeploymentFromJSON(jsonValue));
        });
    }
    /**
     * partially update status of the specified Deployment
     */
    patchNamespacedDeploymentStatus(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.patchNamespacedDeploymentStatusRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * partially update the specified ReplicaSet
     */
    patchNamespacedReplicaSetRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.name === null || requestParameters.name === undefined) {
                throw new runtime.RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling patchNamespacedReplicaSet.');
            }
            if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                throw new runtime.RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling patchNamespacedReplicaSet.');
            }
            if (requestParameters.body === null || requestParameters.body === undefined) {
                throw new runtime.RequiredError('body', 'Required parameter requestParameters.body was null or undefined when calling patchNamespacedReplicaSet.');
            }
            const queryParameters = {};
            if (requestParameters.pretty !== undefined) {
                queryParameters['pretty'] = requestParameters.pretty;
            }
            if (requestParameters.dryRun !== undefined) {
                queryParameters['dryRun'] = requestParameters.dryRun;
            }
            if (requestParameters.fieldManager !== undefined) {
                queryParameters['fieldManager'] = requestParameters.fieldManager;
            }
            if (requestParameters.fieldValidation !== undefined) {
                queryParameters['fieldValidation'] = requestParameters.fieldValidation;
            }
            if (requestParameters.force !== undefined) {
                queryParameters['force'] = requestParameters.force;
            }
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json-patch+json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/apis/apps/v1/namespaces/{namespace}/replicasets/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
                method: 'PATCH',
                headers: headerParameters,
                query: queryParameters,
                body: requestParameters.body,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.V1ReplicaSetFromJSON(jsonValue));
        });
    }
    /**
     * partially update the specified ReplicaSet
     */
    patchNamespacedReplicaSet(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.patchNamespacedReplicaSetRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * partially update scale of the specified ReplicaSet
     */
    patchNamespacedReplicaSetScaleRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.name === null || requestParameters.name === undefined) {
                throw new runtime.RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling patchNamespacedReplicaSetScale.');
            }
            if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                throw new runtime.RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling patchNamespacedReplicaSetScale.');
            }
            if (requestParameters.body === null || requestParameters.body === undefined) {
                throw new runtime.RequiredError('body', 'Required parameter requestParameters.body was null or undefined when calling patchNamespacedReplicaSetScale.');
            }
            const queryParameters = {};
            if (requestParameters.pretty !== undefined) {
                queryParameters['pretty'] = requestParameters.pretty;
            }
            if (requestParameters.dryRun !== undefined) {
                queryParameters['dryRun'] = requestParameters.dryRun;
            }
            if (requestParameters.fieldManager !== undefined) {
                queryParameters['fieldManager'] = requestParameters.fieldManager;
            }
            if (requestParameters.fieldValidation !== undefined) {
                queryParameters['fieldValidation'] = requestParameters.fieldValidation;
            }
            if (requestParameters.force !== undefined) {
                queryParameters['force'] = requestParameters.force;
            }
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json-patch+json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/apis/apps/v1/namespaces/{namespace}/replicasets/{name}/scale`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
                method: 'PATCH',
                headers: headerParameters,
                query: queryParameters,
                body: requestParameters.body,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.V1ScaleFromJSON(jsonValue));
        });
    }
    /**
     * partially update scale of the specified ReplicaSet
     */
    patchNamespacedReplicaSetScale(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.patchNamespacedReplicaSetScaleRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * partially update status of the specified ReplicaSet
     */
    patchNamespacedReplicaSetStatusRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.name === null || requestParameters.name === undefined) {
                throw new runtime.RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling patchNamespacedReplicaSetStatus.');
            }
            if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                throw new runtime.RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling patchNamespacedReplicaSetStatus.');
            }
            if (requestParameters.body === null || requestParameters.body === undefined) {
                throw new runtime.RequiredError('body', 'Required parameter requestParameters.body was null or undefined when calling patchNamespacedReplicaSetStatus.');
            }
            const queryParameters = {};
            if (requestParameters.pretty !== undefined) {
                queryParameters['pretty'] = requestParameters.pretty;
            }
            if (requestParameters.dryRun !== undefined) {
                queryParameters['dryRun'] = requestParameters.dryRun;
            }
            if (requestParameters.fieldManager !== undefined) {
                queryParameters['fieldManager'] = requestParameters.fieldManager;
            }
            if (requestParameters.fieldValidation !== undefined) {
                queryParameters['fieldValidation'] = requestParameters.fieldValidation;
            }
            if (requestParameters.force !== undefined) {
                queryParameters['force'] = requestParameters.force;
            }
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json-patch+json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/apis/apps/v1/namespaces/{namespace}/replicasets/{name}/status`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
                method: 'PATCH',
                headers: headerParameters,
                query: queryParameters,
                body: requestParameters.body,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.V1ReplicaSetFromJSON(jsonValue));
        });
    }
    /**
     * partially update status of the specified ReplicaSet
     */
    patchNamespacedReplicaSetStatus(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.patchNamespacedReplicaSetStatusRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * partially update the specified StatefulSet
     */
    patchNamespacedStatefulSetRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.name === null || requestParameters.name === undefined) {
                throw new runtime.RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling patchNamespacedStatefulSet.');
            }
            if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                throw new runtime.RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling patchNamespacedStatefulSet.');
            }
            if (requestParameters.body === null || requestParameters.body === undefined) {
                throw new runtime.RequiredError('body', 'Required parameter requestParameters.body was null or undefined when calling patchNamespacedStatefulSet.');
            }
            const queryParameters = {};
            if (requestParameters.pretty !== undefined) {
                queryParameters['pretty'] = requestParameters.pretty;
            }
            if (requestParameters.dryRun !== undefined) {
                queryParameters['dryRun'] = requestParameters.dryRun;
            }
            if (requestParameters.fieldManager !== undefined) {
                queryParameters['fieldManager'] = requestParameters.fieldManager;
            }
            if (requestParameters.fieldValidation !== undefined) {
                queryParameters['fieldValidation'] = requestParameters.fieldValidation;
            }
            if (requestParameters.force !== undefined) {
                queryParameters['force'] = requestParameters.force;
            }
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json-patch+json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/apis/apps/v1/namespaces/{namespace}/statefulsets/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
                method: 'PATCH',
                headers: headerParameters,
                query: queryParameters,
                body: requestParameters.body,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.V1StatefulSetFromJSON(jsonValue));
        });
    }
    /**
     * partially update the specified StatefulSet
     */
    patchNamespacedStatefulSet(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.patchNamespacedStatefulSetRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * partially update scale of the specified StatefulSet
     */
    patchNamespacedStatefulSetScaleRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.name === null || requestParameters.name === undefined) {
                throw new runtime.RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling patchNamespacedStatefulSetScale.');
            }
            if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                throw new runtime.RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling patchNamespacedStatefulSetScale.');
            }
            if (requestParameters.body === null || requestParameters.body === undefined) {
                throw new runtime.RequiredError('body', 'Required parameter requestParameters.body was null or undefined when calling patchNamespacedStatefulSetScale.');
            }
            const queryParameters = {};
            if (requestParameters.pretty !== undefined) {
                queryParameters['pretty'] = requestParameters.pretty;
            }
            if (requestParameters.dryRun !== undefined) {
                queryParameters['dryRun'] = requestParameters.dryRun;
            }
            if (requestParameters.fieldManager !== undefined) {
                queryParameters['fieldManager'] = requestParameters.fieldManager;
            }
            if (requestParameters.fieldValidation !== undefined) {
                queryParameters['fieldValidation'] = requestParameters.fieldValidation;
            }
            if (requestParameters.force !== undefined) {
                queryParameters['force'] = requestParameters.force;
            }
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json-patch+json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/apis/apps/v1/namespaces/{namespace}/statefulsets/{name}/scale`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
                method: 'PATCH',
                headers: headerParameters,
                query: queryParameters,
                body: requestParameters.body,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.V1ScaleFromJSON(jsonValue));
        });
    }
    /**
     * partially update scale of the specified StatefulSet
     */
    patchNamespacedStatefulSetScale(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.patchNamespacedStatefulSetScaleRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * partially update status of the specified StatefulSet
     */
    patchNamespacedStatefulSetStatusRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.name === null || requestParameters.name === undefined) {
                throw new runtime.RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling patchNamespacedStatefulSetStatus.');
            }
            if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                throw new runtime.RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling patchNamespacedStatefulSetStatus.');
            }
            if (requestParameters.body === null || requestParameters.body === undefined) {
                throw new runtime.RequiredError('body', 'Required parameter requestParameters.body was null or undefined when calling patchNamespacedStatefulSetStatus.');
            }
            const queryParameters = {};
            if (requestParameters.pretty !== undefined) {
                queryParameters['pretty'] = requestParameters.pretty;
            }
            if (requestParameters.dryRun !== undefined) {
                queryParameters['dryRun'] = requestParameters.dryRun;
            }
            if (requestParameters.fieldManager !== undefined) {
                queryParameters['fieldManager'] = requestParameters.fieldManager;
            }
            if (requestParameters.fieldValidation !== undefined) {
                queryParameters['fieldValidation'] = requestParameters.fieldValidation;
            }
            if (requestParameters.force !== undefined) {
                queryParameters['force'] = requestParameters.force;
            }
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json-patch+json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/apis/apps/v1/namespaces/{namespace}/statefulsets/{name}/status`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
                method: 'PATCH',
                headers: headerParameters,
                query: queryParameters,
                body: requestParameters.body,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.V1StatefulSetFromJSON(jsonValue));
        });
    }
    /**
     * partially update status of the specified StatefulSet
     */
    patchNamespacedStatefulSetStatus(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.patchNamespacedStatefulSetStatusRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * read the specified ControllerRevision
     */
    readNamespacedControllerRevisionRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.name === null || requestParameters.name === undefined) {
                throw new runtime.RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling readNamespacedControllerRevision.');
            }
            if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                throw new runtime.RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling readNamespacedControllerRevision.');
            }
            const queryParameters = {};
            if (requestParameters.pretty !== undefined) {
                queryParameters['pretty'] = requestParameters.pretty;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/apis/apps/v1/namespaces/{namespace}/controllerrevisions/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.V1ControllerRevisionFromJSON(jsonValue));
        });
    }
    /**
     * read the specified ControllerRevision
     */
    readNamespacedControllerRevision(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.readNamespacedControllerRevisionRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * read the specified DaemonSet
     */
    readNamespacedDaemonSetRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.name === null || requestParameters.name === undefined) {
                throw new runtime.RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling readNamespacedDaemonSet.');
            }
            if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                throw new runtime.RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling readNamespacedDaemonSet.');
            }
            const queryParameters = {};
            if (requestParameters.pretty !== undefined) {
                queryParameters['pretty'] = requestParameters.pretty;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/apis/apps/v1/namespaces/{namespace}/daemonsets/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.V1DaemonSetFromJSON(jsonValue));
        });
    }
    /**
     * read the specified DaemonSet
     */
    readNamespacedDaemonSet(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.readNamespacedDaemonSetRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * read status of the specified DaemonSet
     */
    readNamespacedDaemonSetStatusRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.name === null || requestParameters.name === undefined) {
                throw new runtime.RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling readNamespacedDaemonSetStatus.');
            }
            if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                throw new runtime.RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling readNamespacedDaemonSetStatus.');
            }
            const queryParameters = {};
            if (requestParameters.pretty !== undefined) {
                queryParameters['pretty'] = requestParameters.pretty;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/apis/apps/v1/namespaces/{namespace}/daemonsets/{name}/status`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.V1DaemonSetFromJSON(jsonValue));
        });
    }
    /**
     * read status of the specified DaemonSet
     */
    readNamespacedDaemonSetStatus(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.readNamespacedDaemonSetStatusRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * read the specified Deployment
     */
    readNamespacedDeploymentRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.name === null || requestParameters.name === undefined) {
                throw new runtime.RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling readNamespacedDeployment.');
            }
            if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                throw new runtime.RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling readNamespacedDeployment.');
            }
            const queryParameters = {};
            if (requestParameters.pretty !== undefined) {
                queryParameters['pretty'] = requestParameters.pretty;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/apis/apps/v1/namespaces/{namespace}/deployments/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.V1DeploymentFromJSON(jsonValue));
        });
    }
    /**
     * read the specified Deployment
     */
    readNamespacedDeployment(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.readNamespacedDeploymentRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * read scale of the specified Deployment
     */
    readNamespacedDeploymentScaleRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.name === null || requestParameters.name === undefined) {
                throw new runtime.RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling readNamespacedDeploymentScale.');
            }
            if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                throw new runtime.RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling readNamespacedDeploymentScale.');
            }
            const queryParameters = {};
            if (requestParameters.pretty !== undefined) {
                queryParameters['pretty'] = requestParameters.pretty;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/apis/apps/v1/namespaces/{namespace}/deployments/{name}/scale`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.V1ScaleFromJSON(jsonValue));
        });
    }
    /**
     * read scale of the specified Deployment
     */
    readNamespacedDeploymentScale(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.readNamespacedDeploymentScaleRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * read status of the specified Deployment
     */
    readNamespacedDeploymentStatusRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.name === null || requestParameters.name === undefined) {
                throw new runtime.RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling readNamespacedDeploymentStatus.');
            }
            if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                throw new runtime.RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling readNamespacedDeploymentStatus.');
            }
            const queryParameters = {};
            if (requestParameters.pretty !== undefined) {
                queryParameters['pretty'] = requestParameters.pretty;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/apis/apps/v1/namespaces/{namespace}/deployments/{name}/status`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.V1DeploymentFromJSON(jsonValue));
        });
    }
    /**
     * read status of the specified Deployment
     */
    readNamespacedDeploymentStatus(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.readNamespacedDeploymentStatusRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * read the specified ReplicaSet
     */
    readNamespacedReplicaSetRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.name === null || requestParameters.name === undefined) {
                throw new runtime.RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling readNamespacedReplicaSet.');
            }
            if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                throw new runtime.RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling readNamespacedReplicaSet.');
            }
            const queryParameters = {};
            if (requestParameters.pretty !== undefined) {
                queryParameters['pretty'] = requestParameters.pretty;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/apis/apps/v1/namespaces/{namespace}/replicasets/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.V1ReplicaSetFromJSON(jsonValue));
        });
    }
    /**
     * read the specified ReplicaSet
     */
    readNamespacedReplicaSet(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.readNamespacedReplicaSetRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * read scale of the specified ReplicaSet
     */
    readNamespacedReplicaSetScaleRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.name === null || requestParameters.name === undefined) {
                throw new runtime.RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling readNamespacedReplicaSetScale.');
            }
            if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                throw new runtime.RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling readNamespacedReplicaSetScale.');
            }
            const queryParameters = {};
            if (requestParameters.pretty !== undefined) {
                queryParameters['pretty'] = requestParameters.pretty;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/apis/apps/v1/namespaces/{namespace}/replicasets/{name}/scale`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.V1ScaleFromJSON(jsonValue));
        });
    }
    /**
     * read scale of the specified ReplicaSet
     */
    readNamespacedReplicaSetScale(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.readNamespacedReplicaSetScaleRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * read status of the specified ReplicaSet
     */
    readNamespacedReplicaSetStatusRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.name === null || requestParameters.name === undefined) {
                throw new runtime.RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling readNamespacedReplicaSetStatus.');
            }
            if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                throw new runtime.RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling readNamespacedReplicaSetStatus.');
            }
            const queryParameters = {};
            if (requestParameters.pretty !== undefined) {
                queryParameters['pretty'] = requestParameters.pretty;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/apis/apps/v1/namespaces/{namespace}/replicasets/{name}/status`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.V1ReplicaSetFromJSON(jsonValue));
        });
    }
    /**
     * read status of the specified ReplicaSet
     */
    readNamespacedReplicaSetStatus(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.readNamespacedReplicaSetStatusRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * read the specified StatefulSet
     */
    readNamespacedStatefulSetRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.name === null || requestParameters.name === undefined) {
                throw new runtime.RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling readNamespacedStatefulSet.');
            }
            if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                throw new runtime.RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling readNamespacedStatefulSet.');
            }
            const queryParameters = {};
            if (requestParameters.pretty !== undefined) {
                queryParameters['pretty'] = requestParameters.pretty;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/apis/apps/v1/namespaces/{namespace}/statefulsets/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.V1StatefulSetFromJSON(jsonValue));
        });
    }
    /**
     * read the specified StatefulSet
     */
    readNamespacedStatefulSet(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.readNamespacedStatefulSetRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * read scale of the specified StatefulSet
     */
    readNamespacedStatefulSetScaleRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.name === null || requestParameters.name === undefined) {
                throw new runtime.RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling readNamespacedStatefulSetScale.');
            }
            if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                throw new runtime.RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling readNamespacedStatefulSetScale.');
            }
            const queryParameters = {};
            if (requestParameters.pretty !== undefined) {
                queryParameters['pretty'] = requestParameters.pretty;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/apis/apps/v1/namespaces/{namespace}/statefulsets/{name}/scale`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.V1ScaleFromJSON(jsonValue));
        });
    }
    /**
     * read scale of the specified StatefulSet
     */
    readNamespacedStatefulSetScale(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.readNamespacedStatefulSetScaleRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * read status of the specified StatefulSet
     */
    readNamespacedStatefulSetStatusRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.name === null || requestParameters.name === undefined) {
                throw new runtime.RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling readNamespacedStatefulSetStatus.');
            }
            if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                throw new runtime.RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling readNamespacedStatefulSetStatus.');
            }
            const queryParameters = {};
            if (requestParameters.pretty !== undefined) {
                queryParameters['pretty'] = requestParameters.pretty;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/apis/apps/v1/namespaces/{namespace}/statefulsets/{name}/status`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.V1StatefulSetFromJSON(jsonValue));
        });
    }
    /**
     * read status of the specified StatefulSet
     */
    readNamespacedStatefulSetStatus(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.readNamespacedStatefulSetStatusRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * replace the specified ControllerRevision
     */
    replaceNamespacedControllerRevisionRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.name === null || requestParameters.name === undefined) {
                throw new runtime.RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling replaceNamespacedControllerRevision.');
            }
            if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                throw new runtime.RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling replaceNamespacedControllerRevision.');
            }
            if (requestParameters.body === null || requestParameters.body === undefined) {
                throw new runtime.RequiredError('body', 'Required parameter requestParameters.body was null or undefined when calling replaceNamespacedControllerRevision.');
            }
            const queryParameters = {};
            if (requestParameters.pretty !== undefined) {
                queryParameters['pretty'] = requestParameters.pretty;
            }
            if (requestParameters.dryRun !== undefined) {
                queryParameters['dryRun'] = requestParameters.dryRun;
            }
            if (requestParameters.fieldManager !== undefined) {
                queryParameters['fieldManager'] = requestParameters.fieldManager;
            }
            if (requestParameters.fieldValidation !== undefined) {
                queryParameters['fieldValidation'] = requestParameters.fieldValidation;
            }
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/apis/apps/v1/namespaces/{namespace}/controllerrevisions/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: models_1.V1ControllerRevisionToJSON(requestParameters.body),
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.V1ControllerRevisionFromJSON(jsonValue));
        });
    }
    /**
     * replace the specified ControllerRevision
     */
    replaceNamespacedControllerRevision(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.replaceNamespacedControllerRevisionRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * replace the specified DaemonSet
     */
    replaceNamespacedDaemonSetRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.name === null || requestParameters.name === undefined) {
                throw new runtime.RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling replaceNamespacedDaemonSet.');
            }
            if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                throw new runtime.RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling replaceNamespacedDaemonSet.');
            }
            if (requestParameters.body === null || requestParameters.body === undefined) {
                throw new runtime.RequiredError('body', 'Required parameter requestParameters.body was null or undefined when calling replaceNamespacedDaemonSet.');
            }
            const queryParameters = {};
            if (requestParameters.pretty !== undefined) {
                queryParameters['pretty'] = requestParameters.pretty;
            }
            if (requestParameters.dryRun !== undefined) {
                queryParameters['dryRun'] = requestParameters.dryRun;
            }
            if (requestParameters.fieldManager !== undefined) {
                queryParameters['fieldManager'] = requestParameters.fieldManager;
            }
            if (requestParameters.fieldValidation !== undefined) {
                queryParameters['fieldValidation'] = requestParameters.fieldValidation;
            }
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/apis/apps/v1/namespaces/{namespace}/daemonsets/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: models_1.V1DaemonSetToJSON(requestParameters.body),
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.V1DaemonSetFromJSON(jsonValue));
        });
    }
    /**
     * replace the specified DaemonSet
     */
    replaceNamespacedDaemonSet(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.replaceNamespacedDaemonSetRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * replace status of the specified DaemonSet
     */
    replaceNamespacedDaemonSetStatusRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.name === null || requestParameters.name === undefined) {
                throw new runtime.RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling replaceNamespacedDaemonSetStatus.');
            }
            if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                throw new runtime.RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling replaceNamespacedDaemonSetStatus.');
            }
            if (requestParameters.body === null || requestParameters.body === undefined) {
                throw new runtime.RequiredError('body', 'Required parameter requestParameters.body was null or undefined when calling replaceNamespacedDaemonSetStatus.');
            }
            const queryParameters = {};
            if (requestParameters.pretty !== undefined) {
                queryParameters['pretty'] = requestParameters.pretty;
            }
            if (requestParameters.dryRun !== undefined) {
                queryParameters['dryRun'] = requestParameters.dryRun;
            }
            if (requestParameters.fieldManager !== undefined) {
                queryParameters['fieldManager'] = requestParameters.fieldManager;
            }
            if (requestParameters.fieldValidation !== undefined) {
                queryParameters['fieldValidation'] = requestParameters.fieldValidation;
            }
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/apis/apps/v1/namespaces/{namespace}/daemonsets/{name}/status`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: models_1.V1DaemonSetToJSON(requestParameters.body),
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.V1DaemonSetFromJSON(jsonValue));
        });
    }
    /**
     * replace status of the specified DaemonSet
     */
    replaceNamespacedDaemonSetStatus(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.replaceNamespacedDaemonSetStatusRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * replace the specified Deployment
     */
    replaceNamespacedDeploymentRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.name === null || requestParameters.name === undefined) {
                throw new runtime.RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling replaceNamespacedDeployment.');
            }
            if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                throw new runtime.RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling replaceNamespacedDeployment.');
            }
            if (requestParameters.body === null || requestParameters.body === undefined) {
                throw new runtime.RequiredError('body', 'Required parameter requestParameters.body was null or undefined when calling replaceNamespacedDeployment.');
            }
            const queryParameters = {};
            if (requestParameters.pretty !== undefined) {
                queryParameters['pretty'] = requestParameters.pretty;
            }
            if (requestParameters.dryRun !== undefined) {
                queryParameters['dryRun'] = requestParameters.dryRun;
            }
            if (requestParameters.fieldManager !== undefined) {
                queryParameters['fieldManager'] = requestParameters.fieldManager;
            }
            if (requestParameters.fieldValidation !== undefined) {
                queryParameters['fieldValidation'] = requestParameters.fieldValidation;
            }
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/apis/apps/v1/namespaces/{namespace}/deployments/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: models_1.V1DeploymentToJSON(requestParameters.body),
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.V1DeploymentFromJSON(jsonValue));
        });
    }
    /**
     * replace the specified Deployment
     */
    replaceNamespacedDeployment(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.replaceNamespacedDeploymentRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * replace scale of the specified Deployment
     */
    replaceNamespacedDeploymentScaleRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.name === null || requestParameters.name === undefined) {
                throw new runtime.RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling replaceNamespacedDeploymentScale.');
            }
            if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                throw new runtime.RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling replaceNamespacedDeploymentScale.');
            }
            if (requestParameters.body === null || requestParameters.body === undefined) {
                throw new runtime.RequiredError('body', 'Required parameter requestParameters.body was null or undefined when calling replaceNamespacedDeploymentScale.');
            }
            const queryParameters = {};
            if (requestParameters.pretty !== undefined) {
                queryParameters['pretty'] = requestParameters.pretty;
            }
            if (requestParameters.dryRun !== undefined) {
                queryParameters['dryRun'] = requestParameters.dryRun;
            }
            if (requestParameters.fieldManager !== undefined) {
                queryParameters['fieldManager'] = requestParameters.fieldManager;
            }
            if (requestParameters.fieldValidation !== undefined) {
                queryParameters['fieldValidation'] = requestParameters.fieldValidation;
            }
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/apis/apps/v1/namespaces/{namespace}/deployments/{name}/scale`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: models_1.V1ScaleToJSON(requestParameters.body),
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.V1ScaleFromJSON(jsonValue));
        });
    }
    /**
     * replace scale of the specified Deployment
     */
    replaceNamespacedDeploymentScale(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.replaceNamespacedDeploymentScaleRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * replace status of the specified Deployment
     */
    replaceNamespacedDeploymentStatusRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.name === null || requestParameters.name === undefined) {
                throw new runtime.RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling replaceNamespacedDeploymentStatus.');
            }
            if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                throw new runtime.RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling replaceNamespacedDeploymentStatus.');
            }
            if (requestParameters.body === null || requestParameters.body === undefined) {
                throw new runtime.RequiredError('body', 'Required parameter requestParameters.body was null or undefined when calling replaceNamespacedDeploymentStatus.');
            }
            const queryParameters = {};
            if (requestParameters.pretty !== undefined) {
                queryParameters['pretty'] = requestParameters.pretty;
            }
            if (requestParameters.dryRun !== undefined) {
                queryParameters['dryRun'] = requestParameters.dryRun;
            }
            if (requestParameters.fieldManager !== undefined) {
                queryParameters['fieldManager'] = requestParameters.fieldManager;
            }
            if (requestParameters.fieldValidation !== undefined) {
                queryParameters['fieldValidation'] = requestParameters.fieldValidation;
            }
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/apis/apps/v1/namespaces/{namespace}/deployments/{name}/status`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: models_1.V1DeploymentToJSON(requestParameters.body),
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.V1DeploymentFromJSON(jsonValue));
        });
    }
    /**
     * replace status of the specified Deployment
     */
    replaceNamespacedDeploymentStatus(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.replaceNamespacedDeploymentStatusRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * replace the specified ReplicaSet
     */
    replaceNamespacedReplicaSetRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.name === null || requestParameters.name === undefined) {
                throw new runtime.RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling replaceNamespacedReplicaSet.');
            }
            if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                throw new runtime.RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling replaceNamespacedReplicaSet.');
            }
            if (requestParameters.body === null || requestParameters.body === undefined) {
                throw new runtime.RequiredError('body', 'Required parameter requestParameters.body was null or undefined when calling replaceNamespacedReplicaSet.');
            }
            const queryParameters = {};
            if (requestParameters.pretty !== undefined) {
                queryParameters['pretty'] = requestParameters.pretty;
            }
            if (requestParameters.dryRun !== undefined) {
                queryParameters['dryRun'] = requestParameters.dryRun;
            }
            if (requestParameters.fieldManager !== undefined) {
                queryParameters['fieldManager'] = requestParameters.fieldManager;
            }
            if (requestParameters.fieldValidation !== undefined) {
                queryParameters['fieldValidation'] = requestParameters.fieldValidation;
            }
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/apis/apps/v1/namespaces/{namespace}/replicasets/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: models_1.V1ReplicaSetToJSON(requestParameters.body),
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.V1ReplicaSetFromJSON(jsonValue));
        });
    }
    /**
     * replace the specified ReplicaSet
     */
    replaceNamespacedReplicaSet(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.replaceNamespacedReplicaSetRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * replace scale of the specified ReplicaSet
     */
    replaceNamespacedReplicaSetScaleRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.name === null || requestParameters.name === undefined) {
                throw new runtime.RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling replaceNamespacedReplicaSetScale.');
            }
            if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                throw new runtime.RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling replaceNamespacedReplicaSetScale.');
            }
            if (requestParameters.body === null || requestParameters.body === undefined) {
                throw new runtime.RequiredError('body', 'Required parameter requestParameters.body was null or undefined when calling replaceNamespacedReplicaSetScale.');
            }
            const queryParameters = {};
            if (requestParameters.pretty !== undefined) {
                queryParameters['pretty'] = requestParameters.pretty;
            }
            if (requestParameters.dryRun !== undefined) {
                queryParameters['dryRun'] = requestParameters.dryRun;
            }
            if (requestParameters.fieldManager !== undefined) {
                queryParameters['fieldManager'] = requestParameters.fieldManager;
            }
            if (requestParameters.fieldValidation !== undefined) {
                queryParameters['fieldValidation'] = requestParameters.fieldValidation;
            }
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/apis/apps/v1/namespaces/{namespace}/replicasets/{name}/scale`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: models_1.V1ScaleToJSON(requestParameters.body),
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.V1ScaleFromJSON(jsonValue));
        });
    }
    /**
     * replace scale of the specified ReplicaSet
     */
    replaceNamespacedReplicaSetScale(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.replaceNamespacedReplicaSetScaleRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * replace status of the specified ReplicaSet
     */
    replaceNamespacedReplicaSetStatusRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.name === null || requestParameters.name === undefined) {
                throw new runtime.RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling replaceNamespacedReplicaSetStatus.');
            }
            if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                throw new runtime.RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling replaceNamespacedReplicaSetStatus.');
            }
            if (requestParameters.body === null || requestParameters.body === undefined) {
                throw new runtime.RequiredError('body', 'Required parameter requestParameters.body was null or undefined when calling replaceNamespacedReplicaSetStatus.');
            }
            const queryParameters = {};
            if (requestParameters.pretty !== undefined) {
                queryParameters['pretty'] = requestParameters.pretty;
            }
            if (requestParameters.dryRun !== undefined) {
                queryParameters['dryRun'] = requestParameters.dryRun;
            }
            if (requestParameters.fieldManager !== undefined) {
                queryParameters['fieldManager'] = requestParameters.fieldManager;
            }
            if (requestParameters.fieldValidation !== undefined) {
                queryParameters['fieldValidation'] = requestParameters.fieldValidation;
            }
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/apis/apps/v1/namespaces/{namespace}/replicasets/{name}/status`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: models_1.V1ReplicaSetToJSON(requestParameters.body),
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.V1ReplicaSetFromJSON(jsonValue));
        });
    }
    /**
     * replace status of the specified ReplicaSet
     */
    replaceNamespacedReplicaSetStatus(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.replaceNamespacedReplicaSetStatusRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * replace the specified StatefulSet
     */
    replaceNamespacedStatefulSetRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.name === null || requestParameters.name === undefined) {
                throw new runtime.RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling replaceNamespacedStatefulSet.');
            }
            if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                throw new runtime.RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling replaceNamespacedStatefulSet.');
            }
            if (requestParameters.body === null || requestParameters.body === undefined) {
                throw new runtime.RequiredError('body', 'Required parameter requestParameters.body was null or undefined when calling replaceNamespacedStatefulSet.');
            }
            const queryParameters = {};
            if (requestParameters.pretty !== undefined) {
                queryParameters['pretty'] = requestParameters.pretty;
            }
            if (requestParameters.dryRun !== undefined) {
                queryParameters['dryRun'] = requestParameters.dryRun;
            }
            if (requestParameters.fieldManager !== undefined) {
                queryParameters['fieldManager'] = requestParameters.fieldManager;
            }
            if (requestParameters.fieldValidation !== undefined) {
                queryParameters['fieldValidation'] = requestParameters.fieldValidation;
            }
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/apis/apps/v1/namespaces/{namespace}/statefulsets/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: models_1.V1StatefulSetToJSON(requestParameters.body),
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.V1StatefulSetFromJSON(jsonValue));
        });
    }
    /**
     * replace the specified StatefulSet
     */
    replaceNamespacedStatefulSet(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.replaceNamespacedStatefulSetRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * replace scale of the specified StatefulSet
     */
    replaceNamespacedStatefulSetScaleRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.name === null || requestParameters.name === undefined) {
                throw new runtime.RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling replaceNamespacedStatefulSetScale.');
            }
            if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                throw new runtime.RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling replaceNamespacedStatefulSetScale.');
            }
            if (requestParameters.body === null || requestParameters.body === undefined) {
                throw new runtime.RequiredError('body', 'Required parameter requestParameters.body was null or undefined when calling replaceNamespacedStatefulSetScale.');
            }
            const queryParameters = {};
            if (requestParameters.pretty !== undefined) {
                queryParameters['pretty'] = requestParameters.pretty;
            }
            if (requestParameters.dryRun !== undefined) {
                queryParameters['dryRun'] = requestParameters.dryRun;
            }
            if (requestParameters.fieldManager !== undefined) {
                queryParameters['fieldManager'] = requestParameters.fieldManager;
            }
            if (requestParameters.fieldValidation !== undefined) {
                queryParameters['fieldValidation'] = requestParameters.fieldValidation;
            }
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/apis/apps/v1/namespaces/{namespace}/statefulsets/{name}/scale`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: models_1.V1ScaleToJSON(requestParameters.body),
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.V1ScaleFromJSON(jsonValue));
        });
    }
    /**
     * replace scale of the specified StatefulSet
     */
    replaceNamespacedStatefulSetScale(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.replaceNamespacedStatefulSetScaleRaw(requestParameters);
            return yield response.value();
        });
    }
    /**
     * replace status of the specified StatefulSet
     */
    replaceNamespacedStatefulSetStatusRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.name === null || requestParameters.name === undefined) {
                throw new runtime.RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling replaceNamespacedStatefulSetStatus.');
            }
            if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
                throw new runtime.RequiredError('namespace', 'Required parameter requestParameters.namespace was null or undefined when calling replaceNamespacedStatefulSetStatus.');
            }
            if (requestParameters.body === null || requestParameters.body === undefined) {
                throw new runtime.RequiredError('body', 'Required parameter requestParameters.body was null or undefined when calling replaceNamespacedStatefulSetStatus.');
            }
            const queryParameters = {};
            if (requestParameters.pretty !== undefined) {
                queryParameters['pretty'] = requestParameters.pretty;
            }
            if (requestParameters.dryRun !== undefined) {
                queryParameters['dryRun'] = requestParameters.dryRun;
            }
            if (requestParameters.fieldManager !== undefined) {
                queryParameters['fieldManager'] = requestParameters.fieldManager;
            }
            if (requestParameters.fieldValidation !== undefined) {
                queryParameters['fieldValidation'] = requestParameters.fieldValidation;
            }
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
            }
            const response = yield this.request({
                path: `/apis/apps/v1/namespaces/{namespace}/statefulsets/{name}/status`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: models_1.V1StatefulSetToJSON(requestParameters.body),
            });
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.V1StatefulSetFromJSON(jsonValue));
        });
    }
    /**
     * replace status of the specified StatefulSet
     */
    replaceNamespacedStatefulSetStatus(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.replaceNamespacedStatefulSetStatusRaw(requestParameters);
            return yield response.value();
        });
    }
}
exports.AppsV1Api = AppsV1Api;
