/**
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: release-1.24
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import { V1APIResourceList, V1DeleteOptions, V1Status, V1beta1CronJob, V1beta1CronJobList } from '../models';
export interface BatchV1beta1ApiCreateNamespacedCronJobRequest {
    namespace: string;
    body: V1beta1CronJob;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
}
export interface BatchV1beta1ApiDeleteCollectionNamespacedCronJobRequest {
    namespace: string;
    pretty?: string;
    _continue?: string;
    dryRun?: string;
    fieldSelector?: string;
    gracePeriodSeconds?: number;
    labelSelector?: string;
    limit?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    timeoutSeconds?: number;
    body?: V1DeleteOptions;
}
export interface BatchV1beta1ApiDeleteNamespacedCronJobRequest {
    name: string;
    namespace: string;
    pretty?: string;
    dryRun?: string;
    gracePeriodSeconds?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    body?: V1DeleteOptions;
}
export interface BatchV1beta1ApiListCronJobForAllNamespacesRequest {
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}
export interface BatchV1beta1ApiListNamespacedCronJobRequest {
    namespace: string;
    pretty?: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}
export interface BatchV1beta1ApiPatchNamespacedCronJobRequest {
    name: string;
    namespace: string;
    body: object;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
    force?: boolean;
}
export interface BatchV1beta1ApiPatchNamespacedCronJobStatusRequest {
    name: string;
    namespace: string;
    body: object;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
    force?: boolean;
}
export interface BatchV1beta1ApiReadNamespacedCronJobRequest {
    name: string;
    namespace: string;
    pretty?: string;
}
export interface BatchV1beta1ApiReadNamespacedCronJobStatusRequest {
    name: string;
    namespace: string;
    pretty?: string;
}
export interface BatchV1beta1ApiReplaceNamespacedCronJobRequest {
    name: string;
    namespace: string;
    body: V1beta1CronJob;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
}
export interface BatchV1beta1ApiReplaceNamespacedCronJobStatusRequest {
    name: string;
    namespace: string;
    body: V1beta1CronJob;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
}
/**
 *
 */
export declare class BatchV1beta1Api extends runtime.BaseAPI {
    /**
     * create a CronJob
     */
    createNamespacedCronJobRaw(requestParameters: BatchV1beta1ApiCreateNamespacedCronJobRequest): Promise<runtime.ApiResponse<V1beta1CronJob>>;
    /**
     * create a CronJob
     */
    createNamespacedCronJob(requestParameters: BatchV1beta1ApiCreateNamespacedCronJobRequest): Promise<V1beta1CronJob>;
    /**
     * delete collection of CronJob
     */
    deleteCollectionNamespacedCronJobRaw(requestParameters: BatchV1beta1ApiDeleteCollectionNamespacedCronJobRequest): Promise<runtime.ApiResponse<V1Status>>;
    /**
     * delete collection of CronJob
     */
    deleteCollectionNamespacedCronJob(requestParameters: BatchV1beta1ApiDeleteCollectionNamespacedCronJobRequest): Promise<V1Status>;
    /**
     * delete a CronJob
     */
    deleteNamespacedCronJobRaw(requestParameters: BatchV1beta1ApiDeleteNamespacedCronJobRequest): Promise<runtime.ApiResponse<V1Status>>;
    /**
     * delete a CronJob
     */
    deleteNamespacedCronJob(requestParameters: BatchV1beta1ApiDeleteNamespacedCronJobRequest): Promise<V1Status>;
    /**
     * get available resources
     */
    getAPIResourcesRaw(): Promise<runtime.ApiResponse<V1APIResourceList>>;
    /**
     * get available resources
     */
    getAPIResources(): Promise<V1APIResourceList>;
    /**
     * list or watch objects of kind CronJob
     */
    listCronJobForAllNamespacesRaw(requestParameters: BatchV1beta1ApiListCronJobForAllNamespacesRequest): Promise<runtime.ApiResponse<V1beta1CronJobList>>;
    /**
     * list or watch objects of kind CronJob
     */
    listCronJobForAllNamespaces(requestParameters: BatchV1beta1ApiListCronJobForAllNamespacesRequest): Promise<V1beta1CronJobList>;
    /**
     * list or watch objects of kind CronJob
     */
    listNamespacedCronJobRaw(requestParameters: BatchV1beta1ApiListNamespacedCronJobRequest): Promise<runtime.ApiResponse<V1beta1CronJobList>>;
    /**
     * list or watch objects of kind CronJob
     */
    listNamespacedCronJob(requestParameters: BatchV1beta1ApiListNamespacedCronJobRequest): Promise<V1beta1CronJobList>;
    /**
     * partially update the specified CronJob
     */
    patchNamespacedCronJobRaw(requestParameters: BatchV1beta1ApiPatchNamespacedCronJobRequest): Promise<runtime.ApiResponse<V1beta1CronJob>>;
    /**
     * partially update the specified CronJob
     */
    patchNamespacedCronJob(requestParameters: BatchV1beta1ApiPatchNamespacedCronJobRequest): Promise<V1beta1CronJob>;
    /**
     * partially update status of the specified CronJob
     */
    patchNamespacedCronJobStatusRaw(requestParameters: BatchV1beta1ApiPatchNamespacedCronJobStatusRequest): Promise<runtime.ApiResponse<V1beta1CronJob>>;
    /**
     * partially update status of the specified CronJob
     */
    patchNamespacedCronJobStatus(requestParameters: BatchV1beta1ApiPatchNamespacedCronJobStatusRequest): Promise<V1beta1CronJob>;
    /**
     * read the specified CronJob
     */
    readNamespacedCronJobRaw(requestParameters: BatchV1beta1ApiReadNamespacedCronJobRequest): Promise<runtime.ApiResponse<V1beta1CronJob>>;
    /**
     * read the specified CronJob
     */
    readNamespacedCronJob(requestParameters: BatchV1beta1ApiReadNamespacedCronJobRequest): Promise<V1beta1CronJob>;
    /**
     * read status of the specified CronJob
     */
    readNamespacedCronJobStatusRaw(requestParameters: BatchV1beta1ApiReadNamespacedCronJobStatusRequest): Promise<runtime.ApiResponse<V1beta1CronJob>>;
    /**
     * read status of the specified CronJob
     */
    readNamespacedCronJobStatus(requestParameters: BatchV1beta1ApiReadNamespacedCronJobStatusRequest): Promise<V1beta1CronJob>;
    /**
     * replace the specified CronJob
     */
    replaceNamespacedCronJobRaw(requestParameters: BatchV1beta1ApiReplaceNamespacedCronJobRequest): Promise<runtime.ApiResponse<V1beta1CronJob>>;
    /**
     * replace the specified CronJob
     */
    replaceNamespacedCronJob(requestParameters: BatchV1beta1ApiReplaceNamespacedCronJobRequest): Promise<V1beta1CronJob>;
    /**
     * replace status of the specified CronJob
     */
    replaceNamespacedCronJobStatusRaw(requestParameters: BatchV1beta1ApiReplaceNamespacedCronJobStatusRequest): Promise<runtime.ApiResponse<V1beta1CronJob>>;
    /**
     * replace status of the specified CronJob
     */
    replaceNamespacedCronJobStatus(requestParameters: BatchV1beta1ApiReplaceNamespacedCronJobStatusRequest): Promise<V1beta1CronJob>;
}
